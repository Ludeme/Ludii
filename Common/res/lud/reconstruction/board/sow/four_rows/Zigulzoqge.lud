(game "Zigulzoqge"
    (players <Board:players>)

    (equipment {
        (mancalaBoard <Board:players> <Board:size> store:None)
        (piece "Seed" Shared)
        (hand Each)
        <Board:regions>
    })
    (rules

        (start (set Count 5 to:(sites Board) ))

        (play
            (or
                (if (!= 2 (var "MainDirection"))
                    (move Select
                        (from
                            (if
                                (is Mover Prev)
                                (sites {(last To)})
                                (sites Mover)
                            )
                            if:(> (count at:(from)) 0)
                        )
                        (to
                            (if (is In (from) (sites Right))
                                (if (and (is In (last To) (sites Right)) (is In (last From) (sites Right)))
                                    (if (is In (from) (sites Top))
                                        (sites {(ahead (from) steps:1 W)})
                                        (sites {(ahead (from) steps:1 N) (ahead (from) steps:1 W)})
                                    )
                                    (sites {(ahead (from) steps:1 N)})
                                )
                                (if (is In (from) (sites Left))
                                    (if (and (is In (last To) (sites Left)) (is In (last From) (sites Left)))
                                        (if (is In (from) (sites Bottom))
                                            (sites {(ahead (from) steps:1 E)})
                                            (sites {(ahead (from) steps:1 S) (ahead (from) steps:1 E)})
                                        )
                                        (sites {(ahead (from) steps:1 S)})
                                    )
                                    (if (= 1 (var "CurrentDirection"))
                                        (sites {(ahead (from) steps:1 W)})
                                        (sites {(ahead (from) steps:1 E)})
                                    )
                                )
                            )
                        )
                        (then
                            (and {
                                (if (is Prev Mover)
                                    (and
                                        (set Var "Count" (- (var "Count") 1))
                                        (if (< 1 (var "Count"))
                                            (and
                                                (moveAgain)
                                                (if (is In (last To) (sites Right))
                                                    (set Var "CurrentDirection" 1)
                                                    (if (is In (last To) (sites Left))
                                                        (set Var "CurrentDirection" 0)
                                                    )
                                                )
                                            )
                                            (set Var "CurrentDirection" 0)
                                        )
                                    )
                                    (and
                                        (set Var "Count" (- (count at:(last From)) 1))
                                        (if (< 1 (count at:(last From)))
                                            (and
                                                (moveAgain)
                                                (if (is In (last To) (sites Right))
                                                    (set Var "CurrentDirection" 1)
                                                    (if (is In (last To) (sites Left))
                                                        (set Var "CurrentDirection" 0)
                                                    )
                                                )
                                            )
                                            (set Var "CurrentDirection" 0)
                                        )
                                    )
                                )
                                (fromTo
                                    (from (last From))
                                    (to (last To))
                                    count:(if (is Prev Mover) (var "Count") (count at:(last From)))
                                )
                                (if (>= 0 (var "MainDirection")) (set Var "MainDirection" 1))
                            })
                        )
                    )
                )
                (if (!= 1 (var "MainDirection"))
                    (move Select
                        (from
                            (if
                                (is Mover Prev)
                                (sites {(last To)})
                                (sites Mover)
                            )
                            if:(> (count at:(from)) 0)
                        )
                        (to
                            (if (is In (from) (sites Left))
                                (if (and (is In (last To) (sites Left)) (is In (last From) (sites Left)))
                                    (if (is In (from) (sites Bottom))
                                        (sites {(ahead (from) steps:1 E)})
                                        (sites {(ahead (from) steps:1 S) (ahead (from) steps:1 E)})
                                    )
                                    (sites {(ahead (from) steps:1 S)})
                                )
                                (if (is In (from) (sites Right))
                                    (if (and (is In (last To) (sites Right)) (is In (last From) (sites Right)))
                                        (if (is In (from) (sites Top))
                                            (sites {(ahead (from) steps:1 W)})
                                            (sites {(ahead (from) steps:1 N) (ahead (from) steps:1 W)})
                                        )
                                        (sites {(ahead (from) steps:1 N)})
                                    )
                                    (if (= 1 (var "CurrentDirection"))
                                        (sites {(ahead (from) steps:1 E)})
                                        (sites {(ahead (from) steps:1 W)})
                                    )
                                )
                            )
                        )
                        (then
                            (and {
                                (if (is Prev Mover)
                                    (and
                                        (set Var "Count" (- (var "Count") 1))
                                        (if (< 1 (var "Count"))
                                            (and
                                                (moveAgain)
                                                (if (is In (last To) (sites Left))
                                                    (set Var "CurrentDirection" 1)
                                                    (if (is In (last To) (sites Right))
                                                        (set Var "CurrentDirection" 0)
                                                    )
                                                )
                                            )
                                            (set Var "CurrentDirection" 0)
                                        )
                                    )
                                    (and
                                        (set Var "Count" (- (count at:(last From)) 1))
                                        (if (< 1 (count at:(last From)))
                                            (and
                                                (moveAgain)
                                                (if (is In (last To) (sites Left))
                                                    (set Var "CurrentDirection" 1)
                                                    (if (is In (last To) (sites Right))
                                                        (set Var "CurrentDirection" 0)
                                                    )
                                                )
                                            )
                                            (set Var "CurrentDirection" 0)
                                        )
                                    )
                                )
                                (fromTo
                                    (from (last From))
                                    (to (last To))
                                    count:(if (is Prev Mover) (var "Count") (count at:(last From)))
                                )
                                (if (>= 0 (var "MainDirection")) (set Var "MainDirection" 2))
                            })
                        )
                    )
                )
            )
        )

        (end
            (if  (no Moves Next)
                (result Mover Win)
            )
        )
    )
)

//------------------------------------------------------------------------------

(option "Row Size and Players" <Board> args:{ <players> <size> <regions>}
    {
    (item "2 Players and 4 Holes per row" <2>  <4>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        >
    "2 players and each row has 4 holes.")

    (item "2 Players and 5 Holes per row" <2>  <5>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        >
    "2 players and each row has 5 holes.")

    (item "2 Players and 6 Holes per row" <2>  <6>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        >
    "2 players and each row has 6 holes.")

    (item "3 Players and 4 Holes per row" <3>  <4>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        (regions P3 (sites Row 2)) // P3 home
        >
    "3 players and each row has 4 holes.")

    (item "3 Players and 5 Holes per row" <3>  <5>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        (regions P3 (sites Row 2)) // P3 home
        >
    "3 players and each row has 5 holes.")

    (item "3 Players and 6 Holes per row" <3>  <6>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        (regions P3 (sites Row 2)) // P3 home
        >
    "3 players and each row has 6 holes.")

    (item "4 Players and 4 Holes per row" <4>  <4>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        (regions P3 (sites Row 2)) // P3 home
        (regions P4 (sites Row 3)) // P4 home
        >
    "4 players and each row has 4 holes.")

    (item "4 Players and 5 Holes per row" <4>  <5>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        (regions P3 (sites Row 2)) // P3 home
        (regions P4 (sites Row 3)) // P4 home
        >
    "4 players and each row has 5 holes.")

    (item "4 Players and 6 Holes per row" <4>  <6>
        <
        (regions P1 (sites Row 0)) // P1 home
        (regions P2 (sites Row 1)) // P2 home
        (regions P3 (sites Row 2)) // P3 home
        (regions P4 (sites Row 3)) // P4 home
        >
    "4 players and each row has 6 holes.")*
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Historical Information (Incomplete)" {

    })*

    (ruleset "Ruleset/Ziguloqge (Described)" {

    })*

})

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Ziguloqge is a mancala-style board game played by the Hani people of Yunnan, China. It is unique among mancala games because the number of row is detemined by the number of players, and players can choose which rows to sow their counters along, rather than sticking to a predetermined track.")
        (rules "Two to four players. Four to six holes per row; each player has one row. Five counters per hole. Sowing proceeds in either direction, the first player chooses which and all sowing for the rest of the game proceeds in that direction. Players may only sow from their row. When reaching the end of a row, players may continue in the same direction to sow along any of the other rows of their choosing, as long as they reach that row through intervening holes. This rule also holds for capturing. If the last counter falls into a hole with counters, the counters in the next hole are picked up and sowing continues, and if this hole is empty, the counters in the hole following the empty hole are captured. If there is an unbroken sequence of alternating empty and occupied holes, the counters in the occupied holes are captured until there are two empty or two occupied holes. If the final counter falls into an empty hole the turn ends. The game ends when all of the counters have been captured, and the player with the most counters wins.
        ")
        (source "DLP Evidence.")
        (version "1.3.0")
        (classification "board/sow/four rows/reconstruction")
        (credit "Eric Piette")
        (origin  "This game was played in China, around 1992.")
        }
    )

    (graphics {
        (board Style Mancala)
    })
)

