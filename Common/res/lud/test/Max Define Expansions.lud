(define "Move"
    (move
        (from
            (from)
            if:(> (state at:(from)) 1)
        )
        (to
            (sites Distance
                (step
                    Orthogonal
                    (to
                        if:(#1)
                    )
                )
                from:(from)
                (range 1 #2)
            )
            if:(is Empty (to))
            (apply
                (set State at:(from) #3)
            )
        )
    )
)

//------------------------------------------------------------------------------

(define "HumanMove"
    ("Move" (is In (to) "HumanMoveSpots") (state at:(from)) 1)
)

(define "VehicleMove"
    (or
        ("Move" (is In (to) (difference (union (sites Empty) (sites Occupied by:Mover)) (union {(difference (sites "PieceHolder") (sites Mover)) (sites "ShallowWater") (sites "Forest") (sites "Mountain") (sites "DeepWater") }))) (state at:(from)) #1)
        ("Move" (is In (to) (difference (intersection (union (sites Empty) (sites Occupied by:Mover)) (sites "Forest")) (union {(difference (sites "PieceHolder") (sites Mover)) }))) 2 #1)		// Forest move, 1 depth
    )
)

(define "AircraftMove"
    ("Move" (is In (to) "AircraftMoveSpots") (state at:(from)) 1)
)

(define "BoatMove"
    ("Move" (is In (to) "BoatMoveSpots") (state at:(from)) 1)
)

//------------------------------------------------------------------------------

(define "ForbiddenSpotsHuman" (union {(sites "Mountain") (sites "DeepWater") }))

(define "HumanMoveSpots"
    (difference (union (sites Empty) (sites Occupied by:Mover)) ("ForbiddenSpotsHuman") )
)

(define "ForbiddenSpotsVehicle" (union {(sites "Mountain") (sites "ShallowWater") (sites "DeepWater") }))

(define "VehicleMoveSpots"
    (difference (union (sites Empty) (sites Occupied by:Mover)) ("ForbiddenSpotsVehicle"))
)

(define "AircraftMoveSpots"
    (sites Board)
)

(define "ForbiddenSpotsBoat"
    (union
        (sites "Mountain")
        (difference (sites Board) (union (sites "ShallowWater") (sites "DeepWater")) )
    )
)

(define "BoatMoveSpots"
    (difference
        (union (sites Empty) (sites Occupied by:Mover))
        ("ForbiddenSpotsBoat")
    )
)

//------------------------------------------------------------------------------

(define "BoatAttackCheck"
    (or {
        (and
            (is In (#1) (sites Occupied #2 components:#5))
            (is In (#3) (sites Occupied #4 components:{"Submarine" "BattleShip" "Cruiser"}))
        )
        (and
            (not (is In (#1) (sites Occupied #2 components:#5)))
            (is In (#3) (union (sites Occupied #4) (sites Occupied by:Neutral)))
        )
    })
)

(define "AircraftAttackCheck"
    (or {
        (and
            (is In (#1) (sites Occupied #2 components:#5))
            (is In (#3) (sites Occupied #4 components:{"Fighter" "Helicopter" "Bomber"}))
        )
        (and
            (not (is In (#1) (sites Occupied #2 components:#5)))
            (is In (#3) (union (sites Occupied #4) (sites Occupied by:Neutral)))
        )
    })
)

(define "GroundAttackCheck"
    (or {
        (and
            (is In (#1) (sites Occupied #2 components:#5))
            (is In (#3) (union (sites Occupied #4 components:{"Soldier" "Motorbike" "Tank" "Speeder" "Shooter" "Launcher" "Antiair" "Boss" "Battleship" "Artillery" "Base" "Town" "Factory" "Dock" "Airport" "Cruiser" "Submarine"}) (sites Occupied by:Neutral)))
        )
        (and
            (not (is In (#1) (sites Occupied #2 components:#5)))
            (is In (#3) (union (sites Occupied #4) (sites Occupied by:Neutral)))
        )
    })
)

//------------------------------------------------------------------------------

(define "AttackMove"
    (move
        (from
            (from)
            if:
            (and
                (> (state at:(from)) 0)
                #3
            )
        )
        (to
            (sites Distance Orthogonal from:(from) (range #1 #2))
            if:
            #4
            (apply
                (and {
                    (set Value at:(to) (max 0 (- (value Piece at:(to)) ("AttackerDamage" from to to False))))
                    (set State at:(from) 0)
                    (fromTo (from (to)) (to (sites "PieceHolder")))
                })
            )
        )
        (then
            (forEach Site (sites "PieceHolder")
                (if (is In (site) "EnemyBuildingSites")

                    // Attacking a building
                    "AttackBuilding"

                    // Attacking a unit
                    (and {
                        (if (= (value Piece at:(site)) 0)
                            (remove (site))

                            // counter-attack
                            (if (and {
                                    (not (is In (last To) "RangedUnitSites" ))
                                    (not (is In (site) "RangedUnitSites" ))
                                    ("GroundAttackCheck" site by:Enemy (last To) by:Mover {"Boss" "Bomber" "Battleship" "Artillery" "Launcher"})
                                    ("AircraftAttackCheck" site by:Enemy (last To) by:Mover {"Antiair" "Fighter"})
                                    ("BoatAttackCheck" site by:Enemy (last To) by:Mover {"Submarine"})
                                })
                                (if (<= (- (value Piece at:(last To)) ("AttackerDamage" (site) (last From) (last To) True)) 0)
                                    (remove (last To))
                                    (set Value at:(last To) (- (value Piece at:(last To)) ("AttackerDamage" (site) (last From) (last To) True)))
                                )
                            )
                        )
                        (fromTo
                            (from (last To))
                            (to (last From))
                        )
                        (fromTo (from (sites "PieceHolder")) (to  (last To)))
                    })

                )
            )
        )
    )
)

// #1 location of the attacking piece
// #2 site that is being attacked (terrain purposes)
// #3 location of the piece being attacked
// #4 If this is a counter Attack (boolean)
(define "AttackerDamage"
    (/
        (*
            (if (is In (#3) "AircraftSites" )
                ("DamageMultiply" (* (value Piece at:(#1)) 4) #1 )									// Planes are never affected by terrain
                (if (and
                        (is In (#3) "HumanSites")
                        (is In (#1) (sites Occupied by:All component:"Shooter") )					// Shooter does double damage against humans
                    )
                    (if (is In (#2) (sites "Forest"))
                        ("DamageMultiply" (* (value Piece at:(#1)) 6) #1 )							// (Shooter does 150% damage against humans in forests)
                        (if (is In (#2) (union (sites "ShallowWater") (sites "DeepWater")))
                            ("DamageMultiply" (* (value Piece at:(#1)) 10) #1 )						// (Shooter does 250% damage against humans in water)
                            ("DamageMultiply" (* (value Piece at:(#1)) 8) #1 )						// (Shooter does 200% damage against humans on land)
                        )
                    )
                    (if (is In (#2) (sites "Forest"))
                        ("DamageMultiply" (* (value Piece at:(#1)) 3) #1 )							// 75% damage to units in forests
                        (if (is In (#2) (union (sites "ShallowWater") (sites "DeepWater")))
                            ("DamageMultiply" (* (value Piece at:(#1)) 5) #1 )						// 125% damage to units in water
                            ("DamageMultiply" (* (value Piece at:(#1)) 4) #1 )						// 100% damage to units on land
                        )
                    )
                )
            )
            ("DoctrineMultiply" #1 #3 #4)
        )
        128000				// (4x4x4x5x100x4)
    )
)

(define "AttackBuilding"
    (and {
        (if (= (value Piece at:(site)) 0)
            (and {
                (take Control of:All by:Mover at:(site))
                (set Value at:(site) (/ (mapEntry "MaxHealth" (what at:(site))) 2) )
            })
        )
        (fromTo
            (from (last To))
            (to (last From))
        )
        (fromTo (from (sites "PieceHolder")) (to  (last To)))
    })
)

(define "CloseCombatAttack"
    ("AttackMove" 1 1
        (not (is In (from) (sites Occupied by:Mover components:{"Boss" "Bomber" "Battleship" "Artillery" "Launcher" "Antiair" "Fighter" "Submarine"})))
        (is In (to) (union (sites Occupied by:Enemy) (sites Occupied by:Neutral)))
    )
    ("AttackMove" 1 1
        (is In (from) (sites Occupied by:Mover components:{"Boss" "Bomber" "Battleship" "Artillery" "Launcher"}))
        (is In (to) (union (sites Occupied by:Enemy components:{"Soldier" "Motorbike" "Tank" "Speeder" "Shooter" "Launcher" "Antiair" "Boss" "Battleship" "Artillery" "Base" "Town" "Factory" "Dock" "Airport" "Cruiser" "Submarine"}) (sites Occupied by:Neutral)))
    )
    ("AttackMove" 1 1
        (is In (from) (sites Occupied by:Mover components:{"Antiair" "Fighter"}))
        (is In (to) (sites Occupied by:Enemy components:{"Fighter" "Helicopter" "Bomber"}) )
    )
    ("AttackMove" 1 1
        (is In (from) (sites Occupied by:Mover components:{"Submarine"}))
        (is In (to) (sites Occupied by:Enemy components:{"Submarine" "BattleShip" "Cruiser"}) )
    )
)

(define "RangedAttack"
    ("AttackMove" #1 #2
        (not (is In (from) (sites Occupied by:Mover components:{"Boss" "Bomber" "Battleship" "Artillery" "Launcher" "Antiair" "Fighter" "Submarine"})))
        (is In (to) (union (sites Occupied by:Enemy) (sites Occupied by:Neutral)))
    )
    ("AttackMove" #1 #2
        (is In (from) (sites Occupied by:Mover components:{"Boss" "Bomber" "Battleship" "Artillery" "Launcher"}))
        (is In (to) (union (sites Occupied by:Enemy components:{"Soldier" "Motorbike" "Tank" "Speeder" "Shooter" "Launcher" "Antiair" "Boss" "Battleship" "Artillery" "Base" "Town" "Factory" "Dock" "Airport" "Cruiser" "Submarine"}) (sites Occupied by:Neutral)))
    )
    ("AttackMove" #1 #2
        (is In (from) (sites Occupied by:Mover components:{"Antiair" "Fighter"}))
        (is In (to) (sites Occupied by:Enemy components:{"Fighter" "Helicopter" "Bomber"}) )
    )
    ("AttackMove" #1 #2
        (is In (from) (sites Occupied by:Mover components:{"Submarine"}))
        (is In (to) (sites Occupied by:Enemy components:{"Submarine" "BattleShip" "Cruiser"}) )
    )
)

//------------------------------------------------------------------------------

(define "DamageMultiply"
    (max (/ (* #1 (mapEntry "DamageMultiplier" (what at:(#2))) ) 100) 1)
)

//------------------------------------------------------------------------------

// #1 location of the attacking piece
// #2 location of the piece being attacked
// #3 If this is a counter Attack (boolean)
(define "DoctrineMultiply"
    (* {
        (if (is In (#1) "HumanSites" )
            ("GetDoctrineValue" (who at:(#1)) 1)
            (if (is In (#1) "DirectVehicleSites" )
                ("GetDoctrineValue" (who at:(#1)) 2)
                (if (is In (#1) "RangedVehicleSites" )
                    ("GetDoctrineValue" (who at:(#1)) 3)
                    (if (is In (#1) "AircraftSites" )
                        ("GetDoctrineValue" (who at:(#1)) 4)
                        (if (is In (#1) "BoatSites" )
                            ("GetDoctrineValue" (who at:(#1)) 5)
                            4
                        )
                    )
                )
            )
        )
        (if (is In (#2) "EnemyBuildingSites" ) ("GetDoctrineValue" (who at:(#1)) 6) 5 )
        (if (> (who at:(#2)) 0) ("GetDoctrineValue" (who at:(#2)) 8) 4)
        (if #3 ("GetDoctrineValue" (who at:(#1)) 10) ("GetDoctrineValue" (who at:(#1)) 9))
        (value Random (range ("GetDoctrineValue" (who at:(#1)) 11) ("GetDoctrineValue" (who at:(#1)) 12) ))
    })
)

//------------------------------------------------------------------------------

(define "HealMove"
    (move
        Step
        (from
            (from)
            if:(and
                (> (state at:(from)) 0)
                (< (value Piece at:(from)) (mapEntry "MaxHealth" (what at:(from))) )
            )
        )
        Orthogonal
        (to
            if:(is In (to) "MoverBuildingSites")
            (apply
                (and {
                    (set Value at:(from)
                        (min
                            (mapEntry "MaxHealth" (what at:(from)))
                            (- (+ (value Piece at:(from)) (value Piece at:(to))) 1)
                        )
                    )
                    (set Value at:(to)
                        (max
                            (- (value Piece at:(to)) (- (mapEntry "MaxHealth" (what at:(from))) (value Piece at:(from)) ))
                            1
                        )
                    )
                    (set State at:(from) 0)
                    (fromTo (from (to)) (to  (sites "PieceHolder")))
                })
            )
        )
        (then
            (and {
                (fromTo
                    (from (last To))
                    (to (last From))
                )
                (fromTo (from (sites "PieceHolder")) (to  (last To)))
            })
        )
    )
)

//------------------------------------------------------------------------------

(define "BuyMove"
    (forEach Site (sites Occupied by:Mover container:(mover) #1) // Eric: Can be optim in hardcoding the pos of each type of element in the hands... but I do not like to hard coding...
        (move
            (from (site))
            (to
                #2
                if:(and
                    (is Empty (to))
                    (<= (/ (* (count at:(site)) ("GetDoctrineValue" (who at:(site)) 7)) 4) (score Mover))
                )
            )
            copy:True
            (then
                (and
                    (addScore
                        Mover
                        (- (/  (* (count at:(last From)) ("GetDoctrineValue" (who at:(last From)) 7)) 4))
                    )
                    (set State at:(last To) 0)
                )
            )
        )
    )
)

(define "BuyHumanMove"
    ("BuyMove" components:{"Soldier" "Motorbike"}
        (difference
            (sites Around (sites Occupied by:Mover component:"Town") Orthogonal) // ERIC: To optim with (sites Start ...) when I will add the necessary stuff to it.
            "ForbiddenSpotsHuman"
        )
    )
)

(define "BuyBoatMove"
    ("BuyMove" components:{"Cruiser" "Submarine" "Battleship"}
        (difference
            (sites Around (sites Occupied by:Mover component:"Dock") Orthogonal)
            "ForbiddenSpotsBoat"
        )
    )
)

(define "BuyAircraftMove"
    ("BuyMove" components:{"Helicopter" "Fighter" "Bomber"}
        (sites Around (sites Occupied by:Mover component:"Airport") Orthogonal)
    )
)

(define "BuyVehiculeMove"
    ("BuyMove" components:{"Speeder" "Shooter" "Tank" "Boss" "Antiair" "Launcher" "Artillery"}
        (difference
            (sites Around (sites Occupied by:Mover component:"Factory") Orthogonal)
            "ForbiddenSpotsVehicle"
        )
    )
)

//------------------------------------------------------------------------------

(define "MoverBuildingSites"
    (sites Occupied by:Mover components:{"Town" "Dock" "Base" "Factory" "Airport"})
)

(define "EnemyBuildingSites"
    (union (sites Occupied by:Enemy components:{"Town" "Dock" "Base" "Factory" "Airport"}) (sites Occupied by:Neutral components:{"Town" "Dock" "Base" "Factory" "Airport"}) )
)

(define "AircraftSites"
    (sites Occupied by:All components:{"Fighter" "Bomber" "Helicopter"})
)

(define "RangedUnitSites"
    (sites Occupied by:All components:{"Launcher" "Artillery" "Battleship" "Antiair"})
)

(define "HumanSites"
    (sites Occupied by:All components:{"Soldier" "Motorbike"})
)

(define "BoatSites"
    (sites Occupied by:All components:{"Submarine" "Cruiser" "Battleship"})
)

(define "DirectVehicleSites"
    (sites Occupied by:All components:{"Tank" "Speeder" "Shooter" "Boss"})
)

(define "RangedVehicleSites"
    (sites Occupied by:All components:{"Launcher" "Antiair" "Artillery"})
)

//------------------------------------------------------------------------------

(define "RemovePiecesIfPlayerHasLost"
    (if
        (and
            (is Active #1)
            ( < (count Pieces #1 in:(sites Occupied by:#1 component:"Base")) 1)
        )
        (forEach Site (sites Occupied by:#1 )
            (if (is In (site) (sites Occupied by:#1 components:{"Town" "Base" "Factory" "Dock" "Airport"}))
                (take Control of:All by:Neutral at:(site))
                (remove (site))
            )
        )
    )
)

//------------------------------------------------------------------------------

// 1 = Human Damage
// 2 = Direct Vehicle Damage
// 3 = Indirect Vehicle Damage
// 4 = Aircraft Damage
// 5 = Boat Damage
// 6 = Building Damage (against)
// 7 = Cost Multiplier
// 8 = Damage Taken Multiplier
// 9 = First Attack Multiplier
// 10 = Counter Attack Multiplier
// 11 = Random Damage Minimum
// 12 = Random Damage Maximum

(define "GetDoctrineValue"
    (if (= #1 1)
        (mapEntry  <Doctrine1:doctrine> #2)
        (if (= #1 2)
            (mapEntry  <Doctrine2:doctrine> #2)
            (if (= #1 3)
                (mapEntry  <Doctrine3:doctrine> #2)
                (if (= #1 4)
                    (mapEntry  <Doctrine4:doctrine> #2)
                    0
                )
            )
        )
    )
)

//------------------------------------------------------------------------------

(define "TwoPlayerMaps"
    // state (movement)
    (map "Movement" {
        (pair 1 7) (pair 2 7) (pair 3 7) (pair 4 7) (pair 5 7) (pair 6 7) (pair 7 7) (pair 8 7) (pair 9 7) (pair 10 7)
        (pair 11 4) (pair 12 4) (pair 13 6) (pair 14 6)
        (pair 15 7) (pair 16 7) (pair 17 5) (pair 18 5) (pair 19 5) (pair 20 5) (pair 21 3) (pair 22 3)
        (pair 23 5) (pair 24 5) (pair 25 4) (pair 26 4) (pair 27 4) (pair 28 4)
        (pair 29 5) (pair 30 5) (pair 31 7) (pair 32 7) (pair 33 6) (pair 34 6)
        (pair 35 6) (pair 36 6) (pair 37 6) (pair 38 6) (pair 39 5) (pair 40 5)
        (pair 41 7) (pair 42 7) (pair 43 7) (pair 44 7) (pair 45 7) (pair 46 7) (pair 47 7) (pair 48 7) (pair 49 7) (pair 50 7)
    })

    // value (health)
    (map "MaxHealth" {
        (pair 1 100) (pair 2 100) (pair 3 100) (pair 4 100) (pair 5 100) (pair 6 100) (pair 7 100) (pair 8 100) (pair 9 100) (pair 10 100)
        (pair 11 30) (pair 12 30) (pair 13 40) (pair 14 40)
        (pair 15 60) (pair 16 60) (pair 17 60) (pair 18 60) (pair 19 80) (pair 20 80) (pair 21 150) (pair 22 150)
        (pair 23 50) (pair 24 50) (pair 25 50) (pair 26 50) (pair 27 40) (pair 28 40)
        (pair 29 40) (pair 30 40) (pair 31 100) (pair 32 100) (pair 33 100) (pair 34 100)
        (pair 35 70) (pair 36 70) (pair 37 100) (pair 38 100) (pair 39 120) (pair 40 120)
        (pair 41 100) (pair 42 100) (pair 43 100) (pair 44 100) (pair 45 100) (pair 46 100) (pair 47 100) (pair 48 100) (pair 49 100) (pair 50 100)
    })

    (map "DamageMultiplier" {
        (pair 1 0) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 0) (pair 6 0) (pair 7 0) (pair 8 0) (pair 9 0) (pair 10 0)
        (pair 11 50) (pair 12 50) (pair 13 50) (pair 14 50)
        (pair 15 40) (pair 16 40) (pair 17 40) (pair 18 40) (pair 19 50) (pair 20 50) (pair 21 50) (pair 22 50)
        (pair 23 100) (pair 24 100) (pair 25 50) (pair 26 50) (pair 27 100) (pair 28 100)
        (pair 29 70) (pair 30 70) (pair 31 100) (pair 32 100) (pair 33 80) (pair 34 80)
        (pair 35 50) (pair 36 50) (pair 37 80) (pair 38 80) (pair 39 50) (pair 40 50)
        (pair 41 0) (pair 42 0) (pair 43 0) (pair 44 0) (pair 45 0) (pair 46 0) (pair 47 0) (pair 48 0) (pair 49 0) (pair 50 0)
    })
)

(define "FourPlayerMaps"
    // state (movement)
    (map "Movement" {
        (pair 1 7) (pair 2 7) (pair 3 7) (pair 4 7) (pair 5 7) (pair 6 7) (pair 7 7) (pair 8 7) (pair 9 7) (pair 10 7)
        (pair 11 7) (pair 12 7) (pair 13 7) (pair 14 7) (pair 15 7) (pair 16 7) (pair 17 7) (pair 18 7) (pair 19 7) (pair 20 7)
        (pair 21 4) (pair 22 4) (pair 23 4) (pair 24 4)
        (pair 25 6) (pair 26 6) (pair 27 6) (pair 28 6)
        (pair 29 7) (pair 30 7) (pair 31 7) (pair 32 7) (pair 33 5) (pair 34 5) (pair 35 5) (pair 36 5)
        (pair 37 5) (pair 38 5) (pair 39 5) (pair 40 5) (pair 41 3) (pair 42 3) (pair 43 3) (pair 44 3)
        (pair 45 5) (pair 46 5) (pair 47 5) (pair 48 5) (pair 49 4) (pair 50 4)
        (pair 51 4) (pair 52 4) (pair 53 4) (pair 54 4) (pair 55 4) (pair 56 4)
        (pair 57 5) (pair 58 5) (pair 59 5) (pair 60 5) (pair 61 7) (pair 62 7)
        (pair 63 7) (pair 64 7) (pair 65 6) (pair 66 6) (pair 67 6) (pair 68 6)
        (pair 69 6) (pair 70 6) (pair 71 6) (pair 72 6) (pair 73 6) (pair 74 6)
        (pair 75 6) (pair 76 6) (pair 77 5) (pair 78 5) (pair 79 5) (pair 80 5)
        (pair 81 7) (pair 82 7) (pair 83 7) (pair 84 7) (pair 85 7) (pair 86 7) (pair 87 7) (pair 88 7) (pair 89 7) (pair 90 7)
        (pair 91 7) (pair 92 7) (pair 93 7) (pair 94 7) (pair 95 7) (pair 96 7) (pair 97 7) (pair 98 7) (pair 99 7) (pair 100 7)
    })

    // value (health)
    (map "MaxHealth" {
        (pair 1 100) (pair 2 100) (pair 3 100) (pair 4 100) (pair 5 100) (pair 6 100) (pair 7 100) (pair 8 100) (pair 9 100) (pair 10 100)
        (pair 11 100) (pair 12 100) (pair 13 100) (pair 14 100) (pair 15 100) (pair 16 100) (pair 17 100) (pair 18 100) (pair 19 100) (pair 20 100)
        (pair 21 30) (pair 22 30) (pair 23 30) (pair 24 30)
        (pair 25 40) (pair 26 40) (pair 27 40) (pair 28 40)
        (pair 29 60) (pair 30 60) (pair 31 60) (pair 32 60) (pair 33 60) (pair 34 60) (pair 35 60) (pair 36 60)
        (pair 37 80) (pair 38 80) (pair 39 80) (pair 40 80) (pair 41 150) (pair 42 150) (pair 43 150) (pair 44 150)
        (pair 45 50) (pair 46 50) (pair 47 50) (pair 48 50) (pair 49 50) (pair 50 50)
        (pair 51 50) (pair 52 50) (pair 53 40) (pair 54 40) (pair 55 40) (pair 56 40)
        (pair 57 40) (pair 58 40) (pair 59 40) (pair 60 40) (pair 61 100) (pair 62 100)
        (pair 63 100) (pair 64 100) (pair 65 100) (pair 66 100) (pair 67 100) (pair 68 100)
        (pair 69 70) (pair 70 70) (pair 71 70) (pair 72 70) (pair 73 100) (pair 74 100)
        (pair 75 100) (pair 76 100) (pair 77 120) (pair 78 120) (pair 79 120) (pair 80 120)
        (pair 81 100) (pair 82 100) (pair 83 100) (pair 84 100) (pair 85 100) (pair 86 100) (pair 87 100) (pair 88 100) (pair 89 100) (pair 90 100)
        (pair 91 100) (pair 92 100) (pair 93 100) (pair 94 100) (pair 95 100) (pair 96 100) (pair 97 100) (pair 98 100) (pair 99 100) (pair 100 100)
    })

    (map "DamageMultiplier" {
        (pair 1 0) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 0) (pair 6 0) (pair 7 0) (pair 8 0) (pair 9 0) (pair 10 0)
        (pair 11 0) (pair 12 0) (pair 13 0) (pair 14 0) (pair 15 0) (pair 16 0) (pair 17 0) (pair 18 0) (pair 19 0) (pair 20 0)
        (pair 21 50) (pair 22 50) (pair 23 50) (pair 24 50)
        (pair 25 50) (pair 26 50) (pair 27 50) (pair 28 50)
        (pair 29 40) (pair 30 40) (pair 31 40) (pair 32 40) (pair 33 40) (pair 34 40) (pair 35 40) (pair 36 40)
        (pair 37 50) (pair 38 50) (pair 39 50) (pair 40 50) (pair 41 50) (pair 42 50) (pair 43 50) (pair 44 50)
        (pair 45 100) (pair 46 100) (pair 47 100) (pair 48 100) (pair 49 50) (pair 50 50)
        (pair 51 50) (pair 52 50) (pair 53 100) (pair 54 100) (pair 55 100) (pair 56 100)
        (pair 57 70) (pair 58 70) (pair 59 70) (pair 60 70) (pair 61 100) (pair 62 100)
        (pair 63 100) (pair 64 100) (pair 65 80) (pair 66 80) (pair 67 80) (pair 68 80)
        (pair 69 50) (pair 70 50) (pair 71 50) (pair 72 50) (pair 73 80) (pair 74 80)
        (pair 75 80) (pair 76 80) (pair 77 50) (pair 78 50) (pair 79 50) (pair 80 50)
        (pair 81 0) (pair 82 0) (pair 83 0) (pair 84 0) (pair 85 0) (pair 86 0) (pair 87 0) (pair 88 0) (pair 89 0) (pair 90 0)
        (pair 91 0) (pair 92 0) (pair 93 0) (pair 94 0) (pair 95 0) (pair 96 0) (pair 97 0) (pair 98 0) (pair 99 0) (pair 100 0)
    })
)

//------------------------------------------------------------------------------

(define "DoctrineSetup"
    (map "NoDoctrine" {
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "SpecialForces" {
        (pair 1 6) (pair 2 3) (pair 3 3) (pair 4 3) (pair 5 3) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "BruteStrength" {
        (pair 1 3) (pair 2 6) (pair 3 3) (pair 4 3) (pair 5 3) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "Sharpshooter" {
        (pair 1 3) (pair 2 3) (pair 3 6) (pair 4 3) (pair 5 3) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "AcePilot" {
        (pair 1 3) (pair 2 3) (pair 3 3) (pair 4 6) (pair 5 3) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "SeaDog" {
        (pair 1 3) (pair 2 3) (pair 3 3) (pair 4 3) (pair 5 6) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "GuerrillaWarfare" {
        (pair 1 3) (pair 2 3) (pair 3 3) (pair 4 3) (pair 5 3) (pair 6 10)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "ForeignInvader" {
        (pair 1 5) (pair 2 5) (pair 3 5) (pair 4 5) (pair 5 5) (pair 6 2)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "Conscription" {
        (pair 1 2) (pair 2 2) (pair 3 2) (pair 4 2) (pair 5 2) (pair 6 5)
        (pair 7 2) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "EliteTraining" {
        (pair 1 6) (pair 2 6) (pair 3 6) (pair 4 6) (pair 5 6) (pair 6 5)
        (pair 7 6) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "GlassCannon" {
        (pair 1 6) (pair 2 6) (pair 3 6) (pair 4 6) (pair 5 6) (pair 6 5)
        (pair 7 4) (pair 8 6) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "HardenedResolve" {
        (pair 1 2) (pair 2 2) (pair 3 2) (pair 4 2) (pair 5 2) (pair 6 5)
        (pair 7 4) (pair 8 2) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })

    (map "PreemptiveStrike" {
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 6) (pair 10 0) (pair 11 100) (pair 12 100)
    })

    (map "Retaliation" {
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 2) (pair 10 8) (pair 11 100) (pair 12 100)
    })

    (map "LadyLuck" {
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5)
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 50) (pair 12 150)
    })

)

//------------------------------------------------------------------------------

(game "Mini Wars"
    (players <Scenario:numPlayers>)
    (equipment {
        (board <Scenario:boardShape>)

        <Scenario:boardRegins>
        (regions "PieceHolder" (sites {(handSite Shared 0)}))		// Just used to store pieces temporarily

        (hand Each size:<Scenario:handSize>)
        (hand Shared size:1)

        (piece "Base" Each)
        (piece "Factory" Each)
        (piece "Town" Each)
        (piece "Airport" Each)
        (piece "Dock" Each)

        (piece "Soldier" Each (or {"HumanMove" "CloseCombatAttack" "HealMove"}))
        (piece "Motorbike" Each (or {"HumanMove" "CloseCombatAttack" "HealMove"}))

        (piece "Speeder" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMove"}))
        (piece "Shooter" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMove"}))
        (piece "Tank" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMove"}))
        (piece "Boss" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMove"}))

        (piece "Antiair" Each (or {("VehicleMove" 1) ("RangedAttack" 1 2) "HealMove"}))
        (piece "Launcher" Each (or {("VehicleMove" 1) ("RangedAttack" 2 3) "HealMove"}))
        (piece "Artillery" Each (or {("VehicleMove" 0) ("RangedAttack" 3 5) "HealMove"}))

        (piece "Helicopter" Each (or {"AircraftMove" "CloseCombatAttack" "HealMove"}))
        (piece "Fighter" Each (or {"AircraftMove" "CloseCombatAttack" "HealMove"}))
        (piece "Bomber" Each (or {"AircraftMove" "CloseCombatAttack" "HealMove"}))

        (piece "Cruiser" Each (or {"BoatMove" "CloseCombatAttack" "HealMove"}))
        (piece "Submarine" Each (or {"BoatMove" "CloseCombatAttack" "HealMove"}))
        (piece "Battleship" Each (or {"BoatMove" ("RangedAttack" 2 4) "HealMove"}))

        (piece "Base" Neutral)
        (piece "Factory" Neutral)
        (piece "Town" Neutral)
        (piece "Airport" Neutral)
        (piece "Dock" Neutral)

        <Scenario:playerMaps>

        "DoctrineSetup"
    })
    (rules
        (meta (passEnd NoEnd))
        (start {
            <Scenario:buildingSetup>
            <Scenario:pieceSetup>
            <Scenario:shopSetup>
            (set Score Each <Scenario:startingMoney>)
        })

        (play
            (or
                (or {
                    (forEach Piece)
                    ("BuyHumanMove")
                    ("BuyBoatMove")
                    ("BuyAircraftMove")
                    ("BuyVehiculeMove")
                    }
                    (then
                        (and
                            (forEach Player
                                ("RemovePiecesIfPlayerHasLost" Player)
                            )
                            (moveAgain)
                        )
                    )
                )
                (move Pass
                    (then
                        (and {
                            (forEach Site (intersection (sites Board) (sites Occupied by:Mover))
                                (set State at:(site) (mapEntry "Movement" (what at:(site))))
                            )
                            (set Score
                                Mover
                                (+ (* (count Sites in:(sites Occupied by:Mover component:"Town")) 10) (score Mover) )
                            )
                            (forEach Site (sites Occupied by:Next components:{"Town" "Base" "Factory" "Dock" "Airport"})
                                (set Value at:(site) (min (mapEntry "MaxHealth" (what at:(site))) (+ (value Piece at:(site)) 10) ))
                            )
                        })
                    )
                )
            )
        )

        (end
            (forEach NonMover
                if:( < (count Pieces Player in:(sites Occupied by:Player component:"Base")) 1) (result Player Loss)
            )
        )
    )
)

//------------------------------------------------------------------------------

(option "Scenario" <Scenario> args:{<playerMaps> <numPlayers> <handSize> <boardShape> <boardRegins> <buildingSetup> <pieceSetup> <shopSetup> <startingMoney> <handPlacement>}
    {

    (item "Scenario 1 (2-player)"
        <
        "TwoPlayerMaps"
        >
        <
        2
        >
        <
        15
        >
        <
        (rectangle 7 10)
        >
        <
        (regions "ShallowWater" (sites {"C1" "D2" "E1" "H7" "F7" "G6"}))
        (regions "DeepWater" (sites {"D1" "G7"}))
        (regions "Forest" (sites {"E4" "F4" "E5" "F3" "G3" "D5"}))
        (regions "Mountain" (sites {"D7" "G1"}))
        >
        <
        (place "Town1" (sites {"A1" "A7"}) state:7 value:100)
        (place "Town2" (sites {"J1" "J7"}) state:7 value:100)
        (place "Town0" (sites {"E7" "F1"}) state:7 value:100)
        (place "Factory1" (sites {"A3" "A5"}) state:7 value:100)
        (place "Factory2" (sites {"J3" "J5"}) state:7 value:100)
        (place "Airport0" (sites {"C2"}) state:7 value:100)
        (place "Airport0" (sites {"H6"}) state:7 value:100)
        (place "Dock0" (sites {"B1"}) state:7 value:100)
        (place "Dock0" (sites {"I7"}) state:7 value:100)
        (place "Base1" (sites {"A4"}) state:7 value:100)
        (place "Base2" (sites {"J4"}) state:7 value:100)
        >
        <

        >
        <
        (place "Soldier1" (handSite 1 0) count:30 state:1 value:30 ) (place "Soldier2" (handSite 2 0) count:30 state:1 value:30)
        (place "Motorbike1" (handSite 1 1) count:50 state:1 value:40 ) (place "Motorbike2" (handSite 2 1) count:50 state:1 value:40)

        (place "Speeder1" (handSite 1 2) count:60 state:1 value:60 ) (place "Speeder2" (handSite 2 2) count:60 state:1 value:60)
        (place "Shooter1" (handSite 1 3) count:80 state:1 value:60 ) (place "Shooter2" (handSite 2 3) count:80 state:1 value:60)
        (place "Tank1" (handSite 1 4) count:100 state:1 value:80 ) (place "Tank2" (handSite 2 4) count:100 state:1 value:80)
        (place "Boss1" (handSite 1 5) count:150 state:1 value:150 ) (place "Boss2" (handSite 2 5) count:150 state:1 value:150)

        (place "Antiair1" (handSite 1 6) count:80 state:1 value:50 ) (place "Antiair2" (handSite 2 6) count:80 state:1 value:50)
        (place "Launcher1" (handSite 1 7) count:80 state:1 value:50 ) (place "Launcher2" (handSite 2 7) count:80 state:1 value:50)
        (place "Artillery1" (handSite 1 8) count:100 state:1 value:40 ) (place "Artillery2" (handSite 2 8) count:100 state:1 value:40)

        (place "Helicopter1" (handSite 1 9) count:60 state:1 value:40 ) (place "Helicopter2" (handSite 2 9) count:60 state:1 value:40)
        (place "Fighter1" (handSite 1 10) count:100 state:1 value:100 ) (place "Fighter2" (handSite 2 10) count:100 state:1 value:100)
        (place "Bomber1" (handSite 1 11) count:100 state:1 value:100 ) (place "Bomber2" (handSite 2 11) count:100 state:1 value:100)

        (place "Cruiser1" (handSite 1 12) count:60 state:1 value:70 ) (place "Cruiser2" (handSite 2 12) count:60 state:1 value:70)
        (place "Submarine1" (handSite 1 13) count:100 state:1 value:100 ) (place "Submarine2" (handSite 2 13) count:100 state:1 value:100)
        (place "Battleship1" (handSite 1 14) count:100 state:1 value:120 ) (place "Battleship2" (handSite 2 14) count:100 state:1 value:120)
        >
        <
        100
        >
        <
        (hand Placement P1 scale:0.9 offsetX:0.05 offsetY:0.85)
        (hand Placement P2 scale:0.9 offsetX:0.05 offsetY:0.17)
        >
        "Basic Scenario"
    )**

    (item "Scenario 2 (2-player)"
        <
        "TwoPlayerMaps"
        >
        <
        2
        >
        <
        9
        >
        <
        (rectangle 8 14)
        >
        <
        (regions "Forest" (sites {"B3" "D1" "E1" "J1" "K1" "M3"
        "E8" "F8" "G8" "H8" "I8" "J8"}))
        (regions "Mountain" (sites {"D3" "D4" "D5" "D6" "D7" "D8"
                "F1" "G1" "G2" "G3" "G4" "G5"
                "I1" "H1" "H2" "H3" "H4" "H5"
        "K3" "K4" "K5" "K6" "K7" "K8"}))
        >
        <
        (place "Town1" (sites {"A1" "B1" "A7" "B7" "F2" "F4"}) state:7 value:100)
        (place "Town2" (sites {"I2" "I4" "M1" "N1" "M7" "N7"}) state:7 value:100)
        (place "Town0" (sites {"E7" "F7" "G7" "H7" "I7" "J7"}) state:7 value:100)
        (place "Factory1" (sites {"A3" "C5" "A6"}) state:7 value:100)
        (place "Factory2" (sites {"N3" "N6" "L5"}) state:7 value:100)
        (place "Base1" (sites {"A4"}) state:7 value:100)
        (place "Base2" (sites {"N4"}) state:7 value:100)
        >
        <

        >
        <
        (place "Soldier1" (handSite 1 0) count:30 state:1 value:30 ) (place "Soldier2" (handSite 2 0) count:30 state:1 value:30)
        (place "Motorbike1" (handSite 1 1) count:50 state:1 value:40 ) (place "Motorbike2" (handSite 2 1) count:50 state:1 value:40)

        (place "Speeder1" (handSite 1 2) count:60 state:1 value:60 ) (place "Speeder2" (handSite 2 2) count:60 state:1 value:60)
        (place "Shooter1" (handSite 1 3) count:80 state:1 value:60 ) (place "Shooter2" (handSite 2 3) count:80 state:1 value:60)
        (place "Tank1" (handSite 1 4) count:100 state:1 value:80 ) (place "Tank2" (handSite 2 4) count:100 state:1 value:80)
        (place "Boss1" (handSite 1 5) count:150 state:1 value:150 ) (place "Boss2" (handSite 2 5) count:150 state:1 value:150)

        (place "Antiair1" (handSite 1 6) count:80 state:1 value:50 ) (place "Antiair2" (handSite 2 6) count:80 state:1 value:50)
        (place "Launcher1" (handSite 1 7) count:80 state:1 value:50 ) (place "Launcher2" (handSite 2 7) count:80 state:1 value:50)
        (place "Artillery1" (handSite 1 8) count:100 state:1 value:40 ) (place "Artillery2" (handSite 2 8) count:100 state:1 value:40)
        >
        <
        100
        >
        <
        (hand Placement P1 scale:0.9 offsetX:0.05 offsetY:0.83)
        (hand Placement P2 scale:0.9 offsetX:0.05 offsetY:0.2)
        >
        "Basic Scenario"
    )

    (item "Scenario 3 (2-player)"
        <
        "TwoPlayerMaps"
        >
        <
        2
        >
        <
        9
        >
        <
        (rectangle 9 14)
        >
        <

        >
        <
        (place "Factory1" (sites {"B7" "C8"}) state:7 value:100)
        (place "Factory2" (sites {"L2" "M3"}) state:7 value:100)
        (place "Factory0" (sites {"B2" "M8"}) state:7 value:100)
        (place "Town0" (sites {"B4" "B6" "C2" "C4" "C6"
                "D2" "D4" "D6" "D8" "E2" "E4" "E6" "E8"
                "J2" "J4" "J6" "J8" "K2" "K4" "K6" "K8"
                "L4" "L6" "L8" "M4" "M6"
                "G2" "G4" "G6"
                "G8" "H2" "H4" "H6" "H8"
        "F2" "F4" "F6" "F8" "I2" "I4" "I6" "I8"}) state:7 value:100)
        (place "Base1" (sites {"B8"}) state:7 value:100)
        (place "Base2" (sites {"M2"}) state:7 value:100)
        >
        <

        >
        <
        (place "Soldier1" (handSite 1 0) count:30 state:1 value:30 ) (place "Soldier2" (handSite 2 0) count:30 state:1 value:30)
        (place "Motorbike1" (handSite 1 1) count:50 state:1 value:40 ) (place "Motorbike2" (handSite 2 1) count:50 state:1 value:40)

        (place "Speeder1" (handSite 1 2) count:60 state:1 value:60 ) (place "Speeder2" (handSite 2 2) count:60 state:1 value:60)
        (place "Shooter1" (handSite 1 3) count:80 state:1 value:60 ) (place "Shooter2" (handSite 2 3) count:80 state:1 value:60)
        (place "Tank1" (handSite 1 4) count:100 state:1 value:80 ) (place "Tank2" (handSite 2 4) count:100 state:1 value:80)
        (place "Boss1" (handSite 1 5) count:150 state:1 value:150 ) (place "Boss2" (handSite 2 5) count:150 state:1 value:150)

        (place "Antiair1" (handSite 1 6) count:80 state:1 value:50 ) (place "Antiair2" (handSite 2 6) count:80 state:1 value:50)
        (place "Launcher1" (handSite 1 7) count:80 state:1 value:50 ) (place "Launcher2" (handSite 2 7) count:80 state:1 value:50)
        (place "Artillery1" (handSite 1 8) count:100 state:1 value:40 ) (place "Artillery2" (handSite 2 8) count:100 state:1 value:40)
        >
        <
        100
        >
        <
        (hand Placement P1 scale:0.9 offsetX:0.05 offsetY:0.85)
        (hand Placement P2 scale:0.9 offsetX:0.05 offsetY:0.18)
        >
        "Basic Scenario"
    )

    (item "Scenario 4 (2-player)"
        <
        "TwoPlayerMaps"
        >
        <
        2
        >
        <
        5
        >
        <
        (rectangle 8 13)
        >
        <
        (regions "ShallowWater" (sites {"C7" "D7" "E7" "F7" "G7" "H7" "I7" "J7" "K7"
                "C2" "D2" "E2" "F2" "G2" "H2" "I2" "J2" "K2"
                "B2" "B3" "B4" "B5" "B6" "B7"
                "L2" "L3" "L4" "L5" "L6" "L7"
        }))

        (regions "DeepWater" (sites {"A1" "A2" "A3" "A4" "A5" "A6" "A7" "A8" "B8" "L8"
                "M1" "M2" "M3" "M4" "M5" "M6" "M7" "M8" "B1" "L1"
                "C8" "D8" "E8" "F8" "G8" "H8" "I8" "J8" "K8"
                "C1" "D1" "E1" "F1" "G1" "H1" "I1" "J1" "K1"
        }))
        >
        <
        (place "Town0" (sites {"E5" "E4" "G5" "G4" "I5" "I4" "F5" "F4" "H5" "H4"}) state:7 value:100)
        (place "Town1" (sites {"C4"}) state:7 value:100)
        (place "Town2" (sites {"K5"}) state:7 value:100)
        (place "Base1" (sites {"C5"}) state:7 value:100)
        (place "Base2" (sites {"K4"}) state:7 value:100)
        (place "Dock1" (sites {"C3" "C6"}) state:7 value:100)
        (place "Dock2" (sites {"K3" "K6"}) state:7 value:100)
        >
        <

        >
        <
        (place "Soldier1" (handSite 1 0) count:30 state:1 value:30 ) (place "Soldier2" (handSite 2 0) count:30 state:1 value:30)
        (place "Motorbike1" (handSite 1 1) count:50 state:1 value:40 ) (place "Motorbike2" (handSite 2 1) count:50 state:1 value:40)
        (place "Cruiser1" (handSite 1 2) count:60 state:1 value:70 ) (place "Cruiser2" (handSite 2 2) count:60 state:1 value:70)
        (place "Submarine1" (handSite 1 3) count:100 state:1 value:100 ) (place "Submarine2" (handSite 2 3) count:100 state:1 value:100)
        (place "Battleship1" (handSite 1 4) count:100 state:1 value:120 ) (place "Battleship2" (handSite 2 4) count:100 state:1 value:120)
        >
        <
        100
        >
        <
        (hand Placement P1 scale:0.4 offsetX:0.3 offsetY:0.83)
        (hand Placement P2 scale:0.4 offsetX:0.3 offsetY:0.2)
        >
        "Basic Scenario"
    )

    (item "Scenario 5 (2-player)"
        <
        "TwoPlayerMaps"
        >
        <
        2
        >
        <
        6
        >
        <
        (rectangle 8 13)
        >
        <
        (regions "DeepWater" (sites {"G1" "G2" "G3" "G4" "G5" "G6" "G7" "G8"}))
        >
        <
        (place "Town1" (sites {"A2" "A7" "C1" "C8"}) state:7 value:100)
        (place "Town2" (sites {"M2" "M7" "K1" "K8"}) state:7 value:100)
        (place "Town0" (sites {"I2" "I4" "I5" "I7" "E2" "E4" "E5" "E7"}) state:7 value:100)
        (place "Base1" (sites {"A5"}) state:7 value:100)
        (place "Base2" (sites {"M4"}) state:7 value:100)
        (place "Airport1" (sites {"C3" "C6"}) state:7 value:100)
        (place "Airport2" (sites {"K3" "K6"}) state:7 value:100)
        >
        <

        >
        <
        (place "Soldier1" (handSite 1 0) count:30 state:1 value:30 ) (place "Soldier2" (handSite 2 0) count:30 state:1 value:30)
        (place "Motorbike1" (handSite 1 1) count:50 state:1 value:40 ) (place "Motorbike2" (handSite 2 1) count:50 state:1 value:40)
        (place "Helicopter1" (handSite 1 2) count:60 state:1 value:40 ) (place "Helicopter2" (handSite 2 2) count:60 state:1 value:40)
        (place "Fighter1" (handSite 1 3) count:100 state:1 value:100 ) (place "Fighter2" (handSite 2 3) count:100 state:1 value:100)
        (place "Bomber1" (handSite 1 4) count:100 state:1 value:100 ) (place "Bomber2" (handSite 2 4) count:100 state:1 value:100)
        >
        <
        100
        >
        <
        (hand Placement P1 scale:0.5 offsetX:0.29 offsetY:0.83)
        (hand Placement P2 scale:0.5 offsetX:0.29 offsetY:0.2)
        >
        "Basic Scenario"
    )

    (item "Scenario 6 (4-player)"
        <
        "FourPlayerMaps"
        >
        <
        4
        >
        <
        9
        >
        <
        (square 11)
        >
        <
        (regions "Forest" (sites {"D7" "E8" "G8" "H7" "H5" "E11" "G11" "E1" "G1"
        "G4" "E4" "D5" "A7" "A5" "K5" "K7"}))
        (regions "Mountain" (sites {"B6" "B5" "B7" "C3" "C9" "I9" "I3" "E10" "F10" "G10" "J7"
        "J6" "J5" "G2" "F2" "E2" "F6"}))
        >
        <
        (place "Town1" (sites {"A1" "A2" "B1"}) state:7 value:100)
        (place "Town2" (sites {"K11" "J11" "K10"}) state:7 value:100)
        (place "Town3" (sites {"A11" "A10" "B11"}) state:7 value:100)
        (place "Town4" (sites {"K1" "K2" "J1"}) state:7 value:100)
        (place "Town0" (sites {"F3" "D4" "C6" "D8" "F9" "H8" "I6" "H4"}) state:7 value:100)
        (place "Factory1" (sites {"A3" "C1"}) state:7 value:100)
        (place "Factory2" (sites {"K9" "I11"}) state:7 value:100)
        (place "Factory3" (sites {"A9" "C11"}) state:7 value:100)
        (place "Factory4" (sites {"K3" "I1"}) state:7 value:100)
        (place "Base1" (sites {"E6"}) state:7 value:100)
        (place "Base2" (sites {"G6"}) state:7 value:100)
        (place "Base3" (sites {"F7"}) state:7 value:100)
        (place "Base4" (sites {"F5"}) state:7 value:100)
        >
        <

        >
        <
        (place "Soldier1" (handSite 1 0) count:30 state:1 value:30 ) (place "Soldier2" (handSite 2 0) count:30 state:1 value:30)
        (place "Soldier3" (handSite 3 0) count:30 state:1 value:30 ) (place "Soldier4" (handSite 4 0) count:30 state:1 value:30)
        (place "Motorbike1" (handSite 1 1) count:50 state:1 value:40 ) (place "Motorbike2" (handSite 2 1) count:50 state:1 value:40)
        (place "Motorbike3" (handSite 3 1) count:50 state:1 value:40 ) (place "Motorbike4" (handSite 4 1) count:50 state:1 value:40)

        (place "Speeder1" (handSite 1 2) count:60 state:1 value:60 ) (place "Speeder2" (handSite 2 2) count:60 state:1 value:60)
        (place "Speeder3" (handSite 3 2) count:60 state:1 value:60 ) (place "Speeder4" (handSite 4 2) count:60 state:1 value:60)
        (place "Shooter1" (handSite 1 3) count:80 state:1 value:60 ) (place "Shooter2" (handSite 2 3) count:80 state:1 value:60)
        (place "Shooter3" (handSite 3 3) count:80 state:1 value:60 ) (place "Shooter4" (handSite 4 3) count:80 state:1 value:60)
        (place "Tank1" (handSite 1 4) count:100 state:1 value:80 ) (place "Tank2" (handSite 2 4) count:100 state:1 value:80)
        (place "Tank3" (handSite 3 4) count:100 state:1 value:80 ) (place "Tank4" (handSite 4 4) count:100 state:1 value:80)
        (place "Boss1" (handSite 1 5) count:150 state:1 value:150 ) (place "Boss2" (handSite 2 5) count:150 state:1 value:150)
        (place "Boss3" (handSite 3 5) count:150 state:1 value:150 ) (place "Boss4" (handSite 4 5) count:150 state:1 value:150)

        (place "Antiair1" (handSite 1 6) count:80 state:1 value:50 ) (place "Antiair2" (handSite 2 6) count:80 state:1 value:50)
        (place "Antiair3" (handSite 3 6) count:80 state:1 value:50 ) (place "Antiair4" (handSite 4 6) count:80 state:1 value:50)
        (place "Launcher1" (handSite 1 7) count:80 state:1 value:50 ) (place "Launcher2" (handSite 2 7) count:80 state:1 value:50)
        (place "Launcher3" (handSite 3 7) count:80 state:1 value:50 ) (place "Launcher4" (handSite 4 7) count:80 state:1 value:50)
        (place "Artillery1" (handSite 1 8) count:100 state:1 value:40 ) (place "Artillery2" (handSite 2 8) count:100 state:1 value:40)
        (place "Artillery3" (handSite 3 8) count:100 state:1 value:40 ) (place "Artillery4" (handSite 4 8) count:100 state:1 value:40)
        >
        <
        100
        >
        <

        >
        "Basic Scenario"
    )

    }
)

//------------------------------------------------------------------------------

(option "Player 1 Doctrine" <Doctrine1> args:{ <doctrine> }
    {
    (item "None"    			<"NoDoctrine">    		"The game is played on a 3x3 board.")**
    (item "Special Forces"    	<"SpecialForces">    	"The game is played on a 4x4 board.")
    (item "Brute Strength"		<"BruteStrength">    	"The game is played on a 5x5 board.")
    (item "Sharpshooter"    	<"Sharpshooter">    	"The game is played on a 6x6 board.")
    (item "Ace Pilot"    		<"AcePilot">   			"The game is played on a 7x7 board.")
    (item "Sea Dog"    			<"SeaDog">    			"The game is played on an 8x8 board.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"The game is played on a 3x3 board.")
    (item "Foreign Invader"    	<"ForeignInvader">    	"The game is played on a 3x3 board.")
    (item "Conscription"    	<"Conscription">    	"The game is played on a 3x3 board.")
    (item "Elite Training"    	<"EliteTraining">    	"The game is played on a 3x3 board.")
    (item "Glass Cannon"    	<"GlassCannon">    		"The game is played on a 3x3 board.")
    (item "Hardened Resolve"    <"HardenedResolve">  	"The game is played on a 3x3 board.")
    (item "Preemptive Strike"  	<"PreemptiveStrike"> 	"The game is played on a 3x3 board.")
    (item "Retaliation"    		<"Retaliation">    		"The game is played on a 3x3 board.")
    (item "Lady Luck"    		<"LadyLuck">    		"The game is played on a 3x3 board.")
})

(option "Player 2 Doctrine" <Doctrine2> args:{ <doctrine> }
    {
    (item "None"    			<"NoDoctrine">    		"The game is played on a 3x3 board.")**
    (item "Special Forces"    	<"SpecialForces">    	"The game is played on a 4x4 board.")
    (item "Brute Strength"		<"BruteStrength">    	"The game is played on a 5x5 board.")
    (item "Sharpshooter"    	<"Sharpshooter">    	"The game is played on a 6x6 board.")
    (item "Ace Pilot"    		<"AcePilot">   			"The game is played on a 7x7 board.")
    (item "Sea Dog"    			<"SeaDog">    			"The game is played on an 8x8 board.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"The game is played on a 3x3 board.")
    (item "Foreign Invader"    	<"ForeignInvader">    	"The game is played on a 3x3 board.")
    (item "Conscription"    	<"Conscription">    	"The game is played on a 3x3 board.")
    (item "Elite Training"    	<"EliteTraining">    	"The game is played on a 3x3 board.")
    (item "Glass Cannon"    	<"GlassCannon">    		"The game is played on a 3x3 board.")
    (item "Hardened Resolve"    <"HardenedResolve">  	"The game is played on a 3x3 board.")
    (item "Preemptive Strike"  	<"PreemptiveStrike"> 	"The game is played on a 3x3 board.")
    (item "Retaliation"    		<"Retaliation">    		"The game is played on a 3x3 board.")
    (item "Lady Luck"    		<"LadyLuck">    		"The game is played on a 3x3 board.")
})

(option "Player 3 Doctrine" <Doctrine3> args:{ <doctrine> }
    {
    (item "None"    			<"NoDoctrine">    		"The game is played on a 3x3 board.")**
    (item "Special Forces"    	<"SpecialForces">    	"The game is played on a 4x4 board.")
    (item "Brute Strength"		<"BruteStrength">    	"The game is played on a 5x5 board.")
    (item "Sharpshooter"    	<"Sharpshooter">    	"The game is played on a 6x6 board.")
    (item "Ace Pilot"    		<"AcePilot">   			"The game is played on a 7x7 board.")
    (item "Sea Dog"    			<"SeaDog">    			"The game is played on an 8x8 board.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"The game is played on a 3x3 board.")
    (item "Foreign Invader"    	<"ForeignInvader">    	"The game is played on a 3x3 board.")
    (item "Conscription"    	<"Conscription">    	"The game is played on a 3x3 board.")
    (item "Elite Training"    	<"EliteTraining">    	"The game is played on a 3x3 board.")
    (item "Glass Cannon"    	<"GlassCannon">    		"The game is played on a 3x3 board.")
    (item "Hardened Resolve"    <"HardenedResolve">  	"The game is played on a 3x3 board.")
    (item "Preemptive Strike"  	<"PreemptiveStrike"> 	"The game is played on a 3x3 board.")
    (item "Retaliation"    		<"Retaliation">    		"The game is played on a 3x3 board.")
    (item "Lady Luck"    		<"LadyLuck">    		"The game is played on a 3x3 board.")
})

(option "Player 4 Doctrine" <Doctrine4> args:{ <doctrine> }
    {
    (item "None"    			<"NoDoctrine">    		"The game is played on a 3x3 board.")**
    (item "Special Forces"    	<"SpecialForces">    	"The game is played on a 4x4 board.")
    (item "Brute Strength"		<"BruteStrength">    	"The game is played on a 5x5 board.")
    (item "Sharpshooter"    	<"Sharpshooter">    	"The game is played on a 6x6 board.")
    (item "Ace Pilot"    		<"AcePilot">   			"The game is played on a 7x7 board.")
    (item "Sea Dog"    			<"SeaDog">    			"The game is played on an 8x8 board.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"The game is played on a 3x3 board.")
    (item "Foreign Invader"    	<"ForeignInvader">    	"The game is played on a 3x3 board.")
    (item "Conscription"    	<"Conscription">    	"The game is played on a 3x3 board.")
    (item "Elite Training"    	<"EliteTraining">    	"The game is played on a 3x3 board.")
    (item "Glass Cannon"    	<"GlassCannon">    		"The game is played on a 3x3 board.")
    (item "Hardened Resolve"    <"HardenedResolve">  	"The game is played on a 3x3 board.")
    (item "Preemptive Strike"  	<"PreemptiveStrike"> 	"The game is played on a 3x3 board.")
    (item "Retaliation"    		<"Retaliation">    		"The game is played on a 3x3 board.")
    (item "Lady Luck"    		<"LadyLuck">    		"The game is played on a 3x3 board.")
})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Mini Wars is a simplified war game.")

        (rules " <br>
            //------------------------------------------------------------------------------
            <b>General Rules:</b>

            <u>The following rules apply to all units, unless stated otherwise in their description:</u>

            - All units move and measure distance orthogonally.
            - Units may move up to their maximum movement limit and can then attack adjacent sites.

            - Attacking a unit will deal damage to it (see damage calculation section).
            - If an attacked unit's health reaches zero, it will be removed from the battlefield.
            - Defending units that survive an attack, will then deal counter damage to their attacker.

            <u>The following rules apply to all buildings:</u>

            - There are five types of building: Town, Factory, Airport, Dock and Base.

            - Attacking a building will deal damage to it (see damage calculation section).
            - If an attacked building's health reaches zero, it will change ownership to the player who attacked it and receive 50 health.
            - Buildings that are attacked, will not deal counter damage.

            - Units can heal at an adjacent building, instead of attacking.
            - Healing at a building, will convert health from the building to the unit, transferring as much health as possible.

            - Additional units can be purchased using gold at their corresponding production building.
            - To purchase a unit, drag it from your hand to an available site next to a production building.
            - Each player's gold is represented by their score.
            - The cost of purchasing a unit is represented by its count.
            - Purchased units cannot move, attack or heal on the same turn they are purchased.

            - A player can only use a building (to produce or heal units) if they own it.
            - Each player receives one gold for every Town they own, at the start of their turn.
            - Buildings gain 10 health at the start of the owning player's turn, up to a maximum of 100.
            - Grey buildings are neutral, and are not owned by any player.

            - If a player loses ownership of all their Bases, they lose the game.

            //------------------------------------------------------------------------------
            <b>Units:</b>

            <u>Human</u> (Purchased from Towns)

            Soldier
            Move: 3
            Health: 30
            Cost: 30
            Damage Factor: 50%

            Motorbike
            Move: 5
            Health: 40
            Cost: 50
            Damage Factor: 50%

            <u>Vehicle</u> (Purchased from Factories)

            Speeder
            Move: 6
            Health: 60
            Cost: 60
            Damage Factor: 40%
            Purchased from: Factory

            Shooter
            Move: 4
            Health: 60
            Cost: 80
            Damage Factor: 40%
            Purchased from: Factory
            - Deals double damage against Humans.

            Tank
            Move: 4
            Health: 80
            Cost: 100
            Damage Factor: 50%
            Purchased from: Factory

            Boss
            Move: 2
            Health: 150
            Cost: 150
            Damage Factor: 50%
            Purchased from: Factory
            - Cannot attack Aircraft.

            Anti-Aircraft
            Move: 4
            Health: 50
            Cost: 80
            Damage Factor: 100%
            Purchased from: Factory
            - Can only attack Aircraft.
            - Can attack units 1-2 spaces away.
            - Does not deal or receive counter damage during an attack.

            Missile Launcher
            Move: 3
            Health: 50
            Cost: 80
            Damage Factor: 50%
            Purchased from: Factory
            - Cannot attack Aircraft.
            - Can only attack units 2-3 spaces away.
            - Does not deal or receive counter damage during an attack.

            Artillery
            Move: 3
            Health: 40
            Cost: 100
            Damage Factor: 100%
            Purchased from: Factory
            - Cannot attack Aircraft.
            - Can only attack units 3-5 spaces away.
            - Does not deal or receive counter damage during an attack.
            - Cannot attack or heal in the same turn that it moved.

            <u>Aircraft</u> (Purchased from Airports)

            Helicopter
            Move: 4
            Health: 40
            Cost: 60
            Damage Factor: 70%
            Purchased from: Airport

            Fighter Jet
            Move: 6
            Health: 100
            Cost: 100
            Damage Factor: 100%
            Purchased from: Airport
            - Can only attack Aircraft.

            Bomber
            Move: 5
            Health: 100
            Cost: 100
            Damage Factor: 80%
            Purchased from: Airport
            - Cannot attack Aircraft.

            <u>Boat</u> (Purchased from Docks)

            Cruiser
            Move: 5
            Health: 70
            Cost: 60
            Damage Factor: 50%
            Purchased from: Dock

            Submarine
            Move: 5
            Health: 100
            Cost: 100
            Damage Factor: 80%
            Purchased from: Dock
            - Can only attack Boats.

            Battleship
            Move: 4
            Health: 120
            Cost: 100
            Damage Factor: 50%
            Purchased from: Dock
            - Cannot attack Aircraft.
            - Can only attack units 2-4 spaces away.
            - Does not deal or receive counter damage during an attack.

            //------------------------------------------------------------------------------
            <b>Movement Restrictions:</b>

            Humans may travel across plains, forests, and shallow water.
            Vehicles may travel across plains. They may also move 1 space into forests instead of their regular movement.
            Aircraft may travel across all spaces.
            Boats may travel across shallow and deep water.
            Buildings cannot move (obviously).

            //------------------------------------------------------------------------------
            <b>Damage Calculation:</b>

            An attacking unit deals damage equal to its health, multiplied by its damage factor.
            For example, A submarine has a damage factor of 80%, so a submarine with 20 health will deal 16 damage when it attacks (20 x 0.8).
            If the defending unit is in shallow or deep water, it takes 25% more damage.
            If the defending unit is in a forest, it takes 25% less damage.
            Aircraft are unaffected by terrain when calculating damage against them.
            All damage values are rounded down to the nearest whole number.

            //------------------------------------------------------------------------------
            <b>Army Doctrine:</b>

            At the start of the game (selected via the game options) you may pick a doctrine for your army.

            None - No effect.
            Special Forces - Human units do 50% more damage, all other units do 25% less damage.
            Brute Strength - Direct Vehicle units (no range on their attack distance) do 50% more damage, all other units do 25% less damage.
            Sharpshooter - Indirect Vehicle units (range on their attack distance) do 50% more damage, all other units do 25% less damage.
            Ace Pilot - Aircraft units do 50% more damage, all other units do 25% less damage.
            Sea Dog - Boat units do 50% more damage, all other units do 25% less damage.
            Guerrilla Warfare - Attacks against buildings deal 50% more damage, but attacks against units deal 25% less damage.
            Foreign Invader - Attacks against buildings deal 50% less damage, but attacks against units deal 25% more damage.
            Conscription - Units cost 50% less gold, but do 50% less damage.
            Elite Training - Units cost 50% more gold, but do 50% more damage.
            Glass Cannon - Units do 50% more damage, but take 50% more damage.
            Hardened Resolve = Units do 50% less damage, but take 50% less damage.
            Preemptive Strike - Units do 50% more damage when attacking, but never deal counter damage.
            Retaliation - Units do 50% less damage when attacking, but deal 100% more counter damage.
            Lady Luck - All attack damage is randomly selected between 50% and 150% of the normal amount.

            //------------------------------------------------------------------------------
        ")

        (version "1.1.13")
        (classification "board/war/other")
        (credit "Matthew Stephenson")
        }
    )

    (graphics {
        (player Colour P1 (colour Red))
        (player Colour P2 (colour Yellow))
        (player Colour P3 (colour Blue))
        (player Colour P4 (colour Green))
        (piece Colour P1 state:0 fillColour:(colour 139 0 0))
        (piece Colour P2 state:0 fillColour:(colour 155 135 12))

        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (board Colour Symbols (colour Black))
        (piece Background image:"square" fillColour:(colour 255 255 255 1) edgeColour:(colour 255 255 255 1) )
        (piece ExtendName P2 "Flip")

        <Scenario:handPlacement>

        (piece Scale "Factory" 0.6)
        (piece Scale "Base" 0.6)
        (piece Scale "Town" 0.6)
        (piece Scale "Dock" 0.6)
        (piece Scale "Airport" 0.6)

        (piece Scale "Antiair" 0.7)
        (piece Scale "Cruiser" 0.7)
        (piece Scale "Motorbike" 0.7)
        (piece Scale "Soldier" 0.6)
        (piece Scale 0.8)

        (show Symbol "forest" (sites "Forest"))
        (show Symbol "waves" (sites "ShallowWater"))
        (show Symbol "waves" (sites "DeepWater"))
        (show Symbol "mountain" (sites "Mountain"))

        (board Colour Phase0 (colour 208 240 192))
        (region Colour (sites Occupied by:All components:{"Town" "Dock" "Base" "Factory" "Airport"}) (colour Grey))
        (region Colour "Forest" (colour 0 100 0))
        (region Colour "ShallowWater" (colour 173 216 230))
        (region Colour "DeepWater" (colour 28 98 215))
        (region Colour "Mountain" (colour 195 155 119))
    })

    (ai
        "Mini Wars_ai"
    )

)
