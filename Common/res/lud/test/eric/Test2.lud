//----------------------------
//Utility defines

(define "GetTerritorySitesAndScore"
    (and
        {
        (forEach Site
            (difference (sites Inner) (sites Occupied by:#1))
            (apply
                if:(= Infinity
                    (count Steps
                        (step Orthogonal (to if:(not (is #1 (who at:(to))))))
                        (site)
                        (sites Outer)
                ))
                (remember Value "TerritoryCount" (site) unique:True)
            )
            (then
                ("GetCountOfTerritories" #1)
        ))

        (set Score #1
            (*
                (size Array (values Remembered "RegionsSeeds"))
                (size Array
                    (array
                        (forEach
                            (sites (values Remembered "TerritoryCount"))
                            if:(is Empty (site))
            ))))
            (then
                (and
                    (forget Value "RegionsSeeds" All)
                    (forget Value "TerritoryCount" All)
        )))

        }
))

(define "GetCountOfTerritories"
    (forEach Value
        (values Remembered "TerritoryCount")
        (apply
            if:(or
                (= 0 (size Array (values Remembered "RegionsSeeds")))
                (= Infinity
                    (count Steps Orthogonal
                        (value)
                        (sites (values Remembered "RegionsSeeds"))
            )))
            (remember Value "RegionsSeeds" (value) unique:True)
)))

(define "RabbitMove"
    (forEach Piece
        (do
            (set Var "SitesMoverAroundFrom" (count Sites in:(sites Around (from) if:(is Mover (who at:(to))))))
            next:(move Hop
                Orthogonal
                (between (range 0 Infinity) if:True)
                (to (sites Empty)
                    if:(is Empty (to))
            ))
            ifAfterwards:(or
                (<
                    (var "SitesMoverAroundFrom")
                    (count Sites in:(sites Around (last To) if:(is Mover (who at:(to)))))
                )
                (and
                    (=
                        (var "SitesMoverAroundFrom")
                        (count Sites in:(sites Around (last To) if:(is Mover (who at:(to)))))
                    )
                    (>
                        (count Sites in:(sites Around (last From) if:(is Next (who at:(to)))))
                        (count Sites in:(sites Around (last To) if:(is Next (who at:(to)))))
            )))
            (then
                (and
                    {
                    ("GetTerritorySitesAndScore" Mover)
                    //      ("GetTerritorySitesAndScore" Next)
                    (if
                        (is Prev Next)
                        (moveAgain)
                    )
                    }
)))))

//-----------------------------------------------
// Main routine

(game "Rabbit Warren"
    (players 2)
    (equipment
        {
        (board (hex Hexagon <Board:side>) use:Cell)
        (piece "Ball" Each)
        }
    )
    (rules
        (start {<Board:white> <Board:black>})
        (play
            (or
                (move Pass)
                "RabbitMove"
        ))
        (end
            (if (all Passed)
                (byScore)
))))

//--------------------------------------
// End conditions

//-------------------------------------------------
// Options

(option "Board Size" <Board> args:{<side> <area> <white> <black>}
    {
    (item "Standard"
        <6 8>
        <(sites Board)>
        <(place "Ball1" {2 6 9 13 17 21 25 29 33 37 38 42 46 53 57 61 64 68 72 77 81 85 89 93 97 101 108 112 113 117 121 125})>
        <(place "Ball2" {1 5 11 15 18 22 26 27 31 35 41 45 49 51 55 59 65 69 73 75 79 83 88 92 99 103 105 109 115 119 120 124})>
    "Standard Board")***

    (item "Order 3"
        <4>
        <(sites Inner)>
        //   <(place "Ball1" {5 12 17 20 25 29 })>
        //   <(place "Ball2" {7 11 16 19 24 31 })>
        <(place "Ball1" {2 5 8 9 12 17 20 25 29 })>
        <(place "Ball2" {1 4 7 11 14 16 19 24 31 })>
    "Order 4 board")

    (item "Order 4"
        <5>
        <(sites Inner)>
        <(place "Ball1" {7 12 15 21 24 28 31 38 41 44 47 52})>
        <(place "Ball2" {8 13 16 19 22 29 32 36 39 45 48 53})>
    "Order 4 board")*

    (item "Order 5"
        <5>
        <(sites Board)>
        <(place "Ball1" {0 3 7 10 12 15 18 21 24 28 31 34 35 38 41 44 47 52 55 56 59})>
        <(place "Ball2" {1 4 5 8 13 16 19 22 25 26 29 32 36 39 42 45 48 50 53 57 60})>
    "Order 5 board")

    (item "Order 6"
        <6>
        <(sites Board)>
        <(place "Ball1" {0 3 8 11 14 17 20 21 24 27 32 35 38 41 44 47 50 53 56 59 61 64 67 71 74 77 80 83 85 88})>
        <(place "Ball2" {2 5 7 10 13 16 19 23 26 29 31 34 37 40 43 46 49 52 55 58 63 66 69 70 73 76 79 82 87 90})>
    "Order 6 board")***
    }
)

//---------------------------------------------
(define "ColourBackground" (colour 245 245 245))

(metadata
    (info
        {
        (description "Squish Implementation notes:

            I have implemented your games Squish and Advanced Squish.

            In the corrected version a singleton is not a group, and so can move without joining a group.

            I also added a combo version with step to merge moves and restricted slide to capture.

            I then added some variants as I thought of them:
            -- Simple Squish, a pure race version, that still has surprising complexity. This is so simple I suspect someone has done it before? It is a bit like where Muster was headed before I added a placement phase.

            -- a LOS version that shows how I first misunderstood your rules.

            I then realised that in advanced Squish, the goal of unifying your pieces means you are not able to move afterwards, so:
            -- Advanced Misere Squish in which the goal is purely to stalemate yourself.

            -- Sliding Squish is a version for the advanced game (It seemed too quick and powerful a mechanism for the standard Squish.)

            -- Shakattrition, a misere version with sliding which reminded me of my Shaka and Infuse, since when the Squish rule is combine with sliding, the end-game becomes line of sight; but in this case, instead of building territory to be last to play as in Shaka, one is shedding pieces for the same reason.

            I tried to follow your published graphics as much as Ludii allows.
            Hope you like the results."
        )

        (rules "Goal: Unify the pieces of your color into a single group, or prevent your opponent from moving.

            Setup: Pieces of each color are distributed symmetrically on every 3rd cell of the board.
            (For a game on an order 4 board, the outer cells are not used.)

            Play:
            Decide which player will play with which color (Dark or Light). Light is the first player to play.

            On each turn, the mover mmoves one piece to an adjacent cell that is one step closer to another of his pieces.
            If that cell is occupied by the opponent's piece, that piece is removed in the process of moving.
            A piece cannot move onto a cell occupied by another friendly piece.

            The game ends in a loss for a player who cannot move any piece; or ends in a win for a player whose pieces form a single group at the end of their own turn.

            Options: The Advanced version furthur restricts movement by requiring that if a piece moves to an empty cell, it must join a group that is larger than the group that it was initially part of.
            Thus an isolated piece must join a group, and a piece leaving a group must become part of a larger group, or merge two groups to form a larger group.

            This restriction increases the possibility of not being able to move, and may also force captures.
            "
        )
        (source "BGG")
        (version "1.2.11")
        (classification "experimental")
        (author "Kanare Kato")
        (credit "Dale W. Walton")
        (date "30-09-2021")
        }
    )
    (graphics
        {
        (player Colour P1 (colour 240 180 150))
        (player Colour P2 (colour Burgundy))
        (piece Scale "Ball" 0.91)
        (piece Colour P1 strokeColour:(colour VeryDarkGrey))
        (piece Colour P2 strokeColour:(colour DarkGrey))
        (piece Background "Ball" image:"Ball" fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:0.95 offsetX:-1 offsetY:2)
        (piece Foreground P2 "Ball" image:"Hare-alt2" fillColour:(colour 0 0 0 75) edgeColour:(colour 240 180 150 180) scale:0.7 )
        (piece Foreground P1 "Ball" image:"Hare-alt2" fillColour:(colour 255 255 255 150) edgeColour:(colour 120 90 75 180) scale:0.7 )
        (board Colour Phase0 (colour 200 250 230 90))
        (board StyleThickness InnerEdges 1.6)
        (board StyleThickness OuterEdges 1.6)
        (board StyleThickness InnerVertices 0.45)
        (board StyleThickness OuterVertices 0.45)
        (board Colour InnerVertices (colour Grey))
        (board Colour OuterVertices (colour Grey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (region Colour (sites Outer) (colour 250 250 230 200))

        }
    )
)
