(define "PieceIsStone"
    (= (what at:(from)) (id "Stone" Mover))
)

(define "PieceIsColumn"
    (= (what at:(from)) (id "Column" Mover))
)

(define "EnemyBase"
    (if (is Mover P1) (sites P2) (sites P1))
)

(define "NotOwnBase"
    (not (is In (to) (sites Mover "Base")))
)

(define "CaptureToPiece"
    if:(and
        (is Enemy (who at:(to)))
        (not (is In (to) ("EnemyBase")))
    )
    (apply (remove (to)))
)

(define "EmptyAndNotVisited"
    (and
        (is Empty (to))
        (not (is Visited (to)))
    )
)

(define "Hop"
    (move
        Hop
        (from #1)
        (between if:(or
                (is Friend (who at:(between)))
                (is In (between) (sites Mover "Base"))
            )
        )
        (to
            if:("EmptyAndNotVisited")
            // can I insert conditional if: here so "PieceIsStone" allows check for "NotOwnBase" and "PieceIsColumn" allows "CaptureToPiece" and move end?
        )
        #2
    )
)

(define "HopSequence" ("Hop" #1 (then (if (can Move ("Hop" (last To))) (moveAgain) ))))

//------------------------------------------------------------------------------

(game "Batalo"
    (players 2)
    (equipment {
        (board (hex 7))
        (regions "Base" P1 {60})
        (regions "Base" P2 {66})
        (piece "Stone" Each
            (move
                Step
                (to
                    if:(and
                        (is Empty (to))
                        ("NotOwnBase")
                    )
                )
            )
        )
        (piece "Column" Each
            (move
                Slide
                (to "CaptureToPiece")
            )
        )
    })

    (rules
        (start {
            (place "Column1" {60})
            (place "Column2" {66})
            (place "Stone1" {47 48 59 61 72 73})
            (place "Stone2" {53 54 65 67 78 79})
        })

        phases:{
        (phase "Movement"
            (play
                (or
                    (forEach Piece)
                    (forEach Piece ("HopSequence" (from)))
                )
            )
            (nextPhase (is Mover (next)) "MultiJump")
        )
        (phase "MultiJump"
            (play
                (or
                    ("HopSequence" (last To))
                    (move Pass)
                )
            )
            (nextPhase (not (is Mover (next))) "Movement")
        )
        }

        // (end (if (is In (last To) ("EnemyBase")) (result Mover Win)))
        (end (if (or
                    (is In (last To) ("EnemyBase"))
                    (no Moves Next )
                )
                (result Mover Win)
            )
        )
    )
)

//------------------------------------------------------------------------------

(metadata
    (info {
        (description "A mash-up of Chess, Chinese Checkers, and Capture the Flag.")
        (aliases {"BattleStones (iPad/iPhone/Mac app)"})
        (rules "Played on a 7x7x7 hex board containing two player Bases.
            Each player has one Column piece placed on their Base, surrounded by six Stone pieces.

            Stones can move one space in any direction.
            Columns can move any number of spaces in any direction.
            Alternately, all pieces can hop over team pieces (and their own Base) multiple times.

            Players may capture pieces by moving their Column onto a space occupied by an opponent's piece.

            Stones may not move onto their own Base.
            Columns can not be captured while occupying their own Base.

        Players win by moving a piece onto the opponent's Base, or capturing all the opponent's pieces.")
        (source "<a href=\"https://www.digitalharmonics.org/harmonygames.html\" target=\"_blank\" />archived web site</a>")
        (version "1.2.11")
        (classification "board/race/reach")
        (author "Scott Harmon")
        (credit "Scott Harmon")
        (origin "This game was created by Scott Harmon in 1983, published as a board game in 1991, and programmed and published as an iPad/iPhone/Mac app in 2010.")
    })
    (graphics {
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (board Colour Phase0 (colour LightGrey))
        (region Colour "Base" (colour Grey))
        (piece Rename piece:"Stone" "Hex")
        (piece Rename piece:"Column" "Hex")
        (piece Scale "Stone" 0.6)
        (piece Scale "Column" 0.8)
        (piece Foreground "Column1" image:"hex" scale:0.5)
        (piece Foreground "Column2" image:"hex" edgeColour:(colour White) scale:0.5)
    })
)

