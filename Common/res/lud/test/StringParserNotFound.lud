(define "Deploy"
    (move Add (piece (id "Hex" Mover))
        (to
            (union
                (sites Mover)
                (sites Around
                    (sites Occupied by:Mover component:"Hex" top:False)
                )
            )
            if:(is Empty (to))
        )
        (then
            (add (piece (id "Disc" Mover))
                (to (last To))
                stack:True
            )
        )
    )
)

(define "Step"
    (move
        (from)
        (to "EmptyInRange")
        count:("StackSize" (from))
        stack:True
    )
)

(define "Capture"
    (move
        (from)
        (to
            ("CaptureRange")
            (apply
                (and
                    (if (= 0 (count MovesThisTurn))
                        (and
                            (set Var "MovesLeft" ("StackSize" (from)))
                            (set Var "CapturedThisTurn" 0)
                        )
                    )
                    (remove (to) count:("StackSize" (to)))
                )
            )
        )
        count:("StackSize" (from))
        stack:True
    )
)

(define "StackSize"
    (count Stack
        at:#1
        if:(or
            (=
                (id "Disc" Next)
                (what at:(to) level:(level))
            )
            (=
                (id "Disc" Mover)
                (what at:(to) level:(level))
            )
        )
    )
)

(define "EmptyInRange"
    (sites Distance
        (step
            (if
                (is Odd ("StackSize" (from)))
                Forwards
                Backwards
            )
            (to
                if:(= 0 ("StackSize" (to)))
            )
        )
        from:(from)
        (range 1 ("StackSize" (from)))
    )
)

(define "StepsTaken"
    (count Steps
        //(step
            //    (to
                //        if:(or
                    //            (= (last To) (to))
                    //            (= 0 ("StackSize" (to)))
                //        )
            //    )
        //)
        (last From)
        (last To)
    )

)

(define "Promotes"
    (=
        (+
            (* 1 (% ("StackSize" #1) 2))
            (%
                (mover)
                (-
                    3
                    (% ("StackSize" #1) 2)
                )
            )
        )
        (*
            (who at:#1 level:0)
            (count Stack
                at:#1
                if:(or
                    (=
                        (id "Hex" Next)
                        (what at:(to) level:(level))
                    )
                    (=
                        (id "Hex" Mover)
                        (what at:(to) level:(level))
                    )
                )
            )
        )
    )
)

(define "Reachable"
    (sites Distance
        (step
            (to
                if:(= 0 ("StackSize" (to)))
            )
        )
        from:(from)
        (range 1 #1)
    )
)

(define "CaptureRange"
    (if
        (> ("StackSize" (from)) 1)
        (intersection
            (sites Around
                (intersection
                    ("Reachable" ("StackSize" (from)))
                    (sites Around
                        (sites Occupied by:Enemy component:"Disc")
                    )
                )
            )
            (sites Occupied by:Enemy component:"Disc")
        )
        (intersection
            (sites Around (from))
            (sites Occupied by:Enemy component:"Disc")
        )
    )
)

(game "StringParserNotFound"
    (players {(player N) (player S)})
    (equipment
        {
        (board (rotate 30 (hex <Board>)))
        (piece "Disc" Each)
        (tile "Hex" Each)
        (regions P1 (sites {0}))
        (regions P2 (sites {(* <Board> (* 3 (- <Board> 1)))}))
        }
    )
    (rules
        (play
            (if
                (can Move
                    (forEach Piece "Disc"
                        ("Capture")
                        top:True
                    )
                )
                (forEach Piece "Disc"
                    ("Capture")
                    top:True
                )
                (or
                    ("Deploy")
                    (forEach Piece "Disc"
                        ("Step")
                        top:True
                    )
                )
                (then
                    (and
                        (if
                            ("Promotes" (last To))
                            (add (piece (id "Disc" Mover))
                                (to (last To))
                                stack:True
                            )
                        )
                        (set Score Mover ("StepsTaken"))
                    )
                )
            )
        )
        (end
            (if
                (no Moves Next)
                (result Next Loss)
            )
        )
    )
)

(option "Board Size" <Board> args:{ <size> }
    {
    (item "4"    <4>  "A base 4 board is currently selected")*
    (item "5"    <5>  "A base 5 board is currently selected")
    (item "6"    <6>  "A base 6 board is currently selected")
    }
)

//(< 0 (count Sites in:("EnemiesInRange")))

(metadata
    (graphics {
        (player Colour P1 (colour Cream))
        (player Colour P2 (colour Grey))
        (stackType Default 0.7)
        //(show Piece State Middle)
    })
)
