(game "Backgammon"
    (players 2)
    (equipment {
        (board (square 2) 13 {
            (track "Track1" {6 12..7 5..0 13..18 20..25 End} 1 directed:True)
            (track "Track2" {19 25..20 18..13 0..5 7..12 End} 2 directed:True)
        } use:Vertex)
        (dice num:2)
        (regions P1 { 20..25 })
        (regions P2 { 7..12 })
        (map {(pair 1 6 ) (pair 2 19)})
        (piece "Disc" Each
            (forEach Die
                replayDouble:True
                (and {
                    (!= (pips) 0)
                    (!= (trackSite Move steps:(pips)) Off)
                    (!= (trackSite Move steps:(pips)) End)
                })
                (fromTo
                    (from)
                    (to
                        (trackSite Move steps:(pips))
                        if:(or
                            (and (is Enemy (who at:(to))) (= (topLevel at:(to)) 0))
                            (not (is Enemy (who at:(to))))
                        )
                        (apply
                            if:(is Enemy (who at:(to)))
                            (fromTo (from (to)) (to (mapEntry (next) )))
                        )
                    )
                )
            )
        )
    } )

    (rules
        (start {
            (place "Disc1" 0 count:5 onStack:True) (place "Disc1" 12 count:2 onStack:True)
            (place "Disc1" 18 count:3 onStack:True) (place "Disc1" 20 count:5 onStack:True)
            (place "Disc2" 5 count:3 onStack:True) (place "Disc2" 7 count:5 onStack:True)
            (place "Disc2" 13 count:5 onStack:True) (place "Disc2" 25 count:2 onStack:True)
        })

        (play
            (do
                (if (not (is Mover (prev))) (roll))
                next:(if ("NoSites" (difference (sites Occupied by:Mover) (sites Mover)))
                    (forEach Die
                        replayDouble:True
                        (!= (pips) 0)
                        (forEach Site
                            (sites Mover)
                            (if (and
                                    (!= (what at:(site)) 0)
                                    (!= (trackSite Move from:(site) steps:(pips)) Off)
                                )
                                (if (= (trackSite Move from:(site) steps:(pips)) End)
                                    (select
                                        (from (site))
                                        (then (remove (last To)))
                                    )
                                    (fromTo
                                        (from (site))
                                        (to
                                            (trackSite Move from:(site) steps:(pips))
                                            if:(or
                                                (and
                                                    (is Enemy (who at:(to)))
                                                    (= (topLevel at:(to)) 0)
                                                )
                                                (not (is Enemy (who at:(to))))
                                            )
                                            (apply
                                                if:(is Enemy (who at:(to)))
                                                (fromTo
                                                    (from (to))
                                                    (to (mapEntry (next) ))
                                                )
                                            )
                                        )

                                    )
                                )
                            )
                            // Can be improved with a new ludeme or a constraint in a region I assume (Eric)
                            noMoveYet:(if (> (- (pips) 1) 0)
                                (if (!= (what at:(if (is Mover P1) (- 24 (- (pips) 1)) (+ Off (- (pips) 1)))) 0)
                                    (select (from (if (is Mover P1) (- 24 (- (pips) 1)) (+ Off (- (pips) 1)))) (then (remove (last To)) ))
                                    (if (> (- (pips) 2) 0)
                                        (if (!= (what at:(if (is Mover P1) (- 24 (- (pips) 2)) (+ Off (- (pips) 2)))) 0)
                                            (select (from (if (is Mover P1) (- 24 (- (pips) 2)) (+ Off (- (pips) 2)))) (then (remove (last To)) ))
                                            (if (> (- (pips) 3) 0)
                                                (if (!= (what at:(if (is Mover P1) (- 24 (- (pips) 3)) (+ Off (- (pips) 3)))) 0)
                                                    (select (from (if (is Mover P1) (- 24 (- (pips) 3)) (+ Off (- (pips) 3)))) (then (remove (last To)) ))
                                                    (if (> (- (pips) 4) 0)
                                                        (if (!= (what at:(if (is Mover P1) (- 24 (- (pips) 4)) (+ Off (- (pips) 4)))) 0)
                                                            (select (from (if (is Mover P1) (- 24 (- (pips) 4)) (+ Off (- (pips) 4)))) (then (remove (last To)) ))
                                                            (if (> (- (pips) 5) 0)
                                                                (if (!= (what at:(if (is Mover P1) (- 24 (- (pips) 5)) (+ Off (- (pips) 5)))) 0)
                                                                    (select (from (if (is Mover P1) (- 24 (- (pips) 5)) (+ Off (- (pips) 5)))) (then (remove (last To)) ))
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (then (if (not (all DiceUsed))
                                    (moveAgain)
                                )
                            )
                        )
                    )
                    //                    //(max Distance
                        (if (= (what at:(mapEntry (mover))) 0)
                            (forEach Piece top:True)
                            (forEach Die replayDouble:True (!= (pips) 0)
                                (fromTo
                                    (from (mapEntry (mover)))
                                    (to
                                        (trackSite Move from:(mapEntry (mover)) steps:(pips))
                                        if:(or
                                            (and
                                                (is Enemy (who at:(to)))
                                                (= (topLevel at:(to)) 0)
                                            )
                                            (not (is Enemy (who at:(to))))
                                        )
                                        (apply if:(is Enemy (who at:(to))))
                                    )
                                )
                            )
                            (then (if (not (all DiceUsed))
                                    (if (can Move
                                            (if (= (what at:(mapEntry (mover))) 0)
                                                (forEach Piece top:True)
                                                (forEach Die replayDouble:True (!= (pips) 0)
                                                    (fromTo
                                                        (from (mapEntry (mover)))
                                                        (to
                                                            (trackSite Move from:(mapEntry (mover)) steps:(pips))
                                                            if:(or
                                                                (and
                                                                    (is Enemy (who at:(to)))
                                                                    (= (topLevel at:(to)) 0)
                                                                )
                                                                (not (is Enemy (who at:(to))))
                                                            )
                                                            (apply if:(is Enemy (who at:(to))))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        (moveAgain)
                                    )
                                )
                            )
                        )
                    //)
                )
            )
        )

        (end
            (if ("NoSites" (sites Occupied by:Mover))
                (byScore
                    {
                    (set Score P1 (if (is Mover P1) (if (= (height (sites Occupied by:P2)) 15) 2 1) 0))
                    (set Score P2 (if (is Mover P2) (if (= (height (sites Occupied by:P1)) 15) 2 1) 0))
                    }
                )
            )
        )
    )
)

//-------------------------------------------------------------------------

(metadata {

    (info {
        (description "A Latin Square is a mathematical puzzle which appears in various cultures around the world, probably independently invented.")
    })

    (graphics {
        (board Style backgammon)
    })

})
