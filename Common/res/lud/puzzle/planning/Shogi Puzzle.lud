(define "CapturePiece"
    (apply
        (add
            (piece (mapEntry "captured" (what at:(to))))
            (to (mapEntry "where" (what at:(to))))
        )
    )
)

(define "CapturePiece"
    (apply
        (add
            (piece (mapEntry "captured" (what at:(to))))
            (to (mapEntry "where" (what at:(to))))
        )
    )
)

(define "InPromotionZone"
    (is In #1 (sites Mover "Promotion") )
)

(define "InLastRank"
    (is In #1 (sites Mover "LastRank") )
)

(define "InTwoFurthestRank"
    (is In #1 (sites Mover "TwoFurthestRank") )
)

(define "Promote"
    (move Promote (last To) (piece (mapEntry "promoted" (what at:(last To)))))
)

(define "CanPromote"
    (then
        (if
            (or ("InPromotionZone" (last To)) ("InPromotionZone" (last From)) )
            (moveAgain)
        )
    )
)

(define "SlideMove"
    (move
        Slide
        #1
        (to if:(is Enemy (who at:(to))) "CapturePiece")
        #2
    )
)

(define "StepMove"
    (move
        Step
        #1
        (to if:(not (is Friend (who at:(to)))) "CapturePiece")
        #2
    )
)

(define "GoldMove" ("StepMove" (directions {Forward Backward Rightward Leftward FL FR})))

(define "KingCheck"
    (is Threatened (id "Osho" #1) at:(where "Osho" #1))
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("KingCheck" Next))) ))
)

(define "OnePawnPerColumn"
    (=
        (count Sites in:(sites Occupied by:Mover container:"Board" component:"Fuhyo"))
        (count Sites in:(difference (sites Occupied by:Mover container:"Board" component:"Fuhyo") (sites Column (column of:(to)))))
    )
)

(define "PlaceAKnight"
    (move
        (from (sites Occupied by:Mover container:"Hand" component:"Keima" ))
        (to (difference (sites Empty) (sites Mover "TwoFurthestRank") ))
    )
)

(define "PlaceALance"
    (move
        (from (sites Occupied by:Mover container:"Hand" component:"Kyosha" ))
        (to (difference (sites Empty) (sites Mover "LastRank") ))
    )
)

(define "PlaceAPawn"
    (do
        (move
            (from (sites Occupied by:Mover container:"Hand" component:"Fuhyo"))
            (to (difference (sites Empty) (sites Mover "LastRank") )
                if:"OnePawnPerColumn"
            )
        )
        ifAfterwards:(not ("KingCheck" Next))
    )
)

//------------------------------------------------------------------------------

(game "Shogi Puzzle"
    (players {(player N) (player S)})

    (equipment {
        (board (square 9))

        // King
        (piece "Osho" Each ("StepMove"))
        //Pawn
        (piece "Fuhyo" Each
            ("StepMove"
                Forward
                (then
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To))
                            "Promote"
                            (moveAgain)
                        )
                    )
                )
            )
        )
        // Silver General
        (piece "Ginsho" Each ("StepMove" (directions {Forward BL BR FL FR}) "CanPromote"))
        // Rook
        (piece "Hisha" Each ("SlideMove" Orthogonal "CanPromote") )
        // Bishop
        (piece "Kakugyo" Each ("SlideMove" Diagonal "CanPromote"))
        // Knight
        (piece "Keima" Each
            (forEach Direction
                Forward
                (to
                    if:True
                    (apply
                        (forEach Direction
                            (from (to))
                            (directions {FR FL})
                            (if (not (is Friend (who at:(to))))
                                (move
                                    (from)
                                    (to
                                        (apply
                                            if:(is Enemy (who at:(to)))
                                            (add
                                                (piece (mapEntry "Captured" (what at:(to))))
                                                (to (mapEntry "Where" (what at:(to))))
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
                (then
                    (if ("InPromotionZone" (last To))
                        (if ("InTwoFurthestRank" (last To))
                            "Promote"
                            (moveAgain)
                        )
                    )
                )
            )
        )
        // Lance
        (piece "Kyosha" Each
            ("SlideMove"
                Forward
                (then
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To))
                            "Promote"
                            (moveAgain)
                        )
                    )
                )
            )
        )
        // Gold General
        (piece "Kinsho" Each "GoldMove")
        // Promoted Pawn
        (piece "Tokin" Each "GoldMove")
        // Promoted Silver
        (piece "Narigin" Each "GoldMove")
        // Promoted Rook
        (piece "Ryuo" Each (or ("SlideMove" Orthogonal) ("StepMove" Diagonal) ) )
        // Promoted Bishop
        (piece "Ryuma" Each (or ("SlideMove" Diagonal) ("StepMove" Orthogonal) ) )
        // Promoted Knight
        (piece "Narikei" Each "GoldMove")
        // Promoted Lance
        (piece "Narikyo" Each "GoldMove")

        (regions "LastRankP1" P1 (sites Top) )
        (regions "LastRankP2" P2 (sites Bottom) )
        (regions "TwoFurthestRankP1" P1 (expand (sites Top) ) )
        (regions "TwoFurthestRankP2" P2 (expand (sites Bottom) ) )
        (regions "Promotion" P1 (expand (sites Top) steps:2) )
        (regions "Promotion" P2 (expand (sites Bottom) steps:2) )
        (map "where" { (pair 3 88) (pair 4 81) (pair 5 89) (pair 6 82) (pair 7 90) (pair 8 83) (pair 9 91) (pair 10 84) (pair 11 92) (pair 12 85) (pair 13 93) (pair 14 86) (pair 15 94) (pair 16 87) (pair 17 88) (pair 18 81) (pair 19 89) (pair 20 82) (pair 21 90) (pair 22 83) (pair 23 91) (pair 24 84) (pair 25 92) (pair 26 85) (pair 27 93) (pair 28 86)})
        (map "captured" { (pair 3 4) (pair 4 3) (pair 5 6) (pair 6 5) (pair 7 8) (pair 8 7) (pair 9 10) (pair 10 9) (pair 11 12) (pair 12 11) (pair 13 14) (pair 14 13) (pair 15 16) (pair 16 15) (pair 17 4) (pair 18 3) (pair 19 6) (pair 20 5) (pair 21 8) (pair 22 7) (pair 23 10) (pair 24 9) (pair 25 12) (pair 26 11) (pair 27 14) (pair 28 13)})
        (map "promoted" { (pair 3 17) (pair 4 18) (pair 5 19) (pair 6 20) (pair 7 21) (pair 8 22) (pair 9 23) (pair 10 24) (pair 11 25) (pair 12 26) (pair 13 27) (pair 14 28)})

        (hand Each size:7)
    })

    (rules
        (start {
            <challenge:start>
        })

        (play
            (if "SameTurn"
                (or
                    "Promote"
                    (move Pass)
                )
                (do
                    (or {
                        (move (from (sites Occupied by:Mover container:"Hand" components:{"Kakugyo" "Ginsho" "Hisha" "Kinsho"})) (to (sites Empty)))
                        "PlaceAPawn"
                        "PlaceALance"
                        "PlaceAKnight"
                        (forEach Piece)
                    } )
                    ifAfterwards:(not ("KingCheck" Mover))
                )
            )
        )

        (end {
            (if (and {
                    ("KingCheck" Next)
                    "NextCanNotMove"
                    (<= (count Turns) <challenge:limit>)
                })
                (result P1 Win)
            )
            (if (or (no Moves Next) (and (= <challenge:limit> (count Turns)) (not (is Mover Next)))) (result P1 Loss) )
            }
        )
    )
)

//------------------------------------------------------------------------------

(option "Challenge" <challenge> args:{ <start> <limit> }
    {
    (item "1 (1 Move)"
        <(place "Kinsho1" {"G7"}) (place "Kinsho1" 86)
        (place "Osho2" coord:"G9") >
        <1>
        ""
    )
    }
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Shogi puzzles are known in some of the earliest texts about the game. The are similar to Chess puzzles, where players are given a scenario on the Shogi board to solve.")
        (rules "In this Shogi Puzzle, you have to checkmate the black Osho, using the regular rules of Shogi, with the smallest number of moves possible.")
        (source "Glance Shogi Series, Ending Attack at a Glance, Madoka Kitao")
        (version "1.3.0")
        (classification "puzzle/planning")
        (credit "Eric Piette")
        }
    )

    (graphics {
        (player Colour P1 (colour White))
        (player Colour P2 (colour White))
        (piece Families {"Defined" "Study"})
        (board Style Shogi)
        (piece Rotate P2 degrees:180)
        (piece Colour "Tokin" strokeColour:(colour Red))
        (piece Colour "Narigin" strokeColour:(colour Red))
        (piece Colour "Ryuo" strokeColour:(colour Red))
        (piece Colour "Ryuma" strokeColour:(colour Red))
        (piece Colour "Narikei" strokeColour:(colour Red))
        (piece Colour "Narikyo" strokeColour:(colour Red))
        (piece ExtendName P2 piece:"Osho" "1")
        (adversarialPuzzle)
    })

    (ai
        "Shogi Puzzle_ai"
    )

)
