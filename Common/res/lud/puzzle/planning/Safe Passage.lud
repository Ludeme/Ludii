(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "KingInTheInitialPlace"
    (= (what at:(mapEntry "King" (mover))) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:(last To) 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            "PieceHasMoved"
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DoCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "SmallCastling"
    ("DoCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRight" W 2 True))))
)

(define "BigCastling"
    ("DoCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeft" E 3 True))))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (remove
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Safe Passage"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        }
    )
    (rules
        (start
            {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
            }
        )

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do
                    (or
                        (forEach Piece)
                        (if (and {
                                "KingInTheInitialPlace"
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover))
                            })
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("DoCastle" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("DoCastle" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )

        (end {
            (if (is Threatened) (result All Loss) )
            (if (and (= (what at:4) (id "King2")) (= (what at:60) (id "King1"))) (result All Win) )
        })
    )
)

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Safe Passage is a Chess puzzle created by Matthew Stephenson, inspired by the Safe Passage puzzle created by Karen Robinson.")
        (rules "This Chess puzzle uses the same rules as Chess. To win this puzzle you have to swap the positions of the kings. However, if at any point it is possible to capture a piece, you lose.")
        (source "inspired by the puzzle presented here: <a href=\"https://www.chessvariants.com/rules/safe-passage\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />chessvariants.com</a>")
        (version "1.3.0")
        (classification "puzzle/planning")
        (author "Matthew Stephenson")
        }
    )

    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Safe Passage_ai"
    )
)
