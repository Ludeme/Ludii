(define "WhiteVC"
    (is Connected All {(sites Side N) (sites Side S) (sites Side E) (sites Side W)})
)

(define "BlackVC"
    (or
        (is Connected Orthogonal {(sites Side N) (sites Side S)})
        (is Connected Orthogonal {(sites Side E) (sites Side W)})
    )
)

(define "IsPlayingPhase" (= 1 (var)) )

(define "Skip"
    (move Set NextPlayer (player (next)))
)

//-----------------------------------------------------------------------------------

(game "Pippinzip (Zipline variant)"
    (players 2)
    (equipment {
        (board (square <Board:size>) use:Vertex)
        (piece "Disc" Each)
    })
    (rules
        phases: {
        (phase "Opening"
            (play
                (or

                    (or
                        (move
                            Add (piece (id "Disc" P2)) (to (sites Empty))
                        (then (if (lt (count MovesThisTurn) 2) (moveAgain))))
                        "Skip"
                    )
                    (if (= (count MovesThisTurn) 0)
                        (move
                            Pass
                            (then
                                (if
                                    (is Mover P1)
                                    (swap
                                        Players
                                        P1
                                        P2
                                        (then
                                            (note "Player 1 is now White. Player 2 is now Black." to:All)
                                        )
                                    )
                                    (note "Player 1 is now Black. Player 2 is now White." to:All)
                                    (then
                                        (do
                                            (set NextPlayer (player 1))
                                            next:(set Var 1) // (var) represents the phase here
                                        )
                                    )
                                )
                            )
                    ))
                )
            )
            (nextPhase ("IsPlayingPhase") "Playing")
        )
        (phase "Playing"
            (play
                (or
                    (move Add (to (sites Empty) if:(= (id P1) (mover)))
                        (then
                            (if
                                (= 0 (count MovesThisTurn))
                                (moveAgain)
                            )
                        )
                    )
                    (move Add (to (sites Empty) if:(= (id P2) (mover))))
                )
            )
        )
        }
        (end {
            (if (and (not ("IsPlayingPhase")) ("WhiteVC")) (result Mover Win))
            (if (and {(= (id P1) (mover)) ("BlackVC")}) (result P1 Win))
            (if (and {(= (id P2) (mover)) ("WhiteVC")}) (result P2 Win))
        })
    )
)

//------------------------------------------------------------------------------

(option "Board Size" <Board> args:{ <size> }
    {
    (item "5"    <5>  "Played on a size 5 board.")
    (item "6"    <6>  "Played on a size 6 board.")
    (item "7"    <7>  "Played on a size 7 board.")
    (item "8"    <8>  "Played on a size 8 board.")
    (item "9"    <9>  "Played on a size 9 board.")
    (item "10"  <10>  "Played on a size 10 board.")
    (item "11"  <11>  "Played on a size 11 board.")
    (item "12"  <12>  "Played on a size 12 board.")
    (item "13"  <13>  "Played on a size 13 board.")**
    (item "14"  <14>  "Played on a size 14 board.")
    (item "15"  <15>  "Played on a size 15 board.")
    (item "16"  <16>  "Played on a size 16 board.")
    (item "17"  <17>  "Played on a size 17 board.")
    (item "18"  <18>  "Played on a size 18 board.")
    (item "19"  <19>  "Played on a size 19 board.")
    }
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Pippinzip is a square-board connection game for two players.  This is the 'Zipline' variant, and these rules are 'Freestyle', where there are no restrictions on the placement of Black's stones.  The game starts with a chicken ballot phase similar to Unlur, in which players both place 1-3 White stones per turn until one decides to pass their turn and take White.  Subsequently, White places one stone per turn, and Black places two stones per turn.  The Black player ('Pip') wins if they connect any two sides of the board with a single orthogonally-connected group of stones.  The White player ('Zip') wins if they connect all four sides of the board with a single group connected both orthogonally and diagonally.")
        (rules "This game is played on a square grid board of any size, though 13x13 or 19x19 are recommended. Then the players take it in turns to place 1-3 White stones each turn until one decides to pass; that player then becomes White, and the other becomes Black.  After that, Black places two stones per turn on any empty point, while White places just one White stone per turn.  If Black connects any two sides of the board with a single orthogonally-connected group, they win; White wins if they connect all four sides with a group connected either orthogonally or diagonally.

        During the initial chicken ballot phase, you may add stones by clicking on available spaces, or skip the rest of your placements (by choosing the Next Player action).  Alternatively, you may Pass at the start of your turn to take White.  After that, play continues with White playing one stone and Black playing two, until one player forms a connection (draws are impossible).")
        (source "<a href=\"https://boardgamegeek.com/boardgame/298409/pippinzip\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>")
        (version "1.3.0")
        (classification "board/space/connection")
        (author "Craig Duncan, Jo√£o Pedro Neto, Bill Taylor")
        (credit "Eric Silverman")
        (date "2020")
        }
    )

    (graphics {
        (board Style Go)
        (player Colour P1 (colour Black))
        (player Colour P2 (colour White))
    })
    (ai
        "Pippinzip (Zipline variant)_ai"
    )
)

)
