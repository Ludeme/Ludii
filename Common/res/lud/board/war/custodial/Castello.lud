(define "NumMaxCapture" 5)

(define "NotEmptyAndNoCastle"
    (and
        (!= (what at:(between)) (id "Castle0"))
        (not (is Empty (between)))
    )
)

(define "CaptureEnemyPiece"
    (apply
        (if
            (= (who at:(between)) (next))
            (remove (between))
        )
    )
)

(define "EmptyAndNotVisited"
    (and
        (is Empty (to))
        (not (is Visited (to)))
    )
)

(define "CanJumpAgain"
    (can Move
        (hop
            (from (last To))
            Orthogonal
            (between
                if:(if (< (counter) (- "NumMaxCapture" 1))
                    "NotEmptyAndNoCastle"
                    (is Friend (who at:(between)))
                )
                "CaptureEnemyPiece"
            )
            (to if:"EmptyAndNotVisited")
        )
    )
)

(define "JumpAgain"
    (move
        Hop
        (from (last To))
        Orthogonal
        (between
            if:(if
                (< (counter) "NumMaxCapture")
                "NotEmptyAndNoCastle"
                (is Friend (who at:(between)))
            )
            "CaptureEnemyPiece"
        )
        (to if:"EmptyAndNotVisited")
        (then
            (if
                "CanJumpAgain"
                (moveAgain)
                (set Counter)
            )
        )
    )
)

(define "CaptureCastleAndStoreItTo"
    (surround
        (from (last To))
        Orthogonal
        (between
            if:(= (what at:(between)) (id "Castle0"))
            (apply (fromTo (from (between)) (to #1)))
        )
        (to if:(is Friend (who at:(to))))
        except:1
    )
)

(define "StorageLeftCastle" (handSite Mover))

(define "StorageRightCastle" (handSite Mover 2))

(define "StorageMiddleCastle" (handSite Mover 1))

//------------------------------------------------------------------------------

(game "Castello"
    (players 2)
    (equipment {
        (board (rectangle 15 21))
        (piece "Pawn" Each
            (or
                (move
                    Hop
                    Orthogonal
                    (between
                        if:"NotEmptyAndNoCastle"
                        "CaptureEnemyPiece"
                    )
                    (to if:(is Empty (to)))
                    (then
                        (if
                            "CanJumpAgain"
                            (moveAgain)
                            (set Counter)
                        )
                    )
                )
                (move Step Orthogonal (to if:(is Empty (to))))
            )
        )
        (piece "Castle" Neutral)
        (hand Each size:3)
        (regions "LeftPart" (expand (sites Left) steps:6))
        (regions "RightPart" (expand (sites Right) steps:6))
        (regions "Middle" (expand (sites Centre) ))
        }
    )
    (rules
        (start {
            (place "Pawn1" (expand (sites Left)))
            (place "Pawn2" (expand (sites Right)))
            (place "Castle0" (sites {"G2" "F6" "G10" "F14" "K3" "K8" "K13" "P2" "O6" "P10" "O14"}))
        })
        (play
            (if "SameTurn"
                (or
                    "JumpAgain"
                    (move Pass)
                )
                (forEach Piece)
                (then (and
                        (if (is In (last To) (sites "LeftPart"))
                            (if (< (count Cell at:(handSite Mover)) 3)
                                ("CaptureCastleAndStoreItTo" "StorageLeftCastle")
                            )
                            (if (is In (last To) (sites "RightPart"))
                                ("CaptureCastleAndStoreItTo" "StorageRightCastle")
                                (if (is In (last To) (sites "Middle"))
                                    (if (> (count Cell at:(handSite Mover 2)) 0)
                                        ("CaptureCastleAndStoreItTo" "StorageMiddleCastle")
                                    )
                                    ("CaptureCastleAndStoreItTo" "StorageMiddleCastle")
                                )
                            )
                        )
                        (set Counter)
                    )
                )
            )
        )
        (end {
            (if (< (count Pieces Next) 3) (result Mover Win))
            (if
                (> (count in:(sites Hand Mover))
                    3
                )
                (result Mover Win)
            )
        })
    )
)

(metadata

    (info
        {
        (description "Invented by Carl Renström in 1971, Castello is a game in which players must capture certain spaces on the board, known as \"castles.\"")
        (rules "There are 30 game-pieces for each player and eleven castles. The gameboard is divided into three sections: homes and center section. Object of the game is to capture four castles (among those of the central section and the other side) or 28 pawns of your opponent. In a turn a player moves one of their pieces, horizontally, vertically. A pawn can step to an adjacent empty cell. Additionally a pawn can jump over another pawn as long as the square behind that pawn is free. Multiple jumps are allowed and all enemy pawns are captured this way and removed from the deck. A pawn can capture a maximum of five enemy pieces, and his movement ends after the fifth piece is captured. A castle is conquered when it is surrounded by three pawns.")
        (source "Le Livre des Jeux de Pions, Michel Boutin, Page 41")
        (version "1.3.0")
        (classification "board/war/custodial")
        (author "Carl Renström")
        (publisher "Alga, Brio AB")
        (credit "Eric Piette")
        (date "1971")
        }
    )

    (graphics {
        (player Colour P1 (colour Red))
        (player Colour P2 (colour Black))
        (board Colour InnerEdges (colour 0 0 0 0))
        (board Colour OuterEdges (colour 0 0 0))
        (board Colour Phase0 (colour 222 20 40))
        (board Colour Phase1 (colour 212 175 55))
        (board Colour Symbols (colour 0 0 0))
        (region Colour "LeftPart" Edge (colour Black))
        (region Colour "RightPart" Edge (colour Black))
        (board Checkered)
    })

    (ai
        "Castello_ai"
    )

)
