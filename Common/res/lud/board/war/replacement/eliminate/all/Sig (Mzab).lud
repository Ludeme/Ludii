(define "ThrowValue" (mapEntry (count Pips)))

(define "SiteToMoveOnTrack" (trackSite Move steps:(if ("InactivePiece") 1 ("ThrowValue"))))

(define "ActivatePiece" (if (= (state at:(last To)) 1) (set State at:(last To) 0)))

(define "ActivatedPiece" (= (state at:(from)) 0))

(define "InactivePiece" (= (state at:(from)) 1))

(define "CaptureEnemyPiece"
    (apply
        if:(is Enemy (who at:(to)))
        (remove (to))
    )
)

(define "AllPieceInOpponentHome"
    (and
        (= (count Sites in:(difference (sites Occupied by:P1) (sites P2))) 0)
        (= (count Sites in:(difference (sites Occupied by:P2) (sites P1))) 0)
    )
)

//------------------------------------------------------------------------------

(game "Sig (Mzab)"
    (players 2)
    (equipment {
        (board
            (rectangle 4 <Board:size>)
            {
            (track "Track1" "0,E,N1,W,N1,E,N1,W" P1 directed:True)
            (track "Track2" <Board:trackP2> P2 directed:True)
            }
            use:Vertex
        )
        (piece "Stick" Each
            (if (or
                    ("ActivatedPiece")
                    (and (or (= 1 ("ThrowValue")) (= 6 ("ThrowValue"))) ("InactivePiece"))
                )
                (if (!= "SiteToMoveOnTrack" Off)
                    (if (or
                            (is In "SiteToMoveOnTrack" (sites Empty))
                            (is Enemy (who at:"SiteToMoveOnTrack"))
                        )
                        (move
                            (from)
                            (to
                                "SiteToMoveOnTrack"
                                "CaptureEnemyPiece"
                            )
                        )
                    )
                    (then ("ActivatePiece"))
                )
            )
        )
        (regions "AllSites" (sites Board))
        (dice d:2 from:0 num:6)
        (map {(pair 0 6) (pair 1 0) (pair 2 2) (pair 3 1) (pair 4 1) (pair 5 0) (pair 6 6)})
        (regions P1 (sites Bottom))
        (regions P2 (sites Top))
    })
    (rules
        (start {
            (place "Stick1" (sites Bottom) state:1)
            (place "Stick2" (sites Top) state:1)
        })
        (play
            (do (roll)
                next:(forEach Piece)
            )
        )
        (end {
            (if (no Pieces Next) (result Mover Win))
            (if ("AllPieceInOpponentHome")
                (result Mover Draw)
            )
        })
    )
)

//------------------------------------------------------------------------------

(option "Board Size" <Board> args:{ <size> <trackP2>}
    {
    (item "5"       <5> <"19,W,S1,E,S1,W,S1,E"> "Each row has 5 holes.")
    (item "6"       <6> <"23,W,S1,E,S1,W,S1,E"> "Each row has 6 holes.")
    (item "7"       <7> <"27,W,S1,E,S1,W,S1,E"> "Each row has 7 holes.")
    (item "8"       <8> <"31,W,S1,E,S1,W,S1,E"> "Each row has 8 holes.")
    (item "9"       <9> <"35,W,S1,E,S1,W,S1,E"> "Each row has 9 holes.")
    (item "10"       <10> <"39,W,S1,E,S1,W,S1,E"> "Each row has 10 holes.")
    (item "11"      <11> <"43,W,S1,E,S1,W,S1,E"> "Each row has 11 holes.")
    (item "12"       <12> <"47,W,S1,E,S1,W,S1,E"> "Each row has 12 holes.")
    (item "13"      <13> <"51,W,S1,E,S1,W,S1,E"> "Each row has 13 holes.")
    (item "14"       <14> <"55,W,S1,E,S1,W,S1,E"> "Each row has 14 holes.")
    (item "15"      <15> <"59,W,S1,E,S1,W,S1,E"> "Each row has 15 holes.")
    (item "16"       <16> <"63,W,S1,E,S1,W,S1,E"> "Each row has 16 holes.")
    (item "17"       <17> <"67,W,S1,E,S1,W,S1,E"> "Each row has 17 holes.")
    (item "18"       <18> <"71,W,S1,E,S1,W,S1,E"> "Each row has 18 holes.")
    (item "19"       <19> <"75,W,S1,E,S1,W,S1,E"> "Each row has 19 holes.")
    (item "20"       <20> <"79,W,S1,E,S1,W,S1,E"> "Each row has 20 holes.")*
    }
)

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Sig (Mzab) (Observed)" {
        "Board Size/20"
        }
        variations:{"Board Size/5" "Board Size/6" "Board Size/7" "Board Size/8" "Board Size/9" "Board Size/10" "Board Size/11" "Board Size/12" "Board Size/13"
        "Board Size/14" "Board Size/15" "Board Size/16" "Board Size/17" "Board Size/18" "Board Size/19"
        }
    )*

})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Sig is a game played in several parts of Morocco. This version is played by the Mzab people. It is a game of captures that is related to similar games, such as Tab, known in North Africa and Southwest Asia.")
        (rules "Four rows of holes, of any number. Each player has as many pieces as are in one row. The pieces start in the outer row of the board for each player. Six sticks used as dice, with a green side and a white side. The throws are as follows: one white up = 0; two white up = 2; three white up = 1; four white up = 4; five white up = 0; zero white or six white up = 6. Each piece's first move must be with a throw of 1 or 6. This first throw moves the piece one space only. Play moves from left to right in the player's home row, from right to left in the second row, left to right in the third row, and right to left in the opponent's home row. When a player's piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board. The player who captures all of the opponent's pieces wins.")
        (source "Goichon 1927: 60-61.")
        (version "1.3.0")
        (classification "board/war/replacement/eliminate/all")
        (credit "Eric Piette")
        (origin  "This game was played in Morocco, around 1927.")
        }
    )

    (graphics {
        (show Edges Hidden)
        (show Symbol "disc" "AllSites" Vertex fillColour:(colour White) edgeColour:(colour Black) scale:1)
        (piece Colour "Die" state:0 fillColour:(colour Green))
        (piece Scale "Stick" 0.5)

    })

    (ai
        "Sig (Mzab)_ai"
    )
)

