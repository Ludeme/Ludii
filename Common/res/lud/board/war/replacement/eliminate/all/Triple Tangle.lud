(define "MoveVertexToVertex"
    (move Step
        (from Vertex)
        (to if:(is Empty Vertex (to)))
        (then
            (forEach Site
                (intersection
                    (sites Incident Edge of:Vertex at:(last From))
                    (sites Incident Edge of:Vertex at:(last To))
                )
                (if (is Enemy (who Edge at:(site)))
                    (remove Edge (site))
                )
            )
        )
    )
)

(define "MoveVertexToCell"
    (move
        (from Vertex)
        (to Cell
            (intersection
                (sites Empty Cell)
                (sites Incident Cell of:Vertex at:(from))
            )
        )
    )
)

(define "MoveLastCellToEmptyCellOverEmptyEdge"
    (move
        (from Cell (last To))
        (to Cell
            (intersection (sites Empty Cell)
                (sites Incident Cell of:Cell at:(from))
            )
            if:(and
                (= 1
                    (count Sites
                        in:(intersection {
                            (sites Empty Edge)
                            (sites Incident Edge of:Cell at:(from))
                            (sites Incident Edge of:Cell at:(to))
                        })
                    )
                )
                (!= (last From) (to))
            )
        )
    )
)

(define "MoveEdgetoEdge"
    (move Step
        (from Edge)
        (to if:(is Empty Edge (to)))
        (then
            (forEach Site
                (intersection
                    (sites Incident Vertex of:Edge at:(last From))
                    (sites Incident Vertex of:Edge at:(last To))
                )
                (if (is Enemy (who Vertex at:(site)))
                    (remove Vertex (site))
                )
            )
        )
    )
)

(define "MoveEdgetoCell"
    (move
        (from Edge)
        (to Cell
            (intersection
                (sites Empty Cell)
                (sites Incident Cell of:Edge at:(from))
            )
        )
    )
)

(define "MoveCellToEmptyCellOverEdge"
    (move
        (from Cell)
        (to Cell
            (intersection
                (sites Empty Cell)
                (sites Incident Cell of:Cell at:(from))
            )
        )
        (then
            (forEach Site
                (intersection
                    (sites Incident Edge of:Cell at:(last From))
                    (sites Incident Edge of:Cell at:(last To))
                )
                (if (is Enemy (who Edge at:(site)))
                    (remove Edge (site))
                )
            )
        )
    )
)

(define "MoveCellToEnemyCellOverEmptyEdge"
    (move
        (from Cell)
        (to Cell
            (sites Incident Cell of:Cell at:(from))
            if:(and
                (is Enemy (who Cell at:(to)))
                (= 1
                    (count Sites
                        in:(intersection {
                            (sites Empty Edge)
                            (sites Incident Edge of:Cell at:(from))
                            (sites Incident Edge of:Cell at:(to))
                        })
                    )
                )
            )
            (apply
                (remove Cell (to))
            )
        )
        (then (moveAgain))
    )
)

(define "MoveCellToEmptyCellOverVertex"
    (move
        (from Cell)
        (to Cell
            (forEach (sites Empty Cell)
                if:(= 1
                    (count Sites
                        in:(intersection
                            (sites Incident Vertex of:Cell at:(from))
                            (sites Incident Vertex of:Cell at:(site))
                        )
                    )
                )
            )
        )
        (then
            (forEach Site
                (intersection
                    (sites Incident Vertex of:Cell at:(last From))
                    (sites Incident Vertex of:Cell at:(last To))
                )
                (if (is Enemy (who Vertex at:(site)))
                    (remove Vertex (site))
                )
            )
        )
    )
)

(define "MoveCellToEdge"
    (move
        (from Cell)
        (to Edge
            (intersection
                (sites Empty Edge)
                (sites Incident Edge of:Cell at:(from))
            )
        )
    )
)

(define "MoveCellToVertex"
    (move
        (from Cell)
        (to Vertex
            (intersection
                (sites Empty Vertex)
                (sites Incident Vertex of:Cell at:(from))
            )
        )
    )
)

(define "RemoveSiteTypeOccupiedPiece"
    (forEach Site (sites Occupied by:#1 container:"Board" on:#2) (remove #2 (site)))
)

(define "CountPiecesAllSiteTypes"
    (+ {
        (count Pieces Vertex #1)
        (count Pieces Edge #1)
        (count Pieces Cell #1)
    })
)

(define "RemovePlayerLastPiece"
    (if
        (= 1 ("CountPiecesAllSiteTypes" #1))
        (and {
            ("RemoveSiteTypeOccupiedPiece" #1 Vertex)
            ("RemoveSiteTypeOccupiedPiece" #1 Cell)
            ("RemoveSiteTypeOccupiedPiece" #1 Edge)
        })
    )
)

(define "RemoveLastPiece"
    (and {
        ("RemovePlayerLastPiece" P1)
        ("RemovePlayerLastPiece" P2)
        ("RemovePlayerLastPiece" P3)
    })
)

//------------------------------------------------------------------------------

(game "Triple Tangle"
    (players <Players:num>)
    (equipment {
        (board (tiling T3464 1) use:Vertex)
        (piece "Disc" Each)
        }
    )

    (rules
        <Players:start>

        (play
            (if ("SameTurn")
                ("MoveLastCellToEmptyCellOverEmptyEdge")
                (or {
                    (forEach Piece on:Vertex
                        (or
                            ("MoveVertexToVertex")
                            ("MoveVertexToCell")
                        )
                    )

                    (forEach Piece on:Edge
                        (or
                            ("MoveEdgetoEdge")
                            ("MoveEdgetoCell")
                        )
                    )

                    (forEach Piece on:Cell
                        (or {
                            ("MoveCellToEmptyCellOverEdge")
                            ("MoveCellToEnemyCellOverEmptyEdge" )
                            ("MoveCellToEmptyCellOverVertex")
                            ("MoveCellToEdge")
                            ("MoveCellToVertex")
                        })
                    )
                })
                <Players:removeLastPiece>
            )
        )

        <Players:end>
    )
)

//------------------------------------------------------------------------------

(option "Players" <Players> args:{ <num> <start> <removeLastPiece> <end>} {
    (item "2"
        <2>
        <
        (start {
            (place "Disc1" (sites {4 5 0 1}))
            (place "Disc1" Cell 1)
            (place "Disc1" Edge (sites {0 3 4 9}))
            (place "Disc2" (sites {16 17 12 13}))
            (place "Disc2" Cell 11)
            (place "Disc2" Edge (sites {25 29 26 20}))
        })
        >
        <>
        < (end (if (>= 1 ("CountPiecesAllSiteTypes" Next)) (result Mover Win))) >
        "The game is played with 2 players."
    )*

    (item "3"
        <3>
        <
        (start {
            (place "Disc1" (sites {2 4 6 8}))
            (place "Disc1" Cell 3)
            (place "Disc2" (sites {12 13 16 17}))
            (place "Disc2" Cell 11)
            (place "Disc3" (sites {3 5 7 9}))
            (place "Disc3" Cell 4)
        })
        >
        <
        (then ("RemoveLastPiece") )
        >
        <
        (end {
            (if (= ("CountPiecesAllSiteTypes" P1) 0) (result P1 Loss))
            (if (= ("CountPiecesAllSiteTypes" P2) 0) (result P2 Loss))
            (if (= ("CountPiecesAllSiteTypes" P3) 0) (result P3 Loss))
        } )
        >
    "The game is played with 3 players.")
})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "An abstract board game played on the vertices, edges and cells of the board.")
        (rules "Players take turns moving a piece of their colour as follows:

            1. A piece on a vertex can move either:

            1a. To an adjacent empty vertex. The edge it travels over may be empty or occupied (if occupied by an enemy piece, that piece is captured and removed).

            1b. To an empty cell that vertex is part of.

            2. A piece on an edge can move either:

            2a. To a connected empty edge. The vertex it travels over may be empty or occupied (if occupied by an enemy piece, that piece is captured and removed).

            2b. To an empty cell that edge is part of.

            3. A piece in a cell can move either:

            3a. To a neighbouring empty cell which may be connected by an edge or a vertex. The connecting edge or vertex that the piece travels over may be empty or occupied (if occupied by an enemy piece, that piece is captured and removed).

            3b. To step over one of its empty edges into an adjacent cell containing an enemy piece (which is captured), then step out over a different empty edge to another empty cell.

            3c. To an empty vertex or edge belonging to that cell.

            Aim: A player wins if their opponent is reduced to a single piece. An empty edge has no piece on its midpoint. An empty cell has no piece on its centroid.

            Three Player Version:
        In the three player version, any player reduced to a single piece is removed from the game (along with their piece). Last remaining player wins.")
        (source "<a href=\"http://cambolbro.com/games/triple-tangle-rules-1.pdf\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />cambolbro.com</a>")
        (version "1.3.0")
        (classification "board/war/replacement/eliminate/all")
        (author "Cameron Browne")
        (credit "Eric Piette")
        (date "2020")
        }
    )

    (graphics {
        (player Colour P3 (colour Grey))
        (show Edges Diagonal Hidden)
        (board Colour InnerEdges (colour 120 190 240))
        (board Colour OuterEdges (colour 120 190 240))
        (piece Scale "Disc" 0.4)

    })

    (ai
        "Triple Tangle_ai"
    )
)
