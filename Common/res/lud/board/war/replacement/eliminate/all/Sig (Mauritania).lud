(define "ThrowValue" (count Pips))

(define "SiteToMoveOnTrack" (trackSite Move #1 steps:#2))

(define "IsSpecialThrow" (= ("ThrowValue") 4))

(define "ActivatedThrow" (is In ("ThrowValue") (sites {1 8})))

(define "ActivatedPiece" (< 0 (state at:#1)))

(define "ActivePiece" (set State at:#1 1))

(define "MiddleSites" (difference (sites Board) (union (sites Top) (sites Bottom))))

(define "CaptureMove"
    (if (is Enemy (who at:(to)))
        (remove (to))
    )
)

(define "NeverGoInEnemyHome"
    (< (state at:#1) 2)
)

(define "MoveOnLoop"
    (= (state at:#1) 3)
)

(define "MoveBackOnMiddleSites"
    (= (state at:#1) 2)
)

(define "PieceCanBeCapture" (< (state at:(to)) 2))

(define "AllPiecesOutOfHomeAndCanNotBeCaptured"
    (and
        (= 0 (count Sites in:(difference (sites Occupied by:All) ("MiddleSites"))))
        (= 0 (count Sites in:(forEach (sites Occupied by:All) if:(< (state at:(site)) 2))))
    )
)

(define "Move"
    (if ("NeverGoInEnemyHome" (from))
        (or
            (if (<= (var) 0)
                (move
                    (from (from)
                        if:(if
                            ("ActivatedPiece" (from))
                            True
                            ("ActivatedThrow")
                        )
                    )
                    (to
                        ("SiteToMoveOnTrack" "Track" ("ThrowValue"))
                        if:(if (is In (to) ("MiddleSites"))
                            (or (is Empty (to)) (and (is Enemy (who at:(to))) ("PieceCanBeCapture")))
                            (is Empty (to))
                        )
                        (apply ("CaptureMove"))
                    )
                    (then
                        (if (not ("ActivatedPiece" (last To)))
                            ("ActivePiece" (last To) )
                        )
                    )
                )
            )
            (if (or (= ("ThrowValue") 8) (> (var) 0))
                (move
                    (from (from))
                    (to
                        ("SiteToMoveOnTrack" "Track" 1)
                        if:(if (is In (to) ("MiddleSites"))
                            (or (is Empty (to)) (and (is Enemy (who at:(to))) ("PieceCanBeCapture")))
                            (is Empty (to))
                        )
                        (apply ("CaptureMove"))
                    )
                    (then
                        (and
                            (if (not ("ActivatedPiece" (last To)))
                                ("ActivePiece" (last To) )
                            )
                            (if (> (var) 0)
                                (and
                                    (if (> (var) 1)
                                        (moveAgain)
                                    )
                                    (set Var (- (var) 1))
                                )
                                (and
                                    (set Var (- ("ThrowValue") 1))
                                    (moveAgain)
                                )
                            )
                        )
                    )
                )
            )
            (then
                (if (is In (last To) (if (is In (mover) (players Team1)) (sites Top) (sites Bottom)))
                    (set State at:(last To) 2)
                )
            )
        )
        (if ("MoveBackOnMiddleSites" (from))
            (move
                (from (from))
                (to
                    ("SiteToMoveOnTrack" "GoBackTrack" ("ThrowValue"))
                    if:(if (is In (to) ("MiddleSites"))
                        (not (is Friend (who at:(to))))
                        (is Empty (to))
                    )
                    (apply ("CaptureMove"))
                )
                (then
                    (if (is In (last To) ("MiddleSites"))
                        (set State at:(last To) 3)
                    )
                )
            )
            (if ("MoveOnLoop" (from))
                (move
                    (from (from))
                    (to
                        ("SiteToMoveOnTrack" "LoopTrack" ("ThrowValue"))
                        if:(if (is In (to) ("MiddleSites"))
                            (not (is Friend (who at:(to))))
                            (is Empty (to))
                        )
                        (apply ("CaptureMove"))
                    )
                )
            )
        )
    )
)

//------------------------------------------------------------------------------

(game "Sig (Mauritania)"
    (players <Players:num>)
    (equipment {
        (board
            (rectangle 4 <Board:size>)
            <Board:track>
            use:Vertex
        )
        (dice d:2 from:0 num:8)
        (piece "Marker" P1 ("Move"))
        (piece "Stick" P2 ("Move"))
    })
    (rules
        (start
            {
            (place "Marker1" (sites Bottom))
            (place "Stick2" (sites Top))
            <Players:start>
            }
        )
        phases:{
        (phase "MovingPhase"
            (play
                (do (if (<= (var) 0) (roll))
                    next:(if (is In (mover) (players Team1))
                        (forEach Piece P1)
                        (forEach Piece P2)
                    )
                    (then
                        (if ("IsSpecialThrow")
                            (moveAgain)
                        )
                    )
                )
            )
            (nextPhase ("AllPiecesOutOfHomeAndCanNotBeCaptured") "RemovingPhase")
        )
        (phase "RemovingPhase"
            (play
                (do (roll)
                    next:(if (= ("ThrowValue") 4)
                        (move Remove
                            (sites Occupied by:Enemy)
                        )
                    )
                )
            )
        )
        }
        (end  (if (no Pieces Enemy) (result TeamMover Win)))
    )
)

//------------------------------------------------------------------------------

(option "Players" <Players> args:{ <num> <start>} {
    (item "2"    <2>
        <
        (set Team 1 {P1})
        (set Team 2 {P2})
        >
    "The game involves 2 players.")
    (item "4"   <4>
        <
        (set Team 1 {P1 P3})
        (set Team 2 {P2 P4})
        >
    "The game involves 4 players.")*
    (item "6"    <6>
        <
        (set Team 1 {P1 P3 P5})
        (set Team 2 {P2 P4 P6})
        >
    "The game involves 6 players.")
    (item "8"    <8>
        <
        (set Team 1 {P1 P3 P5 P7})
        (set Team 2 {P2 P4 P6 P8})
        >
    "The game involves 8 players.")
    (item "10"    <10>
        <
        (set Team 1 {P1 P3 P5 P7 P9})
        (set Team 2 {P2 P4 P6 P8 P10})
        >
    "The game involves 10 players.")
    (item "12"    <12>
        <
        (set Team 1 {P1 P3 P5 P7 P9 P11})
        (set Team 2 {P2 P4 P6 P8 P10 P12})
        >
    "The game involves 12 players.")
})

(option "Board Size" <Board> args:{ <size> <track>} {
    (item "10"    <10>
        <
        {
        (track "Track1" "9,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "39,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "20,E,S1,W" loop:True P1)
        (track "LoopTrack2" "10,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "39,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "9,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 10 Holes.")
    (item "11"    <11>
        <
        {
        (track "Track1" "10,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "43,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "22,E,S1,W" loop:True P1)
        (track "LoopTrack2" "11,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "43,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "10,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 11 Holes.")
    (item "12"    <12>
        <
        {
        (track "Track1" "11,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "47,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "24,E,S1,W" loop:True P1)
        (track "LoopTrack2" "12,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "47,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "11,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 12 Holes.")
    (item "13"    <13>
        <
        {
        (track "Track1" "12,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "51,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "26,E,S1,W" loop:True P1)
        (track "LoopTrack2" "13,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "51,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "12,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 13 Holes.")
    (item "14"    <14>
        <
        {
        (track "Track1" "13,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "55,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "28,E,S1,W" loop:True P1)
        (track "LoopTrack2" "14,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "55,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "13,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 14 Holes.")
    (item "15"    <15>
        <
        {
        (track "Track1" "14,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "59,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "30,E,S1,W" loop:True P1)
        (track "LoopTrack2" "15,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "59,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "14,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 15 Holes.")
    (item "16"    <16>
        <
        {
        (track "Track1" "15,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "63,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "32,E,S1,W" loop:True P1)
        (track "LoopTrack2" "16,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "63,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "15,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 16 Holes.")
    (item "17"    <17>
        <
        {
        (track "Track1" "16,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "67,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "34,E,S1,W" loop:True P1)
        (track "LoopTrack2" "17,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "67,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "16,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 17 Holes.")
    (item "18"    <18>
        <
        {
        (track "Track1" "17,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "71,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "36,E,S1,W" loop:True P1)
        (track "LoopTrack2" "18,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "71,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "17,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 18 Holes.")
    (item "19"    <19>
        <
        {
        (track "Track1" "18,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "75,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "38,E,S1,W" loop:True P1)
        (track "LoopTrack2" "19,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "75,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "18,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 19 Holes.")
    (item "20"    <20>
        <
        {
        (track "Track1" "19,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "79,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "40,E,S1,W" loop:True P1)
        (track "LoopTrack2" "20,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "79,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "19,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 20 Holes.")*
    (item "21"    <21>
        <
        {
        (track "Track1" "20,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "83,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "42,E,S1,W" loop:True P1)
        (track "LoopTrack2" "21,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "83,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "20,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 21 Holes.")
    (item "22"    <22>
        <
        {
        (track "Track1" "21,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "87,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "44,E,S1,W" loop:True P1)
        (track "LoopTrack2" "22,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "87,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "21,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 22 Holes.")
    (item "23"    <23>
        <
        {
        (track "Track1" "22,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "91,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "46,E,S1,W" loop:True P1)
        (track "LoopTrack2" "23,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "91,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "22,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 23 Holes.")
    (item "24"    <24>
        <
        {
        (track "Track1" "23,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "95,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "48,E,S1,W" loop:True P1)
        (track "LoopTrack2" "24,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "95,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "23,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 24 Holes.")
    (item "25"    <25>
        <
        {
        (track "Track1" "24,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "99,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "50,E,S1,W" loop:True P1)
        (track "LoopTrack2" "25,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "99,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "24,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 25 Holes.")
    (item "26"    <26>
        <
        {
        (track "Track1" "25,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "103,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "52,E,S1,W" loop:True P1)
        (track "LoopTrack2" "26,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "103,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "25,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 26 Holes.")
    (item "27"    <27>
        <
        {
        (track "Track1" "26,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "107,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "54,E,S1,W" loop:True P1)
        (track "LoopTrack2" "27,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "107,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "26,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 27 Holes.")
    (item "28"    <28>
        <
        {
        (track "Track1" "27,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "111,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "56,E,S1,W" loop:True P1)
        (track "LoopTrack2" "28,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "111,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "27,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 28 Holes.")
    (item "29"    <29>
        <
        {
        (track "Track1" "28,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "115,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "58,E,S1,W" loop:True P1)
        (track "LoopTrack2" "29,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "115,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "28,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 29 Holes.")
    (item "30"    <30>
        <
        {
        (track "Track1" "29,W,N1,E,N1,W,N1,E" P1 directed:True)
        (track "Track2" "119,W,S1,E,S1,W,S1,E" P2 directed:True)
        (track "LoopTrack1" "60,E,S1,W" loop:True P1)
        (track "LoopTrack2" "30,E,N1,W" loop:True P2)
        (track "GoBackTrack1" "119,W,S1,E,S1,W" P1 directed:True)
        (track "GoBackTrack2" "29,W,N1,E,N1,W" P2 directed:True)
        }
        >
    "Each row has 30 Holes.")
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Sig (Mauritania) (Described)" {
        "Players/4" "Board Size/20"
        }
        variations:{"Players/2" "Players/6" "Players/8" "Players/10" "Players/12"
        "Board Size/10" "Board Size/11" "Board Size/12" "Board Size/13" "Board Size/14"
        "Board Size/15" "Board Size/16" "Board Size/17" "Board Size/18" "Board Size/19"
        "Board Size/21" "Board Size/22" "Board Size/23" "Board Size/24" "Board Size/25"
        "Board Size/26" "Board Size/27" "Board Size/28" "Board Size/29" "Board Size/30"
        }
    )*

})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Sig is a word used for many games throughout Saharan Africa. This board game is a race game played in the Tagant region of Mauritania. The game is played in the sand, with the central two rows elevated on an artificial dune. ")
        (rules "The board consists of four rows of any number of holes. Two to twelve players, who play on two equal teams. The number of pieces per team is equal to the number of holes in one row. One team plays as pieces of camel dung, the other as sticks. The pieces begin, one in each hole, in the outer rows of the board. Eight sticks, used as dice, with a marked side and a blank side. The values of the throws are equal to the number of marked sides which land face up. A throw of 4 grants the player another throw. Pieces can only be moved for the first time with a throw of 1 or 8. One piece may move one space on a throw of 1, or eight pieces may each move one space on a throw of 8. Once a piece has made its initial move, it may move according to the throws of the sticks. The bottom team's pieces move from right to left in the home row, left to right in the next row, right to left in the third row, and then into the opponent's home row. The top team moves left to right (from their perspective) in their home row, right to left in the next row, left to right in the next row, and into the bottom player's home row. When a team's piece lands on a space in the central two rows occupied by an opponent's piece, the opponent's piece is captured. Pieces cannot be captured in the home rows. When a piece moves into the opponent's home row, they move back into the central two rows, moving in the opposite direction as before. After moving into the home row a piece can no longer be captured, even when it is in the central two rows. Play continues until both team's pieces have moved out of their home row and can no longer be captured. Players then alternate turns throwing the sticks, removing one of the opponent's pieces every time a 4 is thrown. A team wins when only their pieces are left on the board.")
        (source "Béart 1955: 429-430.")
        (version "1.3.0")
        (classification "board/war/replacement/eliminate/all")
        (credit "Eric Piette")
        (origin  "This game was played in Mauritania, around 1955.")
        }
    )

    (graphics {
        (show Edges Hidden)
        (show Symbol "disc" Vertex (sites Board) fillColour:(colour Grey) edgeColour:(colour Black) scale:0.5)
        (piece Scale "Marker" 0.5)
        (piece Scale "Stick" 0.5)
        (piece Colour "Die" state:1 fillColour:(colour Black))
    })

)
