(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "CaptureToPiece"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
            )
        )
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Shatranj al-Husun"
    (players {(player N) (player S)})
    (equipment {
        (board
            (merge {
                (square 10)
                (shift -1 -1 (square 1))
                (shift 10 -1 (square 1))
                (shift -1 10 (square 1))
                (shift 10 10 (square 1))
            })
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Queen" Each
            (move
                Step
                Diagonal
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Elephant" Each
            (move Hop Diagonal
                (between if:True)
                (to
                    if:(or
                        (is Empty (to))
                        (and (is Enemy (who at:(to))) (!= (what at:(to)) (id "Elephant" Next)))
                    )
                    (apply (remove (to)))
                )
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                }
                (then
                    (if (is In (last To) (sites Mover "Promotion"))
                        (promote (last To) (piece "Queen") Mover)
                    )
                )
            )
        )
        (regions "Promotion" P1 (sites Row 10) )
        (regions "Promotion" P2 (sites Row 1) )
        (regions "OppositeExtraSquares" P1 (sites Top) )
        (regions "OppositeExtraSquares" P2 (sites Bottom) )
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 2))
            (place "Pawn2" (sites Row 9))
            (place "Rook1" (sites {"B2" "K2"})) (place "Knight1" (sites {"C2" "J2"})) (place "Elephant1" (sites {"D2" "I2"})) (place "Bishop1" (sites {"E2" "H2"})) (place "King1" coord:"F2") (place "Queen1" coord:"G2")
            (place "Rook2" (sites {"B11" "K11"})) (place "Knight2" (sites {"C11" "J11"})) (place "Elephant2" (sites {"D11" "I11"})) (place "Bishop2" (sites {"E11" "H11"})) (place "King2" coord:"F11") (place "Queen2" coord:"G11")
        })
        (play
            (do
                (forEach Piece)
                ifAfterwards:(not ("IsInCheck" "King" Mover))
            )
        )
        (end {
            (if (is In (where "King" Mover) (sites Mover "OppositeExtraSquares"))
                (result Mover Draw)
            )
            (if (and
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
            (if (no Moves Next) (result Mover Win))
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Shatranj al-Husun is a game known from medieval manuscripts from the work of al-Amuli, a Persian Shatranj expert. It is played on an enlarged board with extra spaces where the Shah can move to force a draw.")
        (aliases {"Citadel Chess"})
        (rules "10x10 board, with an extra square placed diagonally behind each Rukh. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. 1 x Fers (counselor): One square diagonally. 2 x Rukh (rook): Any number of spaces orthogonally. 2x Dabbaba: any number of squares diagonally. 2 x Pil (elephant): Two squares diagonally, jumping over the first. Cannot capture another Pil. 2 x Asb (horse): Moves as a Chess knight. 12 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Fers when reaching the tenth rank. No castling. Stalemate results in win for player causing it. The player who checkmates the king wins. If a player moves their king into one of the extra squares on the opposite side of the board, the game is a draw.
        ")
        (source "Murray 1913: 3343-44.")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chaturanga")
        (credit "Eric Piette")
        (origin  "This game was played in Persia, around 1352.")
        }
    )

    (graphics {
        (board Colour Phase0 (colour 223 178 110))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
    })

    (ai
        "Shatranj al-Husun_ai"
    )
)

