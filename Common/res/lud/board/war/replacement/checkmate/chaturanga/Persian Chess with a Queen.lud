(define "PieceHasMoved"
    (set State at:#1 0)
)

(define "CaptureToPiece"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply
                (remove
                    (to)
                )
            )
        )
    )
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King_noCross" Next)))) )
)

//------------------------------------------------------------------------------

(game "Persian Chess with a Queen"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))
        (piece "King_noCross" Each
            (or {
                (move
                    Step
                    (to
                        if:(not (is Friend (who at:(to))))
                        "CaptureToPiece"
                    )
                    (then
                        (if (and
                                (= 1 (state at:(last To)))
                                (= (last To) (mapEntry "AheadKing" Mover))
                            )
                            (set State at:(last To) 2)
                            (if
                                (!= (state at:(last To)) 0)
                                ("PieceHasMoved" (last To))
                            )
                        )
                    )
                )
                (if (and {
                        (= 1 (state at:(from)))
                        (= 1 (state at:(mapEntry "RookRight" Mover)))
                        (is Empty (mapEntry "KnightKingRightForward" Mover))
                    })
                    (move
                        (from)
                        (to (mapEntry "KnightKingRightForward" Mover))
                        (then
                            (if
                                (!= (state at:(last To)) 0)
                                ("PieceHasMoved" (last To))
                            )
                        )
                    )
                )
                (if (and {
                        (= 1 (state at:(from)))
                        (= 1 (state at:(mapEntry "RookLeft" Mover)))
                        (is Empty (mapEntry "KnightKingLeftForward" Mover))
                    })
                    (move
                        (from)
                        (to (mapEntry "KnightKingLeftForward" Mover))
                        (then
                            (if
                                (!= (state at:(last To)) 0)
                                ("PieceHasMoved" (last To))
                            )
                        )
                    )
                )
                (if (and {
                        (= 2 (state at:(from)))
                        (= 2 (state at:(regionSite (sites Start (piece (id "King" Mover))) index:0)))
                    })
                    (move
                        (from)
                        (to (mapEntry "KnightKingLeftBackward" Mover))
                        (then
                            ("PieceHasMoved" (last To))
                        )
                    )
                )
                (if (and {
                        (= 2 (state at:(from)))
                        (= 3 (state at:(regionSite (sites Start (piece (id "King" Mover))) index:0)))
                    })
                    (move
                        (from)
                        (to (mapEntry "KnightKingRightBackward" Mover))
                        (then
                            ("PieceHasMoved" (last To))
                        )
                    )
                )
                }
            )
        )
        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
                (then
                    (if
                        (= (state at:(last To)) 1)
                        (if (and
                                (is In (last To) (sites Start (piece (id "King" Mover))))
                                (= 2 (state at:(where "King" Mover)))
                            )
                            (if (= (last From) (mapEntry "RookLeft" Mover)) (set State at:(last To) 2) (set State at:(last To) 3))
                            ("PieceHasMoved" (last To))
                        )
                    )
                )
            )
            maxState:3
        )
        (piece "Bishop_noCross" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Ferz_noCross" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Pawn" Each
            (or
                (move Step
                    Forward
                    (to if:(is Empty (to)))
                )
                "CaptureForwardDiagonal"
            )
        )
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (map "AheadKing" {(pair 1 "E2") (pair 2 "E7")})
        (map "KnightKingRightForward" {(pair 1 "G2") (pair 2 "G7")})
        (map "KnightKingLeftForward" {(pair 1 "C2") (pair 2 "C7")})
        (map "KnightKingRightBackward" {(pair 1 "G1") (pair 2 "G8")})
        (map "KnightKingLeftBackward" {(pair 1 "C1") (pair 2 "C8")})
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" coord:"D1") (place "King_noCross1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" coord:"D8") (place "King_noCross2" coord:"E8" state:1)
        })

        (play
            (do (forEach Piece)
                ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))
            )
        )

        (end
            (if (and
                    ("IsInCheck" "King_noCross" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Persian Chess with a Queen—its indigenous name was not recorded—is a game that was played in the nineteenth century in Samarkand, Uzbekistan.")
        (rules "8x8 board. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. 1 x Fers (counselor): Any distance orthogonally or diagonally.]. 2 x Rukh (rook): Any number of spaces orthogonally. 2 x Pil (elephant): Any distance diagonally. 2 x Asb (horse): Moves as a chess knight. 8 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. The first move must be the Fers's Sarbaz, which moves two spaces forward. Castling can happen in three moves, moving the Shah forward or backward once orthogonally and once with the Asb's  move, and moving the Rukh to the Shah's former space. Castling can also be done on the Fers's side, but moving the Rukh to the Fers's space. When a piece moves to a space occupied by an opponent's piece, the opponent's piece is captured. If the Shah can be captured on the opponent's next turn, it is in check. A player's Shah must not be in check at the end of their turn. If this is impossible, it is checkmate and the opponent wins.
        ")
        (source "Markov 2017.")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chaturanga")
        (credit "Eric Piette")
        (origin  "This game was played in Uzbekistan, around 1877.")
        }
    )

    (graphics {
        (piece Scale "Pawn" 0.825)
        (show Check "King")
        (board Style Chess)
    })

)
