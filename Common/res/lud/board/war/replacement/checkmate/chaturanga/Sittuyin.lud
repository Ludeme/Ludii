(define "CaptureToPiece"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

(define "PawnToReplace" (!= 0 (count Sites in:(sites Occupied by:Mover container:"Hand" component:"Pawn"))))

(define "EmptySitesBehindPawnPositions"
    (intersection
        (difference (sites Mover) (union (sites "PawnSites") (sites "NoPawnSites")))
        (sites Empty)
    )
)

(define "ReplaceAPawn"
    (move
        (from (sites Occupied by:Mover container:"Hand" component:"Pawn"))
        (to ("EmptySitesBehindPawnPositions"))
    )
)

(define "PawnWasMovedForward"
    (and (is In (last From) (sites Board)) (= (what at:(last To)) (id "Pawn" Mover)))
)

(define "AnyOwnedSitesOnBoardExceptPawn"
    (difference
        (sites Occupied by:Mover container:"Board")
        (sites Occupied by:Mover container:"Board" component:"Pawn")
    )
)

(define "EmptySiteOnPlayerSideOrOccupiedByOwnedPawn"
    (difference
        (intersection
            (sites Mover)
            (union
                (sites Empty)
                (sites Occupied by:Mover container:"Board" component:"Pawn")
            )
        )
        (sites "NoPawnSites")
    )
)

(define "IfPawnStoreIt"
    (if (is Occupied (to))
        (fromTo
            (from (to))
            (to (handSite Mover 5))
        )
    )
)

(define "AllPiecesOnBoard"
    (= 0
        (count Sites
            in:(union
                (sites Occupied by:P1 container:"Hand")
                (sites Occupied by:P2 container:"Hand")
            )
        )
    )
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King_noCross" Next)))) )
)

//------------------------------------------------------------------------------

(game "Sittuyin"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8) )
        (hand Each size:6)
        (piece "King_noCross" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Elephant" Each
            (move
                Step
                Forwards
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Pawn" Each
            (or
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                (then
                    (if (is In (last To) (difference (sites "DiagonalSites") (sites Mover "Home")))
                        (promote (last To) (piece "Queen") Mover)
                    )
                )
            )
        )
        (piece "Queen" Each
            (move
                Step
                Diagonal
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (regions "Home" P1 (expand (sites Bottom) steps:3))
        (regions "Home" P2 (expand (sites Top) steps:3))
        (regions "NoPawnSites"
            (union
                (difference (sites Row 3) (expand (sites Right) steps:3))
                (difference (sites Row 4) (expand (sites Left) steps:3))
            )
        )
        (regions "PawnSites"
            (union {
                (difference (sites Row 2) (expand (sites Right) steps:3))
                (difference (sites Row 3) (expand (sites Left) steps:3))
                (difference (sites Row 4) (expand (sites Right) steps:3))
                (difference (sites Row 5) (expand (sites Left) steps:3))
            })
        )
        (regions "DiagonalSites"
            (union
                (union (sites Centre) (expand (sites Corners) steps:1))
                (sites {"C6" "F6" "F3" "C3"})
            )
        )
        (map "KingInitPos" {
            (pair P1 (coord "G2"))
            (pair P2 (coord "B7"))
        })
    })
    (rules
        (start {
            (place "Pawn1" (difference (sites Row 2) (expand (sites Right) steps:3)))
            (place "Pawn1" (difference (sites Row 3) (expand (sites Left) steps:3)))
            (place "Pawn2" (difference (sites Row 4) (expand (sites Right) steps:3)))
            (place "Pawn2" (difference (sites Row 5) (expand (sites Left) steps:3)))
            (place "King_noCross1" (handSite P1)) (place "King_noCross2" (handSite P2))
            (place "Queen1" (handSite P1 1)) (place "Queen2" (handSite P2 1))
            (place "Elephant1" (handSite P1 2) count:2) (place "Elephant2" (handSite P2 2) count:2)
            (place "Knight1" (handSite P1 3) count:2) (place "Knight2" (handSite P2 3) count:2)
            (place "Rook1" (handSite P1 4) count:2) (place "Rook2" (handSite P2 4) count:2)
        })
        phases:{
        (phase "PlaceKing"
            (play
                (move
                    (from (sites Occupied by:Mover container:"Hand" component:"King_noCross"))
                    (to (mapEntry "KingInitPos" Mover))
                )
            )
            (nextPhase Mover "PlaceFirstElephant")
        )
        (phase "PlaceFirstElephant"
            (play
                (move
                    (from (sites Occupied by:Mover container:"Hand" component:"Elephant"))
                    (to (sites Around (mapEntry "KingInitPos" Mover)))
                )
            )
            (nextPhase Mover "PlaceOtherPieces")
        )
        (phase "PlaceOtherPieces"
            (play
                (if ("PawnToReplace")
                    ("ReplaceAPawn")
                    (or
                        (if ("AllPiecesOnBoard")
                            (or
                                (forEach Piece "Pawn" "StepForwardToEmpty") // Move Forward a pawn to begin the playing phase.
                                (move
                                    (from ("AnyOwnedSitesOnBoardExceptPawn"))
                                    (to
                                        ("EmptySiteOnPlayerSideOrOccupiedByOwnedPawn")
                                        (apply ("IfPawnStoreIt"))
                                    )
                                    (then (if ("PawnToReplace") (moveAgain)))
                                )
                            )
                        )
                        (move
                            (from (sites Occupied by:Mover container:"Hand"))
                            (to
                                ("EmptySiteOnPlayerSideOrOccupiedByOwnedPawn")
                                (apply ("IfPawnStoreIt"))
                            )
                            (then (if ("PawnToReplace") (moveAgain)))
                        )
                    )
                )
            )
            (nextPhase ("PawnWasMovedForward") "Playing")
        )
        (phase "Playing"
            (play
                (do
                    (forEach Piece)
                    ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))
                )
            )
            (end
                (if (and
                        ("IsInCheck" "King_noCross" Next)
                        ("NextCanNotMove")
                    )
                    (result Mover Win)
                )
            )
        )
        }

    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Sittuyin is a game derived from Indian Chaturanga. It differs from similar games in that it begins with placement phase, in which pieces are placed on the board as the players see fit. In the nineteenth and early twentieth century, it was most frequently played by the elderly.")
        (aliases {"Sitturin" "Sitbuyin" "Chedreen" "Chit-tha-reen"})
        (rules "8x8 board, with diagonals drawn in the 2x2 squares in each corner, as well as the diagonals of the entire board. Each player has a complement of pieces, with special moves as follows: Min-gyi (x1, \"Great King\"): moves one space in any direction; Sit-ké (x1, \"Lieutenant-General\"): moves one space diagonally; Sin (x2, \"Elephant\"): moves one space diagonally or orthogonally forward; Myin (x2, \"Horse\"): moves as a Chess knight; Yattah (x2, \"Chariot\"): moves orthogonally any distance; Nè (x8): moves one space orthogonally forward or one space forward diagonally to capture. Promotes to Sit-kè on the next turn after moving to one of the spaces with a diagonal on the opponent's side of the board. At the beginning of the game, the board is laid out with the four of the Nè in the left half of the third third row of squares, and four in the right half of the fourth row of squares. Players alternate turns placing the remaining pieces. The Min-gyi are placed in the second space from the right in the second row, and a Sin must be placed next to it. If a player wishes to place one of their pieces in a spot occupied by a Nè, they may do so and place the Nè elsewhere behind the rows of Nè. When all of the pieces are placed, players may continue alternating turns rearranging pieces, one at a time, as they see fit. When one player is satisfied with their pieces, they move a Nè forward and the rearrangement phase ends. Players alternate turns moving their pieces according to their assigned movements. Pieces are captured when an player's piece lands on a space occupied by an opponent's piece. The Min-gyi is in check when it can be taken on the opponent's next turn; it must not remain in check at the end of the player's subsequent turn. The goal is to checkmate the Min-gyi, where it cannot move out of check. A move which causes a stalemate is not allowed. ")
        (source "Murray 1913: 111-113.")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chaturanga")
        (credit "Eric Piette")
        (origin  "This game was played in Myanmar, from around 1795 to 1798.")
        }
    )

    (graphics {
        (piece Scale "Pawn" 0.825)
        (show Check "King_noCross")
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (board Colour Symbols (colour Black))
        (board Colour Phase0 (colour 222 173 123))
        (show Line { {0 80} {72 8} {18 2} {6 26} {78 62} {54 74}} scale:2.0)
    })

    (ai
        "Sittuyin_ai"
    )
)

