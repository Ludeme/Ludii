(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "CaptureToPiece"
    (apply
        (remove
            (to)
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Chex"
    (players {(player N) (player S)})

    (equipment {
        (boardless Square)
        (hand Each)

        (tile "Pawn" Each numSides:4
            (or {
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
            })
        )

        (tile "Rook" Each numSides:4
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (tile "King" Each numSides:4
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (tile "Bishop" Each numSides:4
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (tile "Knight" Each numSides:4
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (tile "Queen" Each numSides:4
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
    })

    (rules
        (start {
            (place Random
                {
                (count "Pawn1" 8) (count "Rook1" 2) (count "Knight1" 2)
                (count "Bishop1" 2) (count "Queen1" 1) (count "King1" 1)
                }
                (handSite 1)
            )
            (place Random
                {
                (count "Pawn2" 8) (count "Rook2" 2) (count "Knight2" 2)
                (count "Bishop2" 2) (count "Queen2" 1) (count "King2" 1)
                }
                (handSite 2)
            )
            (forEach Value min:0 max:(topLevel at:(handSite 1))
                (set Hidden What at:(handSite 1) level:(value) to:P1)
            )

            (forEach Value min:0 max:(topLevel at:(handSite 1))
                (set Hidden What at:(handSite 1) level:(value) to:P2)
            )

            (forEach Value min:0 max:(topLevel at:(handSite 2))
                (set Hidden What at:(handSite 2) level:(value) to:P1)
            )

            (forEach Value min:0 max:(topLevel at:(handSite 2))
                (set Hidden What at:(handSite 2) level:(value) to:P2)
            )
        })
        (play
            (if "SameTurn"
                (if (= (count Moves) 1)
                    (move
                        (from (handSite (mover)))
                        (to (centrePoint))
                    )
                    (do (move
                            (from (handSite (mover)))
                            (to
                                (sites Around (union (sites Occupied by:P1 container:"Board") (sites Occupied by:P2 container:"Board")) Empty)
                            )
                        )
                        ifAfterwards:(not ("IsInCheck" "King" Mover))
                    )
                )
                (or
                    (if (!= (what at:(handSite (mover))) 0)
                        (move
                            Select
                            (from (handSite (mover)))
                            (then
                                (and {
                                    (moveAgain)
                                    (set Hidden What at:(last To) level:(topLevel at:(last To)) False to:P1)
                                    (set Hidden What at:(last To) level:(topLevel at:(last To)) False to:P2)
                                } )
                            )
                        )
                    )
                    (do
                        (forEach Piece)
                        ifAfterwards:(and (= 1 (count Groups)) (not ("IsInCheck" "King" Mover)))
                    )
                )
            )
        )

        (end
            {
            (if (and
                    {
                    (not
                        (can Move
                            (if (!= (what at:(handSite (mover))) 0) (move Select (from (handSite (mover)))))
                        )
                    )
                    (not (= (where "King" Next) Off))
                    ("IsInCheck" "King" Next)
                    (not
                        (can Move
                            (do
                                (forEach Piece Next)
                                ifAfterwards:(and
                                    (= 1 (count Groups))
                                    (not ("IsInCheck" "King" Next))
                                )
                            )
                        )
                    )
                    }
                )
                (result Mover Win)
            )
            (if (and {
                    "SameTurn"
                    ("IsInCheck" "King" Mover)
                    (not
                        (can Move
                            (do
                                (move
                                    (from (handSite (mover)))
                                    (to
                                        (sites
                                            Around
                                            (union
                                                (sites Occupied by:P1 container:"Board")
                                                (sites Occupied by:P2 container:"Board")
                                            )
                                            Empty
                                        )
                                    )
                                )
                                ifAfterwards:(not ("IsInCheck" "King" Mover))
                            )
                        )
                    )
                })
                (result Next Win)
            )
            (if (no Moves Mover) (result Mover Draw))
            }
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (aliases {"Chess Cards"})
        (rules "The 32 pieces in Chex represent the 16 chess pieces on each side of a normal chess game. Each player shuffles his own 16 tiles and places them face down, then white draws his top tile and places it, with the piece oriented so it looks upright to him. Black then draws the top tile in his pile and places it so that it touches white's piece, either orthogonally or diagonally, and oriented so that it looks upright to him.

            At that point, white can either add another piece or move his piece on the board. A move must be a legal chess move and may not separate any element of the board; all pieces much remain touching, even if just diagonally, when a move has ended. Thus you can \"pin\" a piece by placing a new piece on the far corner of a piece already in play.

        The game ends in checkmate or stalemate, with a stalemate occurring when you must place your king into check when you draw it.")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (author "David L. Smith")
        (publisher "IQ Products")
        (credit "Eric Piette")
        (date "1982")
        }
    )

    (graphics {
        (show Check "King")
        (player Colour P1 (colour VeryLightGrey))
        (piece Foreground "Pawn" image:"Pawn" fillColour:(colour White) scale:0.9)
        (piece Foreground "Knight" image:"Knight" fillColour:(colour White) scale:0.9)
        (piece Foreground "Rook" image:"Rook" fillColour:(colour White) scale:0.9)
        (piece Foreground "Bishop" image:"Bishop" fillColour:(colour White) scale:0.9)
        (piece Foreground "Queen" image:"Queen" fillColour:(colour White) scale:0.9)
        (piece Foreground "King" image:"King" fillColour:(colour White) scale:0.9)
    })

    (ai
        "Chex_ai"
    )

)
