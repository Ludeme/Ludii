(define "CaptureToPiece"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King_noCross" Next)))) )
)

(define "KnightOnlyCapture"
    (move
        Leap
        "KnightWalk"
        (to
            if:(and (is Enemy (who at:(to))) (= (what at:(to)) #1))
            "CaptureToPiece"
        )
    )
)

(define "RookOnlyCapture"
    (move
        Slide
        Orthogonal
        (to
            if:(is Enemy (who at:(to)))
            (apply
                if:(and (is Enemy (who at:(to))) (= (what at:(to)) #1))
                (if (is Enemy (who at:(to)))
                    (remove
                        (to)
                    )
                )
            )
        )
    )
)

(define "PawnOnlyCapture"
    (move
        Step
        (directions {FR FL})
        (to
            if:(and (is Enemy (who at:(to))) (= (what at:(to)) #1))
            (apply (remove (to)))
        )
    )
)

(define "BishopOnlyCapture"
    (move
        Hop
        Diagonal
        (between if:True)
        (to
            if:(and (is Enemy (who at:(to))) (= (what at:(to)) #1))
            "CaptureToPiece"
        )
    )
)

(define "QueenOnlyCapture"
    (move
        Step
        Diagonal
        (to
            if:(and (is Enemy (who at:(to))) (= (what at:(to)) #1))
            "CaptureToPiece"
        )
    )
)

(define "KingOnlyCapture"
    (move
        Step
        (to
            if:(and (is Enemy (who at:(to))) (= (what at:(to)) #1))
            "CaptureToPiece"
        )
    )
)

//------------------------------------------------------------------------------

(game "Forcado"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))

        (piece "Pawn" Each
            (or
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                (then
                    (if (is In (last To) (sites Mover "Promotion"))
                        (promote (last To) (piece "Ferz_noCross") Mover)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPiece"
                )
            )
        )
        (piece "King_noCross" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Bishop_noCross" Each
            (move
                Hop
                Diagonal
                (between if:True)
                (to
                    if:(or
                        (is Empty (to))
                        (is Enemy (who at:(to)))
                    )
                    "CaptureToPiece"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (piece "Ferz_noCross" Each
            (move
                Step
                Diagonal
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPiece"
                )
            )
        )
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
    })
    (rules
        (start
            {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" coord:"D1") (place "King_noCross1" coord:"E1")
            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" coord:"D8") (place "King_noCross2" coord:"E8")
            }
        )

        (play

            (priority {
                (do (forEach Piece {"Pawn"}           ("PawnOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"}   ("QueenOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}         ("KnightOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}           ("RookOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"}   ("KingOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))

                (do (forEach Piece {"Pawn"}           ("PawnOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"}   ("QueenOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}         ("KnightOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}           ("RookOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"}   ("KingOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))

                (do (forEach Piece {"Pawn"}           ("PawnOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"}   ("QueenOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}         ("KnightOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}           ("RookOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"}   ("KingOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))

                (do  (forEach Piece {"Pawn"}           ("PawnOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do  (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"}   ("QueenOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}         ("KnightOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}           ("RookOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"}   ("KingOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))

                (do (forEach Piece {"Pawn"}           ("PawnOnlyCapture" (id "Pawn" Next)) Mover) 	ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Pawn" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"}   ("QueenOnlyCapture" (id "Pawn" Next)) Mover) 	ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}         ("KnightOnlyCapture" (id "Pawn" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}           ("RookOnlyCapture" (id "Pawn" Next)) Mover)   ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"}   ("KingOnlyCapture" (id "Pawn" Next)) Mover) 	ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))

                (do (forEach Piece) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))

            })

        )

        (end
            (if
                (or
                    (and
                        ("IsInCheck" "King_noCross" Next)
                        ("NextCanNotMove")
                    )
                    (no Moves Next)
                )
                (result Mover Win)
            )
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Forçado is a version of Chess, played in the medieval period where captures are forced. It is recorded in Alfonso X's Libro de los Juegos.")
        (aliases {"Forçado" "Juego de las Donzellas"})
        (rules "8x8 board. The pieces move as follows, with the number per player: 1 x King: moves one space orthogonally or diagonally. 1 x Queen : One square diagonally. 2 x Rook: Any number of spaces orthogonally. 2 x Fil: Two squares diagonally, jumping over the first. Cannot capture another Fil. 2 x Knight: Moves orthogonally one space and then diagonally another space, jumping over any intervening pieces; 8 x Pawns: Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Pawns are promoted to Queen when reaching the eighth rank. No castling. When a piece can be captured, it must be. The highest ranking piece must be captured, and the lowest ranking piece must make the capture if several are able to capture the same piece. The ranking, from highest to lowest, is: King, Rook, Knight, Queen, Fil, Pawn. Stalemate results in a win for player causing it. The player who checkmates the king wins.
        ")
        (source "Libro de los Juegos 5.")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Eric Piette")
        (origin  "This game was played in Spain, around 1283.")
        }
    )

    (graphics {
        (piece Scale "Pawn" 0.825)
        (show Check "King")
        (board Style Chess)
    })

)
