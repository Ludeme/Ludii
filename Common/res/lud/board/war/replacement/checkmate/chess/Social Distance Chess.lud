(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "KingInTheInitialPlace"
    (= (what at:(mapEntry "King" (mover))) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:(last To) 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            "PieceHasMoved"
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DoCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "SmallCastling"
    ("DoCastle" "King" E 4 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRight" W 4 True))))
)

(define "BigCastling"
    ("DoCastle" "King" W 4 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeft" E 5 True))))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (remove
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Social Distance Chess"
    (players {(player N) (player S)})
    (equipment {
        (board (rectangle 8 15))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (map "King" {(pair 1 "I1") (pair 2 "I8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "O1") (pair 2 "O8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        }
    )
    (rules
        (start
            {
            (place "Pawn1" {"A3" "C3" "E3" "G3" "I3" "K3" "M3" "O3"})
            (place "Pawn2" {"A6" "C6" "E6" "G6" "I6" "K6" "M6" "O6"})
            (place "Rook1" {"A1" "O1"} state:1)
            (place "Knight1" {"C1" "M1"})
            (place "Bishop1" {"E1" "K1"})
            (place "Queen1" {"G1"})
            (place "King1"  {"I1"} state:1)
            (place "Rook2" {"A8" "O8"} state:1)
            (place "Knight2" {"C8" "M8"})
            (place "Bishop2" {"E8" "K8"})
            (place "Queen2" {"G8"})
            (place "King2" {"I8"} state:1)
            }
        )

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do
                    (or
                        (forEach Piece)
                        (if (and {
                                "KingInTheInitialPlace"
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover))
                            })
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("DoCastle" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("DoCastle" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )

        (end
            {
            (if (and
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
            (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))
            }
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Social Distance Chess was inspired by the COVID-19 pandemic, during which many of the games in Ludii were implemented. It models social distancing principles in a Chess-like game.")
        (rules "TODO ")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (author "Cameron Browne and Walter Crist")
        (credit "Cameron Browne and Eric Piette")
        (origin  "This game is from Maastricht, the Netherlands, on 25-03-2020.")
        }
    )

    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Social Distance Chess_ai"
    )

)
