(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (and
      (set State at:#1 0)
      (set Hidden at:(#1) to:Next)
    )
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            ("PieceHasMoved" (last To))
            (set Hidden at:(last To) to:Next)
        )
    )
)


(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
          (and {
            // Remember Piece and Coordinate of the Capture
            (set var (what at:(to)))
            (set var "OpponentTo" (to))
            (remove
              (to)
              (then
                (and {
                  // Combine the Coordinate and Piece Type (Pawn/Piece) to produce a Message
                  (if (and (= (var "OpponentTo") (coord:"A1")) (<= (var) 2)) (note "Pawn at A1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A1")) (> (var) 2)) (note "Piece at A1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A2")) (<= (var) 2)) (note "Pawn at A2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A2")) (> (var) 2)) (note "Piece at A2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A3")) (<= (var) 2)) (note "Pawn at A3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A3")) (> (var) 2)) (note "Piece at A3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A4")) (<= (var) 2)) (note "Pawn at A4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A4")) (> (var) 2)) (note "Piece at A4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A5")) (<= (var) 2)) (note "Pawn at A5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A5")) (> (var) 2)) (note "Piece at A5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A6")) (<= (var) 2)) (note "Pawn at A6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A6")) (> (var) 2)) (note "Piece at A6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A7")) (<= (var) 2)) (note "Pawn at A7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A7")) (> (var) 2)) (note "Piece at A7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A8")) (<= (var) 2)) (note "Pawn at A8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"A8")) (> (var) 2)) (note "Piece at A8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"B1")) (<= (var) 2)) (note "Pawn at B1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B1")) (> (var) 2)) (note "Piece at B1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B2")) (<= (var) 2)) (note "Pawn at B2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B2")) (> (var) 2)) (note "Piece at B2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B3")) (<= (var) 2)) (note "Pawn at B3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B3")) (> (var) 2)) (note "Piece at B3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B4")) (<= (var) 2)) (note "Pawn at B4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B4")) (> (var) 2)) (note "Piece at B4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B5")) (<= (var) 2)) (note "Pawn at B5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B5")) (> (var) 2)) (note "Piece at B5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B6")) (<= (var) 2)) (note "Pawn at B6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B6")) (> (var) 2)) (note "Piece at B6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B7")) (<= (var) 2)) (note "Pawn at B7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B7")) (> (var) 2)) (note "Piece at B7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B8")) (<= (var) 2)) (note "Pawn at B8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"B8")) (> (var) 2)) (note "Piece at B8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"C1")) (<= (var) 2)) (note "Pawn at C1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C1")) (> (var) 2)) (note "Piece at C1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C2")) (<= (var) 2)) (note "Pawn at C2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C2")) (> (var) 2)) (note "Piece at C2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C3")) (<= (var) 2)) (note "Pawn at C3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C3")) (> (var) 2)) (note "Piece at C3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C4")) (<= (var) 2)) (note "Pawn at C4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C4")) (> (var) 2)) (note "Piece at C4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C5")) (<= (var) 2)) (note "Pawn at C5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C5")) (> (var) 2)) (note "Piece at C5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C6")) (<= (var) 2)) (note "Pawn at C6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C6")) (> (var) 2)) (note "Piece at C6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C7")) (<= (var) 2)) (note "Pawn at C7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C7")) (> (var) 2)) (note "Piece at C7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C8")) (<= (var) 2)) (note "Pawn at C8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"C8")) (> (var) 2)) (note "Piece at C8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"D1")) (<= (var) 2)) (note "Pawn at D1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D1")) (> (var) 2)) (note "Piece at D1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D2")) (<= (var) 2)) (note "Pawn at D2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D2")) (> (var) 2)) (note "Piece at D2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D3")) (<= (var) 2)) (note "Pawn at D3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D3")) (> (var) 2)) (note "Piece at D3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D4")) (<= (var) 2)) (note "Pawn at D4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D4")) (> (var) 2)) (note "Piece at D4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D5")) (<= (var) 2)) (note "Pawn at D5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D5")) (> (var) 2)) (note "Piece at D5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D6")) (<= (var) 2)) (note "Pawn at D6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D6")) (> (var) 2)) (note "Piece at D6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D7")) (<= (var) 2)) (note "Pawn at D7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D7")) (> (var) 2)) (note "Piece at D7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D8")) (<= (var) 2)) (note "Pawn at D8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"D8")) (> (var) 2)) (note "Piece at D8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"E1")) (<= (var) 2)) (note "Pawn at E1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E1")) (> (var) 2)) (note "Piece at E1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E2")) (<= (var) 2)) (note "Pawn at E2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E2")) (> (var) 2)) (note "Piece at E2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E3")) (<= (var) 2)) (note "Pawn at E3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E3")) (> (var) 2)) (note "Piece at E3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E4")) (<= (var) 2)) (note "Pawn at E4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E4")) (> (var) 2)) (note "Piece at E4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E5")) (<= (var) 2)) (note "Pawn at E5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E5")) (> (var) 2)) (note "Piece at E5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E6")) (<= (var) 2)) (note "Pawn at E6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E6")) (> (var) 2)) (note "Piece at E6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E7")) (<= (var) 2)) (note "Pawn at E7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E7")) (> (var) 2)) (note "Piece at E7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E8")) (<= (var) 2)) (note "Pawn at E8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"E8")) (> (var) 2)) (note "Piece at E8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"F1")) (<= (var) 2)) (note "Pawn at F1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F1")) (> (var) 2)) (note "Piece at F1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F2")) (<= (var) 2)) (note "Pawn at F2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F2")) (> (var) 2)) (note "Piece at F2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F3")) (<= (var) 2)) (note "Pawn at F3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F3")) (> (var) 2)) (note "Piece at F3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F4")) (<= (var) 2)) (note "Pawn at F4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F4")) (> (var) 2)) (note "Piece at F4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F5")) (<= (var) 2)) (note "Pawn at F5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F5")) (> (var) 2)) (note "Piece at F5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F6")) (<= (var) 2)) (note "Pawn at F6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F6")) (> (var) 2)) (note "Piece at F6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F7")) (<= (var) 2)) (note "Pawn at F7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F7")) (> (var) 2)) (note "Piece at F7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F8")) (<= (var) 2)) (note "Pawn at F8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"F8")) (> (var) 2)) (note "Piece at F8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"G1")) (<= (var) 2)) (note "Pawn at G1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G1")) (> (var) 2)) (note "Piece at G1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G2")) (<= (var) 2)) (note "Pawn at G2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G2")) (> (var) 2)) (note "Piece at G2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G3")) (<= (var) 2)) (note "Pawn at G3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G3")) (> (var) 2)) (note "Piece at G3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G4")) (<= (var) 2)) (note "Pawn at G4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G4")) (> (var) 2)) (note "Piece at G4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G5")) (<= (var) 2)) (note "Pawn at G5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G5")) (> (var) 2)) (note "Piece at G5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G6")) (<= (var) 2)) (note "Pawn at G6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G6")) (> (var) 2)) (note "Piece at G6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G7")) (<= (var) 2)) (note "Pawn at G7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G7")) (> (var) 2)) (note "Piece at G7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G8")) (<= (var) 2)) (note "Pawn at G8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"G8")) (> (var) 2)) (note "Piece at G8 captured"))

                  (if (and (= (var "OpponentTo") (coord:"H1")) (<= (var) 2)) (note "Pawn at H1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H1")) (> (var) 2)) (note "Piece at H1 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H2")) (<= (var) 2)) (note "Pawn at H2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H2")) (> (var) 2)) (note "Piece at H2 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H3")) (<= (var) 2)) (note "Pawn at H3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H3")) (> (var) 2)) (note "Piece at H3 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H4")) (<= (var) 2)) (note "Pawn at H4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H4")) (> (var) 2)) (note "Piece at H4 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H5")) (<= (var) 2)) (note "Pawn at H5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H5")) (> (var) 2)) (note "Piece at H5 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H6")) (<= (var) 2)) (note "Pawn at H6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H6")) (> (var) 2)) (note "Piece at H6 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H7")) (<= (var) 2)) (note "Pawn at H7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H7")) (> (var) 2)) (note "Piece at H7 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H8")) (<= (var) 2)) (note "Pawn at H8 captured"))
                  (if (and (= (var "OpponentTo") (coord:"H8")) (> (var) 2)) (note "Piece at H8 captured"))

                  (set Counter)
                })
              )
            )
          })
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DecideToCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        (to
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        (to
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (and {
                (remove
                  (ahead (last To) Backward)
                )
                (if (= (ahead (last To) Backward) (coord:"A4")) (note "Pawn at A4 captured"))
                (if (= (ahead (last To) Backward) (coord:"B4")) (note "Pawn at B4 captured"))
                (if (= (ahead (last To) Backward) (coord:"C4")) (note "Pawn at C4 captured"))
                (if (= (ahead (last To) Backward) (coord:"D4")) (note "Pawn at D4 captured"))
                (if (= (ahead (last To) Backward) (coord:"E4")) (note "Pawn at E4 captured"))
                (if (= (ahead (last To) Backward) (coord:"F4")) (note "Pawn at F4 captured"))
                (if (= (ahead (last To) Backward) (coord:"G4")) (note "Pawn at G4 captured"))
                (if (= (ahead (last To) Backward) (coord:"H4")) (note "Pawn at H4 captured"))
                (if (= (ahead (last To) Backward) (coord:"A5")) (note "Pawn at A5 captured"))
                (if (= (ahead (last To) Backward) (coord:"B5")) (note "Pawn at B5 captured"))
                (if (= (ahead (last To) Backward) (coord:"C5")) (note "Pawn at C5 captured"))
                (if (= (ahead (last To) Backward) (coord:"D5")) (note "Pawn at D5 captured"))
                (if (= (ahead (last To) Backward) (coord:"E5")) (note "Pawn at E5 captured"))
                (if (= (ahead (last To) Backward) (coord:"F5")) (note "Pawn at F5 captured"))
                (if (= (ahead (last To) Backward) (coord:"G5")) (note "Pawn at G5 captured"))
                (if (= (ahead (last To) Backward) (coord:"H5")) (note "Pawn at H5 captured"))
            })
        )
    )
)

(define "CheckType"
  (and
    (if (= (mover) 1) // White Player
      (and {
        // The First Piece on South-Eastern Line of Sight
        (forEach Site (sites LineOfSight Piece at:(where "King" 2) SE)
          (if
            (or
              (or
                // Check for the Queen and the Bishop
                (= (what at:(site)) 11)
                (= (what at:(site)) 7)
              )
              (and
                // Special case with the Pawn that is an one Step away from King (King Coordinate - 7)
                (= (what at:(site)) 1)
                (= (where "King" 2) (+ (site) 7))
              )
            )
            (and {
              (if
                (or
                  // Check in which Board Quartile is King, and based on that decide whether the Attacking Diagonal is longer or shorter
                  (and (< (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                )
                (note "Short diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                )
                (note "Long diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) SW)
          (if
            (or
              (or
                (= (what at:(site)) 11)
                (= (what at:(site)) 7)
              )
              (and
                (= (what at:(site)) 1)
                (= (where "King" 2) (+ (site) 9))
              )
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                )
                (note "Long diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                )
                (note "Short diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) NE)
          (if
            (or
              (= (what at:(site)) 11)
              (= (what at:(site)) 7)
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                )
                (note "Long diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                )
                (note "Short diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) NW)
          (if
            (or
              (= (what at:(site)) 11)
              (= (what at:(site)) 7)
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                )
                (note "Short diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 2)) 4) (>= (column of:(where "King" 2)) 4))
                  (and (>= (row of:(where "King" 2)) 4) (< (column of:(where "King" 2)) 4))
                )
                (note "Long diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) N)
          (if
            (or
              (= (what at:(site)) 11)
              (= (what at:(site)) 3)
            )
            (and {
              (note "File check")
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) S)
          (if
            (or
              (= (what at:(site)) 11)
              (= (what at:(site)) 3)
            )
            (and {
              (note "File check")
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) E)
          (if
            (or
              (= (what at:(site)) 11)
              (= (what at:(site)) 3)
            )
            (and {
              (note "Rank check")
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 2) W)
          (if
            (or
              (= (what at:(site)) 11)
              (= (what at:(site)) 3)
            )
            (and {
              (note "Rank check")
            })
          )
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 N) steps:1 W)) 9)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 W) steps:1 N)) 9)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 W) steps:1 S)) 9)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 S) steps:1 W)) 9)
          (note "Knight check")
        )


        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 S) steps:1 E)) 9)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 E) steps:1 S)) 9)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 E) steps:1 N)) 9)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 2) steps:2 N) steps:1 E)) 9)
          (note "Knight check")
        )

      })
    )
    (if (= (mover) 2) // Black Player
      (and {
        (forEach Site (sites LineOfSight Piece at:(where "King" 1) SE)
          (if
            (or
              (= (what at:(site)) 12)
              (= (what at:(site)) 8)
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                )
                (note "Short diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                )
                (note "Long diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) SW)
          (if
            (or
              (= (what at:(site)) 12)
              (= (what at:(site)) 8)
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                )
                (note "Long diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                )
                (note "Short diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) NE)
          (if
            (or
              (or
                (= (what at:(site)) 12)
                (= (what at:(site)) 8)
              )
              (and
                (= (what at:(site)) 2)
                (= (where "King" 1) (- (site) 9))
              )
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                )
                (note "Long diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                )
                (note "Short diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) NW)
          (if
            (or
              (or
                (= (what at:(site)) 12)
                (= (what at:(site)) 8)
              )
              (and
                (= (what at:(site)) 2)
                (= (where "King" 1) (- (site) 7))
              )
            )
            (and {
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                )
                (note "Short diagonal check")
              )
              (if
                (or
                  (and (< (row of:(where "King" 1)) 4) (>= (column of:(where "King" 1)) 4))
                  (and (>= (row of:(where "King" 1)) 4) (< (column of:(where "King" 1)) 4))
                )
                (note "Long diagonal check")
              )
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) N)
          (if
            (or
              (= (what at:(site)) 12)
              (= (what at:(site)) 4)
            )
            (and {
              (note "File check")
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) S)
          (if
            (or
              (= (what at:(site)) 12)
              (= (what at:(site)) 4)
            )
            (and {
              (note "File check")
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) E)
          (if
            (or
              (= (what at:(site)) 12)
              (= (what at:(site)) 4)
            )
            (and {
              (note "Rank check")
            })
          )
        )

        (forEach Site (sites LineOfSight Piece at:(where "King" 1) W)
          (if
            (or
              (= (what at:(site)) 12)
              (= (what at:(site)) 4)
            )
            (and {
              (note "Rank check")
            })
          )
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 N) steps:1 W)) 10)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 W) steps:1 N)) 10)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 W) steps:1 S)) 10)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 S) steps:1 W)) 10)
          (note "Knight check")
        )


        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 S) steps:1 E)) 10)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 E) steps:1 S)) 10)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 E) steps:1 N)) 10)
          (note "Knight check")
        )

        (if (= (what at: (ahead (ahead (where "King" 1) steps:2 N) steps:1 E)) 10)
          (note "Knight check")
        )

      })
    )
  )
)

(define "CountTries"
  (and {
    (set Score Next 0) // Player's Score represents the Number of Tries
    (forEach Value min:1 max:63
      (if (= (what at: (value)) (next)) // Iterate over all Fields and check if a Pawn of a Next Player is there
        (and {
          (if
            (or
              (and {
                // Check if your Piece can be captured not leaving a King in Check
                (is Friend (who at:(ahead (value) FR)))
                (can Move
                  (do
                      (move Step (from: (value)) FR (to: (ahead (value) FR)))
                      ifAfterwards:(not ("IsInCheck" "King" Next))
                  )
                )
              })
              (and {
                  // Check for En Passant positions
                  (is Pending)
                  (= (ahead (value) FR) (value Pending))
                  (= (what at: (ahead (value) Rightward)) (mover))
                  (can Move
                    (do
                        (move Step (from: (value)) FR (to: (ahead (value) FR)))
                        ifAfterwards:(not ("IsInCheck" "King" Next))
                    )
                  )
              })
            )
            (and {
              // If Condition is true, increase the Try Counter
              (addScore Next 1)
            })
          )
          (if
            // The same Procedure for the Forward-Left Direction
            (or
              (and {
                (is Friend (who at:(ahead (value) FL)))
                (can Move
                  (do
                     (move Step (from: (value)) FL (to: (ahead (value) FL)))
                     ifAfterwards:(not ("IsInCheck" "King" Next))
                  )
                )
              })
              (and {
                  (is Pending)
                  (= (ahead (value) FL) (value Pending))
                  (= (what at: (ahead (value) Leftward)) (mover))
                  (can Move
                    (do
                       (move Step (from: (value)) FL (to: (ahead (value) FL)))
                       ifAfterwards:(not ("IsInCheck" "King" Next))
                    )
                  )
              })
            )
            (and {
              (addScore Next 1)
            })
          )
        })
      )
    )
  })
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply
                (and {
                    // Remember Piece and Coordinate of the Capture
                    (set var (what at:(to)))
                    (set var "OpponentTo" (to))
                    (remove
                        (to)
                        (then
                            (and {
                              // Combine the Coordinate and Piece Type (Pawn/Piece) to produce a Message
                              (if (and (= (var "OpponentTo") (coord:"A1")) (<= (var) 2)) (note "Pawn at A1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A1")) (> (var) 2)) (note "Piece at A1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A2")) (<= (var) 2)) (note "Pawn at A2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A2")) (> (var) 2)) (note "Piece at A2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A3")) (<= (var) 2)) (note "Pawn at A3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A3")) (> (var) 2)) (note "Piece at A3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A4")) (<= (var) 2)) (note "Pawn at A4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A4")) (> (var) 2)) (note "Piece at A4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A5")) (<= (var) 2)) (note "Pawn at A5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A5")) (> (var) 2)) (note "Piece at A5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A6")) (<= (var) 2)) (note "Pawn at A6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A6")) (> (var) 2)) (note "Piece at A6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A7")) (<= (var) 2)) (note "Pawn at A7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A7")) (> (var) 2)) (note "Piece at A7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A8")) (<= (var) 2)) (note "Pawn at A8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"A8")) (> (var) 2)) (note "Piece at A8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"B1")) (<= (var) 2)) (note "Pawn at B1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B1")) (> (var) 2)) (note "Piece at B1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B2")) (<= (var) 2)) (note "Pawn at B2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B2")) (> (var) 2)) (note "Piece at B2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B3")) (<= (var) 2)) (note "Pawn at B3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B3")) (> (var) 2)) (note "Piece at B3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B4")) (<= (var) 2)) (note "Pawn at B4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B4")) (> (var) 2)) (note "Piece at B4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B5")) (<= (var) 2)) (note "Pawn at B5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B5")) (> (var) 2)) (note "Piece at B5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B6")) (<= (var) 2)) (note "Pawn at B6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B6")) (> (var) 2)) (note "Piece at B6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B7")) (<= (var) 2)) (note "Pawn at B7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B7")) (> (var) 2)) (note "Piece at B7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B8")) (<= (var) 2)) (note "Pawn at B8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"B8")) (> (var) 2)) (note "Piece at B8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"C1")) (<= (var) 2)) (note "Pawn at C1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C1")) (> (var) 2)) (note "Piece at C1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C2")) (<= (var) 2)) (note "Pawn at C2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C2")) (> (var) 2)) (note "Piece at C2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C3")) (<= (var) 2)) (note "Pawn at C3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C3")) (> (var) 2)) (note "Piece at C3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C4")) (<= (var) 2)) (note "Pawn at C4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C4")) (> (var) 2)) (note "Piece at C4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C5")) (<= (var) 2)) (note "Pawn at C5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C5")) (> (var) 2)) (note "Piece at C5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C6")) (<= (var) 2)) (note "Pawn at C6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C6")) (> (var) 2)) (note "Piece at C6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C7")) (<= (var) 2)) (note "Pawn at C7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C7")) (> (var) 2)) (note "Piece at C7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C8")) (<= (var) 2)) (note "Pawn at C8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"C8")) (> (var) 2)) (note "Piece at C8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"D1")) (<= (var) 2)) (note "Pawn at D1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D1")) (> (var) 2)) (note "Piece at D1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D2")) (<= (var) 2)) (note "Pawn at D2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D2")) (> (var) 2)) (note "Piece at D2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D3")) (<= (var) 2)) (note "Pawn at D3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D3")) (> (var) 2)) (note "Piece at D3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D4")) (<= (var) 2)) (note "Pawn at D4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D4")) (> (var) 2)) (note "Piece at D4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D5")) (<= (var) 2)) (note "Pawn at D5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D5")) (> (var) 2)) (note "Piece at D5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D6")) (<= (var) 2)) (note "Pawn at D6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D6")) (> (var) 2)) (note "Piece at D6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D7")) (<= (var) 2)) (note "Pawn at D7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D7")) (> (var) 2)) (note "Piece at D7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D8")) (<= (var) 2)) (note "Pawn at D8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"D8")) (> (var) 2)) (note "Piece at D8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"E1")) (<= (var) 2)) (note "Pawn at E1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E1")) (> (var) 2)) (note "Piece at E1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E2")) (<= (var) 2)) (note "Pawn at E2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E2")) (> (var) 2)) (note "Piece at E2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E3")) (<= (var) 2)) (note "Pawn at E3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E3")) (> (var) 2)) (note "Piece at E3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E4")) (<= (var) 2)) (note "Pawn at E4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E4")) (> (var) 2)) (note "Piece at E4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E5")) (<= (var) 2)) (note "Pawn at E5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E5")) (> (var) 2)) (note "Piece at E5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E6")) (<= (var) 2)) (note "Pawn at E6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E6")) (> (var) 2)) (note "Piece at E6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E7")) (<= (var) 2)) (note "Pawn at E7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E7")) (> (var) 2)) (note "Piece at E7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E8")) (<= (var) 2)) (note "Pawn at E8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"E8")) (> (var) 2)) (note "Piece at E8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"F1")) (<= (var) 2)) (note "Pawn at F1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F1")) (> (var) 2)) (note "Piece at F1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F2")) (<= (var) 2)) (note "Pawn at F2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F2")) (> (var) 2)) (note "Piece at F2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F3")) (<= (var) 2)) (note "Pawn at F3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F3")) (> (var) 2)) (note "Piece at F3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F4")) (<= (var) 2)) (note "Pawn at F4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F4")) (> (var) 2)) (note "Piece at F4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F5")) (<= (var) 2)) (note "Pawn at F5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F5")) (> (var) 2)) (note "Piece at F5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F6")) (<= (var) 2)) (note "Pawn at F6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F6")) (> (var) 2)) (note "Piece at F6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F7")) (<= (var) 2)) (note "Pawn at F7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F7")) (> (var) 2)) (note "Piece at F7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F8")) (<= (var) 2)) (note "Pawn at F8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"F8")) (> (var) 2)) (note "Piece at F8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"G1")) (<= (var) 2)) (note "Pawn at G1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G1")) (> (var) 2)) (note "Piece at G1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G2")) (<= (var) 2)) (note "Pawn at G2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G2")) (> (var) 2)) (note "Piece at G2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G3")) (<= (var) 2)) (note "Pawn at G3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G3")) (> (var) 2)) (note "Piece at G3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G4")) (<= (var) 2)) (note "Pawn at G4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G4")) (> (var) 2)) (note "Piece at G4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G5")) (<= (var) 2)) (note "Pawn at G5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G5")) (> (var) 2)) (note "Piece at G5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G6")) (<= (var) 2)) (note "Pawn at G6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G6")) (> (var) 2)) (note "Piece at G6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G7")) (<= (var) 2)) (note "Pawn at G7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G7")) (> (var) 2)) (note "Piece at G7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G8")) (<= (var) 2)) (note "Pawn at G8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"G8")) (> (var) 2)) (note "Piece at G8 captured"))

                              (if (and (= (var "OpponentTo") (coord:"H1")) (<= (var) 2)) (note "Pawn at H1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H1")) (> (var) 2)) (note "Piece at H1 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H2")) (<= (var) 2)) (note "Pawn at H2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H2")) (> (var) 2)) (note "Piece at H2 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H3")) (<= (var) 2)) (note "Pawn at H3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H3")) (> (var) 2)) (note "Piece at H3 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H4")) (<= (var) 2)) (note "Pawn at H4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H4")) (> (var) 2)) (note "Piece at H4 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H5")) (<= (var) 2)) (note "Pawn at H5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H5")) (> (var) 2)) (note "Piece at H5 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H6")) (<= (var) 2)) (note "Pawn at H6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H6")) (> (var) 2)) (note "Piece at H6 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H7")) (<= (var) 2)) (note "Pawn at H7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H7")) (> (var) 2)) (note "Piece at H7 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H8")) (<= (var) 2)) (note "Pawn at H8 captured"))
                              (if (and (= (var "OpponentTo") (coord:"H8")) (> (var) 2)) (note "Piece at H8 captured"))
                            })
                        )
                    )
                })
            )
        )
    )
)

//------------------------------------------------------------------------------

(game "Kriegspiel"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (and
                          (set Counter)
                          (set Hidden at:(last To) to:Next)
                        )
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )

        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)

            // Hide White Pawns and Pieces
            (set Hidden at:(coord:"A1") to:Next)
            (set Hidden at:(coord:"B1") to:Next)
            (set Hidden at:(coord:"C1") to:Next)
            (set Hidden at:(coord:"D1") to:Next)
            (set Hidden at:(coord:"E1") to:Next)
            (set Hidden at:(coord:"F1") to:Next)
            (set Hidden at:(coord:"G1") to:Next)
            (set Hidden at:(coord:"H1") to:Next)
            (set Hidden at:(coord:"A2") to:Next)
            (set Hidden at:(coord:"B2") to:Next)
            (set Hidden at:(coord:"C2") to:Next)
            (set Hidden at:(coord:"D2") to:Next)
            (set Hidden at:(coord:"E2") to:Next)
            (set Hidden at:(coord:"F2") to:Next)
            (set Hidden at:(coord:"G2") to:Next)
            (set Hidden at:(coord:"H2") to:Next)

            // Hide Black Pawns and Pieces
            (set Hidden at:(coord:"A7") to:Mover)
            (set Hidden at:(coord:"B7") to:Mover)
            (set Hidden at:(coord:"C7") to:Mover)
            (set Hidden at:(coord:"D7") to:Mover)
            (set Hidden at:(coord:"E7") to:Mover)
            (set Hidden at:(coord:"F7") to:Mover)
            (set Hidden at:(coord:"G7") to:Mover)
            (set Hidden at:(coord:"H7") to:Mover)
            (set Hidden at:(coord:"A8") to:Mover)
            (set Hidden at:(coord:"B8") to:Mover)
            (set Hidden at:(coord:"C8") to:Mover)
            (set Hidden at:(coord:"D8") to:Mover)
            (set Hidden at:(coord:"E8") to:Mover)
            (set Hidden at:(coord:"F8") to:Mover)
            (set Hidden at:(coord:"G8") to:Mover)
            (set Hidden at:(coord:"H8") to:Mover)
        })

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover
                  (then
                    (if ("IsInCheck" "King" Next)
                      "CheckType"
                    )
                  )
                )
                (do
                    (or {
                        (forEach Piece)
                        (if (and
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover))
                            )
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    })
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                    (then
                        (and {
                            (if (= (mover) 1) (note "Black's turn"))
                            (if (= (mover) 2) (note "White's turn"))
                            "CountTries"
                            (if ("IsInCheck" "King" Next)
                              "CheckType"
                            )
                        })
                    )
                )
            )
        )

        (end {
            (if (and
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw))
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "In this game each player can see their own pieces, but not those of their opponent. For this reason, it is necessary to have a third person (or computer) act as an umpire, with full information about the progress of the game. Players attempt to move on their turns, and the umpire declares their attempts 'legal' or 'illegal'. If the move is illegal, the player tries again; if it is legal, that move stands. Each player is given information about checks and captures. Since the position of the opponent's pieces is unknown, Kriegspiel is a game of imperfect information.")
        (aliases {"Blind Chess" "Wild 16"})
        (rules "The game is played with three boards, one for each player; the third is for the umpire (and spectators). Each opponent knows the exact position of just their own pieces, and does not know where the opponent's pieces are (but can keep track of how many there are). Only the umpire knows the position of the game. The game proceeds in the following way:
          The umpire announces:
          -'White's [or Black's] turn'.
          -'Pawn at (square) captured', when a pawn is captured. The square of the capture is announced, e.g. Pawn gone on d4, or Pawn captured on d4. (En passant captures are specifically announced as such.)
          -'Piece at (square) captured', when a piece is captured. The square of the capture is announced.
          -'Illegal move' when the attempted move is illegal, given the opponent's position. For example: moving the king into check; moving a queen, rook, bishop, or pawn through squares occupied by the opponent's pieces; advancing a pawn into a square occupied by the opponent's pieces; moving a piece under an absolute pin.
          -'Rank check'.
          -'File check'.
          -'Long-diagonal check' (the longer of the two diagonals, from the king's point of view).
          -'Short-diagonal check'.
          -'Knight check'.
          -'(number)  tries' (number of legal capturing moves using pawns).
          -'Checkmate', 'stalemate', 'draw by repetition', 'draw by insufficient force', '50-move draw'.
          Pawn promotions are not announced. The precise location of the checking piece is not announced (although it may be deduced).
          Illegal move attempts are not announced to the opponent.
        ")
        (source "<a href=\"https://en.wikipedia.org/wiki/Kriegspiel_(chess)\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.3.5")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Nikola Novarlic")
        (origin "Kriegspiel is a chess variant invented by Henry Michael Temple in 1899 and based upon the original Kriegsspiel (German for war game) developed by Georg von Reiswitz in 1812.")
        }
    )

    (graphics {
        (show Check "King")
        (show Score Always " tries")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

)