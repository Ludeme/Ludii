(define "NextCanNotMove"
    (not (can Move
            (do
                (or {
                    (forEach Piece Next)
                    (move (from (sites Occupied by:Next container:"Hand" components:{"Rook" "Bishop" "Knight" "Queen"})) (to (sites Empty)))
                    (move (from (sites Occupied by:Next container:"Hand" component:"Pawn" )) (to (difference (sites Empty) (sites "LastRanks") )))
                    }
                )
                ifAfterwards:(not ("IsInCheck" "King" Next))
            )
        )
    )
)

(define "KingInTheInitialPlace"
    (= (what at:(mapEntry "King" (mover))) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:(last To) 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            "PieceHasMoved"
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (add
                (piece (mapEntry "captured" (what at:(to))))
                (to (mapEntry "where" (what at:(to))))
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DoCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "SmallCastling"
    ("DoCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRight" W 2 True))))
)

(define "BigCastling"
    ("DoCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeft" E 3 True))))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (add
                (piece (mapEntry "captured" (what at:(ahead (last To) Backward))))
                (to (mapEntry "where" (what at:(ahead (last To) Backward))))
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply
                (add
                    (piece (mapEntry "captured" (what at:(to))))
                    (to (mapEntry "where" (what at:(to))))
                )
            )
        )
    )
)

//------------------------------------------------------------------------------

(game "Loop Chess"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))
        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (map "where" { (pair 2 64) (pair 1 70) (pair 4 65) (pair 3 71) (pair 6 66) (pair 5 72) (pair 8 67) (pair 7 73) (pair 10 68) (pair 9 74) (pair 12 69) (pair 11 75)} )
        (map "captured" { (pair 1 2) (pair 2 1) (pair 3 4) (pair 4 3) (pair 5 6) (pair 6 5) (pair 7 8) (pair 8 7) (pair 9 10) (pair 10 9) (pair 11 12) (pair 12 11)})
        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "LastRanks" (union (sites Top) (sites Bottom) ))
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )

        (hand Each size:6)
        }
    )
    (rules
        (start
            {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
            }
        )

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do
                    (or
                        {
                        (move (from (sites Occupied by:Mover container:"Hand" components:{"Rook" "Bishop" "Knight" "Queen"})) (to (sites Empty)))
                        (move (from (sites Occupied by:Mover container:"Hand" component:"Pawn" )) (to (difference (sites Empty) (sites "LastRanks") )))
                        (forEach Piece)
                        (if (and {
                                "KingInTheInitialPlace"
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover))
                            })
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("DoCastle" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("DoCastle" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    })
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )

        (end
            {
            (if (and
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
            (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))
            }
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Loop Chess is a Chess variant that borrows incorporates the reintroduction of captured pieces into Chess.")
        (rules "The rules are the same as for Chess, except instead of moving a piece, a player's turn may be taken by replacing a captured piece on the board on any empty space. This piece is controlled by the player who replaced it. Captured pawns cannot be placed in the first or last row.")
        (source "<a href=\"https://brainking.com/en/GameRules?tp=6\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />brainking</a>")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Eric Piette")
        }
    )

    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Loop Chess_ai"
    )

)
