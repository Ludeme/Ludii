(define "CaptureToPiece"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
            )
        )
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
    )
)

(define "CanNotMove"
    (not (can Move (do (and (forEach Piece #1) (set NextPlayer (player #2))) ifAfterwards:(not ("IsInCheck" "King" #1)))) )
)

(define "RemoveKingIfCheckmate"
    (if (and (is Active #1) (not (is Mover #1)))
        (if
            (and
                ("IsInCheck" "King" #1)
                ("CanNotMove" #1 #2)
            )
            (remove (where (id "King" #1)))
        )
    )
)

(define "EdgesOfVertex"
    (sites Incident Edge of:Vertex at:#1)
)

(define "VerticesInCommon"
    (intersection (sites Incident Vertex of:Cell at:#1)
        (sites Incident Vertex of:Cell at:#2)
    )
)

(define "EdgeInCommon"
    (intersection (sites Incident Edge of:Cell at:#1)
        (sites Incident Edge of:Cell at:#2)
    )
)

(define "NoEdgeBetweenCells"
    (all Sites
        ("EdgeInCommon" #1 #2)
        if:(is Empty Edge (site))
    )
)

(define "EdgeBetweenCells"
    (not
        (all Sites
            ("EdgeInCommon" #1 #2)
            if:(is Empty Edge (site))
        )
    )
)

(define "DirectionBetweenSites" (directions from:#1 to:#2))

(define "NoWallBetweenFromTo"
    (all Sites
        (sites Between (directions Cell from:#1 to:#2) from:#1 fromIncluded:True to:#2)
        if:(not ("EdgeBetweenCells" (site) (ahead (site) (directions Cell from:#1 to:#2))))
    )
)

(define "NoVertexUsedByWallBetweenCells"
    (all Sites
        ("VerticesInCommon" #1 #2)
        if:(all Sites
            ("EdgesOfVertex" (site))
            if:(is Empty Edge (site))
        )
    )
)

(define "VertexUsedByWallBetweenCells"
    (not ("NoVertexUsedByWallBetweenCells" #1 #2))
)

(define "NoWallUsedByVerticesBetweenFromTo"
    (all Sites
        (sites Between (directions Cell from:#1 to:#2) from:#1 fromIncluded:True to:#2)
        if:(not ("VertexUsedByWallBetweenCells" (site) (ahead (site) (directions Cell from:#1 to:#2))))
    )
)

//------------------------------------------------------------------------------

(game "Russian Fortress Chess"
    (players {(player S) (player W) (player N) (player E)})
    (equipment {
        (board
            (merge {
                (square 4)
                (shift 2 2 (square 12))
                (shift 12 0 (square 4))
                (shift 0 12 (square 4))
                (shift 12 12 (square 4))
            })
        )
        (piece "Disc" Shared)
        (piece "King" Each
            (if (is Active (who at:(from)))
                (or
                    (move Step
                        Orthogonal
                        (to if:(and (not (is Friend (who at:(to)))) ("NoEdgeBetweenCells" (from) (to)))
                            ("CaptureToPiece")
                        )
                    )
                    (move Step
                        Diagonal
                        (to if:(and (not (is Friend (who at:(to)))) ("NoVertexUsedByWallBetweenCells" (from) (to)))
                            ("CaptureToPiece")
                        )
                    )
                )
            )
        )
        (piece "Queen" Each
            (if (is Active (who at:(from)))
                (or
                    (move
                        Slide
                        Orthogonal
                        (to
                            if:(is Enemy (who at:(to)))
                            (apply
                                if:("NoWallBetweenFromTo" (from) (to))
                                (if (is Enemy (who at:(to)))
                                    (remove
                                        (to)
                                    )
                                )
                            )
                        )
                    )
                    (move
                        Slide
                        Diagonal
                        (to
                            if:(is Enemy (who at:(to)))
                            (apply
                                if:("NoWallUsedByVerticesBetweenFromTo" (from) (to))
                                (if (is Enemy (who at:(to)))
                                    (remove
                                        (to)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        (piece "Knight" Each
            (if (is Active (who at:(from)))
                (move
                    (from (from))
                    (to
                        (union
                            (intersection
                                (sites Around
                                    (forEach (sites Around (from) Diagonal)
                                        if:("NoVertexUsedByWallBetweenCells" (from) (site))
                                    )
                                    Orthogonal
                                    if:(and ("NoEdgeBetweenCells" (from) (to)) (not (is Friend (who at:(to)))))
                                )
                                (sites Distance Orthogonal from:(from) (exact 3))
                            )
                            (intersection
                                (sites Around
                                    (forEach (sites Around (from) Orthogonal)
                                        if:("NoEdgeBetweenCells" (from) (site))
                                    )
                                    Diagonal
                                    if:(and ("NoVertexUsedByWallBetweenCells" (from) (to)) (not (is Friend (who at:(to)))))
                                )
                                (sites Distance Orthogonal from:(from) (exact 3))
                            )
                        )
                        (apply
                            if:(is Enemy (who at:(to)))
                            (remove (to))
                        )
                    )
                )
            )
        )
        (piece "Bishop" Each
            (if (is Active (who at:(from)))
                (move
                    Slide
                    Diagonal
                    (to
                        if:(is Enemy (who at:(to)))
                        (apply
                            if:("NoWallUsedByVerticesBetweenFromTo" (from) (to))
                            (if (is Enemy (who at:(to)))
                                (remove
                                    (to)
                                )
                            )
                        )
                    )
                )
            )
        )
        (piece "Rook" Each
            (if (is Active (who at:(from)))
                (move
                    Slide
                    Orthogonal
                    (to
                        if:(is Enemy (who at:(to)))
                        (apply
                            if:("NoWallBetweenFromTo" (from) (to))
                            (if (is Enemy (who at:(to)))
                                (remove
                                    (to)
                                )
                            )
                        )
                    )
                )
            )
        )
        (piece "Pawn" Each
            (if (is Active (who at:(from)))
                (or {
                    (if (is In (from) (sites Start (piece (what at:(from)))))
                        "DoubleStep"
                    )
                    (move Step
                        Forward
                        (to if:(and (is Empty (to)) ("NoEdgeBetweenCells" (from) (to))))
                    )
                    (move Step
                        (directions {FR FL})
                        (to if:(and (is Enemy (who at:(to))) ("NoVertexUsedByWallBetweenCells" (from) (to)))
                            (apply (remove (to)))
                        )
                    )
                    }
                    (then
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                    )
                )
            )
        )
        (hand Each size:3)
        (regions "ExtraSquare" P1 (expand origin:181 steps:3))
        (regions "ExtraSquare" P2 (expand origin:191 steps:3))
        (regions "ExtraSquare" P3 (expand origin:174 steps:3))
        (regions "ExtraSquare" P4 (expand origin:0 steps:3))
        (regions "Promotion" P1 (union (sites {"E3".."L3"}) (sites Bottom) ))
        (regions "Promotion" P2 (union (sites {"C5".."C12"}) (sites Left) ))
        (regions "Promotion" P3 (union (sites {"E14".."L14"}) (sites Top) ))
        (regions "Promotion" P4 (union (sites {"N5".."N12"}) (sites Right) ))
    })
    (rules
        (start {
            (place "Disc" Edge (sites {26 35 278 279 300 325 88 89 36 37 391 382 353 344 396 397}))
            (set Team 1 {P1 P3})
            (set Team 2 {P2 P4})
            (place "King1" coord:"H14") (place "King2" coord:"N9")
            (place "King3" coord:"I3")  (place "King4" coord:"C8")
            (place "Queen1" coord:"I14") (place "Queen2" coord:"N8")
            (place "Queen3" coord:"H3")  (place "Queen4" coord:"C9")
            (place "Bishop1" (sites {"G14" "J14"})) (place "Bishop2" (sites {"N7" "N10"}))
            (place "Bishop3" (sites {"G3" "J3"}))    (place "Bishop4" (sites {"C10" "C7"}))
            (place "Knight1" (sites {"F14" "K14"})) (place "Knight2" (sites {"N6" "N11"}))
            (place "Knight3" (sites {"F3" "K3"}))  (place "Knight4" (sites {"C11" "C6"}))
            (place "Rook1" (sites {"E14" "L14"})) (place "Rook2" (sites {"N5" "N12"}))
            (place "Rook3" (sites {"E3" "L3"}))    (place "Rook4" (sites {"C12" "C5"}))
            (place "Pawn1" (sites {"E13".."L13"})) (place "Pawn2" (sites {"M5".."M12"}))
            (place "Pawn3" (sites {"E4".."L4"}))   (place "Pawn4" (sites {"D5".."D12"}))
            (place "Bishop1" (handSite P1)) (place "Bishop2" (handSite P2))
            (place "Bishop3" (handSite P3)) (place "Bishop4" (handSite P4))
            (place "Knight1" (handSite P1 1)) (place "Knight2" (handSite P2 1))
            (place "Knight3" (handSite P3 1))  (place "Knight4" (handSite P4 1))
            (place "Rook1" (handSite P1 2)) (place "Rook2" (handSite P2 2))
            (place "Rook3" (handSite P3 2))    (place "Rook4" (handSite P4 2))
        })
        phases:
        {
        (phase "Placing"
            (play
                (forEach Site (sites Hand Mover)
                    (if (is Occupied (site))
                        (move
                            (from (site))
                            (to (intersection (sites Empty) (sites Mover "ExtraSquare")))
                        )
                    )
                )
            )
            (nextPhase Mover (no Pieces Mover in:(sites Hand Mover)) "Playing")
        )
        (phase "Playing"
            (play
                (if "SameTurn"
                    (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                    (do (forEach Piece) ifAfterwards:(not ("IsInCheck" "King" Mover)))
                    (then
                        (and {
                            ("RemoveKingIfCheckmate" P1 1)
                            ("RemoveKingIfCheckmate" P2 2)
                            ("RemoveKingIfCheckmate" P3 3)
                            ("RemoveKingIfCheckmate" P4 4)
                        })
                    )
                )
            )
        )
        }
        (end {
            (forEach NonMover
                if:(= (where "King" Player) Off)
                (result Player Loss)
            )
            (if (and { (not (is Active P1)) (not (is Active P3)) (is Active P2) }) (result P2 Win))
            (if (and { (not (is Active P1)) (not (is Active P3)) (is Active P4) }) (result P4 Win))
            (if (and { (not (is Active P2)) (not (is Active P4)) (is Active P1) }) (result P1 Win))
            (if (and { (not (is Active P2)) (not (is Active P4)) (is Active P3) }) (result P3 Win))
        } )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Russian Fortress Chess is a game that was played in Russia during the eighteenth and nineteenth centuries.")
        (rules "12x12 board, with yellow and green squares, with four 4x4 extensions overlapping the 2x2 squares in each corner of the board. There are two walls next to each fortress, one on the outer side of the bottom two squares of the left hand side of each fortress and one on the top edge of the two top left squares. Pieces cannot move across the wall or diagonally across the end of the wall. Four players, white and red play as a team, and black and blue as a team. Players are are arranged as follows, clockwise from the top: red, blue, white, black. Each team has the usual complement of Chess pieces, with an extra Knight, Rook, and Bishop, The pieces are as in chess, with the Kings on the players' right, on the central eight squares of each side of the board. The three extra pieces begin in the 4x4 extension at the player's right, placed anywhere they please. Kings move one square orthogonally or diagonally; Queens move any distance orthogonally or diagonally; Bishops move any distance diagonally; Knights move orthogonally one square and then diagonally another square or diagonally one square and then orthogonally one square (this is important for calculating moves near walls), jumping over any intervening pieces; Rooks move orthogonally any distance; Pawns move forward one space orthogonally, or diagonally one space forward to capture. Pawns may move two spaces on their first turn. When a pawn reaches the back row of one of the other players' sides, it is promoted to any piece. When a player moves a piece onto a space occupied by an opponent's piece, the opponent's piece is captured. When a King can be captured on the next turn, it is in check. The King must not be in check at the end of the player's next turn. If this is impossible, it is checkmate and that player's pieces are removed from the game. The team who checkmates both of their opponents wins.")
        (source "Markov 2015.")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Eric Piette")
        (origin  "This game was played in Russia, from around 1800 to 1850.")
        }
    )

    (graphics {
        (piece Scale "Pawn" 0.825)
        (piece Colour "Disc" fillColour:(colour Hidden) strokeColour:(colour Hidden) secondaryColour:(colour Hidden))
        (show Line {{14 24} {146 148} {52 54} {156 182} {20 22} {32 185} {158 218} {216 174}} (colour Black) scale:2)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Checkered)
        (board StyleThickness OuterEdges 2.0)
        (board Colour Phase0 (colour Green))
        (board Colour Phase1 (colour Yellow))
        (board Colour InnerEdges (colour Black))
        (player Colour P1 (colour Red))
        (player Colour P2 (colour Blue))
        (player Colour P3 (colour White))
        (player Colour P4 (colour VeryDarkGrey))
    })

)
