(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next in:(sites Occupied by:Next component:"King"))))) )
)

(define "InTheInitialPlace"
    (= (what at:(mapEntry #1 (mover))) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:(last To) 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            "PieceHasMoved"
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DoCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "SmallLeftCastling"
    ("DoCastle" "KingLeft" E 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeftRight" W 2 True))))
)

(define "SmallRightCastling"
    ("DoCastle" "KingRight" E 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRightRight" W 2 True))))
)

(define "BigLeftCastling"
    ("DoCastle" "KingLeft" W 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeftLeft" E 3 True))))
)

(define "BigRightCastling"
    ("DoCastle" "KingRight" W 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRightRight" E 3 True))))
)

(define "SetEnPassantLocation"
    (then (set Var (last To)))
)

(define "InitialPawnMove"
    (forEach Value min:2 max:4
        (move
            Slide
            Forward
            (between (exact (value)) if:(is Empty (between))
                (apply (set Pending (between)))
            )
            (to if:(is Empty (to)))
            "SetEnPassantLocation"
        )
    )

)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

(define "InLocationEnPassant"
    (is In (to) (sites Pending))
)

(define "LastPawnMoved"
    (var)
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then (remove ("LastPawnMoved")))
    )
)

//------------------------------------------------------------------------------

(game "Double Chess"
    (players {(player N) (player S)})
    (equipment {
        (board (rectangle 12 16))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "InitialPawnMove"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )
        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (map "KingLeft" {(pair 1 "E1") (pair 2 "E12")})
        (map "RookLeftLeft" {(pair 1 "A1") (pair 2 "A12")})
        (map "RookLeftRight" {(pair 1 "H1") (pair 2 "H12")})

        (map "KingRight" {(pair 1 "M1") (pair 2 "M12")})
        (map "RookRightLeft" {(pair 1 "I1") (pair 2 "I12")})
        (map "RookRightRight" {(pair 1 "P1") (pair 2 "P12")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        }
    )
    (rules
        (start
            {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 10))
            (place "Rook1" {"A1" "H1" "I1" "P1"} state:1) (place "Knight1" {"B1" "G1" "J1" "O1"}) (place "Bishop1" {"C1" "F1" "K1" "N1"}) (place "Queen1" {"D1" "L1"}) (place "King1" {"E1" "M1"} state:1)
            (place "Rook2" {"A12" "H12" "I12" "P12"} state:1) (place "Knight2" {"B12" "G12" "J12" "O12"}) (place "Bishop2" {"C12" "F12" "K12" "N12"}) (place "Queen2" {"D12" "L12"}) (place "King2" {"E12" "M12"} state:1)
            }
        )

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (or
                    (do (forEach Piece) ifAfterwards:(not ("IsInCheck" "King" Mover in:(sites Occupied by:Mover component:"King"))))
                    (or
                        (if (and {
                                ("InTheInitialPlace" "KingLeft")
                                ("HasNeverMoved" "KingLeft")
                                (not ("IsInCheck" "King" Mover at:(mapEntry "KingLeft" (mover))))
                            })

                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeftLeft")
                                        (can Move ("DoCastle" "RookLeftLeft" E 3 (is Empty (to))))
                                    )
                                    "BigLeftCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookLeftRight")
                                        (can Move ("DoCastle" "RookLeftRight" W 2 (is Empty (to))))
                                    )
                                    "SmallLeftCastling"
                                )
                            )
                        )

                        (if (and {
                                ("InTheInitialPlace" "KingRight")
                                ("HasNeverMoved" "KingRight")
                                (not ("IsInCheck" "King" Mover at:(mapEntry "KingRight" (mover))))
                            })
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookRightLeft")
                                        (can Move ("DoCastle" "RookRightLeft" E 3 (is Empty (to))))
                                    )
                                    "BigRightCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRightRight")
                                        (can Move ("DoCastle" "RookRightRight" W 2 (is Empty (to))))
                                    )
                                    "SmallRightCastling"
                                )
                            )
                        )
                    )
                )
            )
        )

        (end {
            (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))
            (if (and
                    ("IsInCheck" "King" Next in:(sites Occupied by:Next component:"King"))
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Invented in 1916 by Julian S. Grant Hayward, Double Chess is a Chess variant played on a 12x16 board. Each player has two complete sets of Chess pieces starting along the 16 square edge of the board.")
        (rules "Rules are the same as Chess except pawns may move up to four squares on their first move and kings may only castle on their own half of the board. The player that checkmates one of the opposing kings wins.")
        (source "<a href=\"https://en.wikipedia.org/wiki/Double_chess\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (author "Julian S. Grant Hayward")
        (credit "Eric Piette")
        (date "1916")
        }
    )

    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Double Chess_ai"
    )

)
