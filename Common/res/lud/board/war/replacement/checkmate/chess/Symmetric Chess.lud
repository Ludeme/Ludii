(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:#1 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            ("PieceHasMoved" (last To))
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DecideToCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        (to
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        (to
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 3 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 3 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 2 True)))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (remove
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Symmetric Chess"
    (players {(player N) (player S)})
    (equipment {
        (board (rectangle 8 9))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        // State = 1, means can step or slide, State = 2 means must step, State = 0 means must Slide
        (piece "Bishop" Each
            (or {
                (move
                    Slide
                    (from
                        if:(!= (state at:(from)) 2)
                    )
                    Diagonal
                    (to
                        if:(is Enemy (who at:(to)))
                        "CaptureToPieceAndResetCounter"
                    )
                    (then
                        (and
                            (forEach Site (sites Occupied by:Mover component:"Bishop")
                                (set State at:(site) 2)
                            )
                            (set State at:(last To) 0)
                        )
                    )
                )
                (move
                    Step
                    Orthogonal
                    (to
                        if:(and (not (is Friend (who at:(to)))) (!= (state at:(from)) 0))
                        "CaptureToPieceAndResetCounter"
                    )
                    (then
                        (forEach Site (sites Occupied by:Mover component:"Bishop")
                            (set State at:(site) 0)
                        )
                    )
                )
                }
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "I1") (pair 2 "I8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "I1"} state:1) (place "Knight1" {"B1" "H1"}) (place "Bishop1" {"C1" "G1"} state:1) (place "Queen1" {"D1" "F1"}) (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "I8"} state:1) (place "Knight2" {"B8" "H8"}) (place "Bishop2" {"C8" "G8"} state:1) (place "Queen2" {"D8" "F8"}) (place "King2" coord:"E8" state:1)
        })

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do
                    (or
                        (forEach Piece)
                        (if (and
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover))
                            )
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 2 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )

        (end {
            (if (and
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw))
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Symmetric Chess is played following each and every rules of Chess but making two slight adjustments appropriate to the 9x8 board.")
(rules "1) When castling king moves 3 squares towards either rook. 2) Both bishops of each player cannot run along squares of a same color. One of them must change in such a manner that it transits through squares of the other color. Being in its original square without having been moved before, it will take an orthogonal step towards any of the 3 surrounding squares that are of the other color, provided that these are empty. This special move is called conversion and it must be done as an ordinary move during the game.")
(source "<a href=\"https://www.chessvariants.com/invention/symmetric-chess\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />ChessVariants</a>")
(version "1.3.0")
(classification "board/war/replacement/checkmate/chess")
(credit "Matthew Stephenson")
}
)

(graphics {
    (show Check "King")
    (piece Scale "Pawn" 0.825)
    (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
    (board Style Chess)
})

)
