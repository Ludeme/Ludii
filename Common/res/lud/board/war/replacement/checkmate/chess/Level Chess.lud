(define "CanNotMove"
    (not (can Move (do (and (forEach Piece #1) (set NextPlayer (player #2))) ifAfterwards:(not ("IsInCheck" "King" #1)))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if (is Enemy (who at:(to)))
            (remove 
                (to) 
                (then (set Counter))
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    )   
)

(define "DecideToCastle"
    (move
        Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastlingHor"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastlingHor"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SmallCastlingVer"
    ("DecideToCastle" "King" S 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" N 2 True)))
)

(define "BigCastlingVer"
    ("DecideToCastle" "King" N 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" S 3 True)))
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide 
        Forward 
        (between (exact 2) if:(is Empty (between))) 
        (to if:(is Empty (to))
            (apply if:(>= (+ ("GetSiteLevel" (from)) 1) ("GetSiteLevel" (to))))
        )
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (remove 
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:(is Enemy (who at:(to))) 
            (apply (remove (to)))
        )
    )
)

(define "GetSiteLevel"
    (if 
        (is In (#1) (sites "Level5")) 5
        (if 
            (is In (#1) (sites "Level4")) 4
            (if 
                (is In (#1) (sites "Level3")) 3
                (if 
                    (is In (#1) (sites "Level2")) 2
                    1
                )
            )
        )
    )
)

(define "RemoveKingIfCheckmate"
    (if (and (is Active #1) (not (is Mover #1)))
        (if 
            (and 
                ("IsInCheck" "King" #1)
                ("CanNotMove" #1 #2)
            )
            (remove (where (id "King" #1)))
        )
    )		
)

//------------------------------------------------------------------------------

(game "Level Chess"  
    (players <NumOfPlayers:NumPlayers>)  
    (equipment { 
        (board 
            <NumOfPlayers:BoardShape>
        ) 
        
        (piece "Pawn" Each 
            (if (is Active (who at:(from)))
                (or {
                    (if (is In (from) (sites Start (piece (what at:(from)))))
                        "DoubleStep"
                    )
                    "StepForwardToEmpty" 
                    "CaptureForwardDiagonal"
                    "EnPassant"
                    }
                    (then
                        (and
                            (if (is In (last To) (sites Mover "Promotion")) 
                                (moveAgain)
                            )
                            (set Counter)
                        )
                    )
                )
            )
        )
        
        (piece "Rook" Each 
            (if (is Active (who at:(from)))
                (move
                    Slide 
                    Orthogonal 
                    (to 
                        if:(or (is Enemy (who at:(to))) (and (< ("GetSiteLevel" (from)) ("GetSiteLevel" (to))) (not (is Friend (who at:(to)))) ) )
                        "CaptureToPieceAndResetCounter"
                    ) 
                    "RememberPieceHasMoved"
                )
            )
        )
        (piece "King" Each 
            (if (is Active (who at:(from)))
                (move
                    Step 
                    (to 
                        if:(not (is Friend (who at:(to)))) 
                        "CaptureToPieceAndResetCounter"
                    ) 
                    "RememberPieceHasMoved"
                )
            )
        )
        (piece "Bishop" Each 
            (if (is Active (who at:(from)))
                (move
                    Slide 
                    Diagonal 
                    (to 
                        if:(or (is Enemy (who at:(to))) (and (< ("GetSiteLevel" (from)) ("GetSiteLevel" (to))) (not (is Friend (who at:(to)))) ) )
                        "CaptureToPieceAndResetCounter"
                    ) 
                )
            )
        )
        (piece "Knight" Each 
            (if (is Active (who at:(from)))
                (move
                    (from)
                    (to 
                        (difference
                            (forEach 
                                (sites Board)
                                if:(and { 
                                    (not (is Friend (who at:(site))))
                                    (= 3 (count Steps Orthogonal (from) (site)))
                                })
                            )
                            (sites To (slide (between if:True)))
                        )
                        "CaptureToPieceAndResetCounter"
                    )
                )
            )
        )
        (piece "Queen" Each 
            (if (is Active (who at:(from)))
                (move
                    Slide 
                    (to 
                        if:(or (is Enemy (who at:(to))) (and (< ("GetSiteLevel" (from)) ("GetSiteLevel" (to))) (not (is Friend (who at:(to)))) ) )
                        "CaptureToPieceAndResetCounter"
                    ) 
                ) 
            )
        )
        
        <NumOfPlayers:BoardRegions>
        
        }
    )  
    (rules 
        (start
            { 
            <NumOfPlayers:PieceSetup>
            }
        )
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do 
                    (or 
                        (forEach Piece)
                        (if (and 
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover)) 
                            )
                            (or {
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastlingHor"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastlingHor"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" S 3 (is Empty (to))))
                                    )
                                    "BigCastlingVer"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" N 2 (is Empty (to))))
                                    )
                                    "SmallCastlingVer"
                                )
                            })
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
                (then
                    <NumOfPlayers:CheckMate>
                )
            )
        )
        
        (end
            {
            (forEach NonMover
                if:(= (where "King" Player) Off) 
                (result Player Loss)
            )
            (if (and (<= (count Active) 2) (or (no Moves Mover) (= (counter) (* 50 (count Active))))) (result Mover Draw)) 
            }
        )
    )
)

//------------------------------------------------------------------------------

(option "Players" <NumOfPlayers> args:{ <NumPlayers> <BoardShape> <BoardRegions> <PieceSetup> <CheckMate> }
    {
    (item "4"    	
        <
        {(player N) (player S) (player E) (player W)}
        > 
        <
        (merge 
            (shift 0 3 (rectangle 8 14)) 
            (shift 3 0 (rectangle 14 8))
        ) 
        > 
        <
        (map "King" {(pair 1 "H1") (pair 2 "H14") (pair 3 "A7") (pair 4 "N7")})
        (map "RookLeft" {(pair 1 "D1") (pair 2 "K14") (pair 3 "A11") (pair 4 "N4")})
        (map "RookRight" {(pair 1 "K1") (pair 2 "D14") (pair 3 "A4") (pair 4 "N11")})
        
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        (regions "Promotion" P3 (sites Right) )
        (regions "Promotion" P4 (sites Left) )
        
        (regions "Level2" (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:2) (expand (sites Right) steps:2)})))
        (regions "Level2Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:2) (expand (sites Right) steps:2)}))))
        (regions "Level2Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:2) (expand (sites Right) steps:2)}))))
        
        (regions "Level3" (difference (sites Board) (union {(expand (sites Top) steps:4) (expand (sites Bottom) steps:4) (expand (sites Left) steps:4) (expand (sites Right) steps:4)})))
        (regions "Level3Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:4) (expand (sites Bottom) steps:4) (expand (sites Left) steps:4) (expand (sites Right) steps:4)}))))
        (regions "Level3Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:4) (expand (sites Bottom) steps:4) (expand (sites Left) steps:4) (expand (sites Right) steps:4)}))))
        > 	
        <
        (place "Pawn1" (sites Row 1))
        (place "Pawn2" (sites Row 12))
        (place "Pawn3" (sites Column 1))
        (place "Pawn4" (sites Column 12))
        (place "Rook1" {"D1" "K1"} state:1) (place "Knight1" {"E1" "J1"}) (place "Bishop1" {"F1" "I1"}) (place "Queen1" coord:"G1") (place "King1" coord:"H1" state:1) 
        (place "Rook2" {"D14" "K14"} state:1) (place "Knight2" {"E14" "J14"}) (place "Bishop2" {"F14" "I14"}) (place "Queen2" coord:"G14") (place "King2" coord:"H14" state:1) 
        (place "Rook3" {"A11" "A4"} state:1) (place "Knight3" {"A10" "A5"}) (place "Bishop3" {"A6" "A9"}) (place "Queen3" coord:"A8") (place "King3" coord:"A7" state:1) 
        (place "Rook4" {"N4" "N11"} state:1) (place "Knight4" {"N5" "N10"}) (place "Bishop4" {"N6" "N9"}) (place "Queen4" coord:"N8") (place "King4" coord:"N7" state:1) 
        >		
        <
        (and {
            ("RemoveKingIfCheckmate" P1 1)
            ("RemoveKingIfCheckmate" P2 2)
            ("RemoveKingIfCheckmate" P3 3)
            ("RemoveKingIfCheckmate" P4 4)
        })
        >
    "Four Players.")**
    
    (item "2"    	
        <
        {(player N) (player S)}
        > 
        <
        (square 8)
        > 
        <
        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        
        (regions "Level2" (expand (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:1) (expand (sites Right) steps:1)}))))
        (regions "Level2Phase0" (intersection (sites Phase 0) (expand (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:1) (expand (sites Right) steps:1)})))))
        (regions "Level2Phase1" (intersection (sites Phase 1) (expand (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:1) (expand (sites Right) steps:1)})))))
        
        (regions "Level3" (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:1) (expand (sites Right) steps:1)})))
        (regions "Level3Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:1) (expand (sites Right) steps:1)}))))
        (regions "Level3Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:1) (expand (sites Right) steps:1)}))))
        > 	
        <
        (place "Pawn1" (sites Row 1))
        (place "Pawn2" (sites Row 6))
        (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1) 
        (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1) 
        >		
        <
        (and {
            ("RemoveKingIfCheckmate" P1 1)
            ("RemoveKingIfCheckmate" P2 2)
        })
        >
    "Two Players.")
    
    (item "8"    	
        <
        {(player N) (player E) (player E) (player S) (player S) (player W) (player W) (player N)}
        > 
        <
        (merge {
            (shift 0 3 (rectangle 8 23)) 
            (shift 3 0 (rectangle 23 8))
            (shift 0 12 (rectangle 8 23)) 
            (shift 12 0 (rectangle 23 8))
        }) 
        > 
        <
        (map "King" {(pair 1 "H1") (pair 2 "A7") (pair 3 "A16") (pair 4 "H23") (pair 5 "Q23") (pair 6 "W16") (pair 7 "W7") (pair 8 "Q1")})
        (map "RookLeft" {(pair 1 "D1") (pair 2 "A11") (pair 3 "A20") (pair 4 "K23") (pair 5 "T23") (pair 6 "W13") (pair 7 "W4") (pair 8 "M1")})
        (map "RookRight" {(pair 1 "K1") (pair 2 "A4") (pair 3 "A13") (pair 4 "D23") (pair 5 "M23") (pair 6 "W20") (pair 7 "W11") (pair 8 "T1")})
        
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        (regions "Promotion" P3 (sites Right) )
        (regions "Promotion" P4 (sites Left) )
        (regions "Promotion" P5 (sites Top) )
        (regions "Promotion" P6 (sites Bottom) )
        (regions "Promotion" P7 (sites Right) )
        (regions "Promotion" P8 (sites Left) )
        
        (regions "Level2" (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:2) (expand (sites Right) steps:2)})))
        (regions "Level2Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:2) (expand (sites Right) steps:2)}))))
        (regions "Level2Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:2) (expand (sites Bottom) steps:2) (expand (sites Left) steps:2) (expand (sites Right) steps:2)}))))
        
        (regions "Level3" (difference (sites Board) (union {(expand (sites Top) steps:4) (expand (sites Bottom) steps:4) (expand (sites Left) steps:4) (expand (sites Right) steps:4)})))
        (regions "Level3Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:4) (expand (sites Bottom) steps:4) (expand (sites Left) steps:4) (expand (sites Right) steps:4)}))))
        (regions "Level3Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:4) (expand (sites Bottom) steps:4) (expand (sites Left) steps:4) (expand (sites Right) steps:4)}))))
        
        (regions "Level4" (difference (sites Board) (union {(expand (sites Top) steps:6) (expand (sites Bottom) steps:6) (expand (sites Left) steps:6) (expand (sites Right) steps:6)})))
        (regions "Level4Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:6) (expand (sites Bottom) steps:6) (expand (sites Left) steps:6) (expand (sites Right) steps:6)}))))
        (regions "Level4Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:6) (expand (sites Bottom) steps:6) (expand (sites Left) steps:6) (expand (sites Right) steps:6)}))))
        
        (regions "Level5" (difference (sites Board) (union {(expand (sites Top) steps:8) (expand (sites Bottom) steps:8) (expand (sites Left) steps:8) (expand (sites Right) steps:8)})))
        (regions "Level5Phase0" (intersection (sites Phase 0) (difference (sites Board) (union {(expand (sites Top) steps:8) (expand (sites Bottom) steps:8) (expand (sites Left) steps:8) (expand (sites Right) steps:8)}))))
        (regions "Level5Phase1" (intersection (sites Phase 1) (difference (sites Board) (union {(expand (sites Top) steps:8) (expand (sites Bottom) steps:8) (expand (sites Left) steps:8) (expand (sites Right) steps:8)}))))
        > 	
        <
        (place "Pawn1" (sites {"D2".."K2"}))
        (place "Pawn2" (sites {"B4".."B11"}))
        (place "Pawn3" (sites {"B13".."B20"}))
        (place "Pawn4" (sites {"D22".."K22"}))
        (place "Pawn5" (sites {"M22".."T22"}))
        (place "Pawn6" (sites {"V13".."V20"}))
        (place "Pawn7" (sites {"V4".."V11"}))
        (place "Pawn8" (sites {"M2".."T2"}))
        (place "Rook1" {"D1" "K1"} state:1) (place "Knight1" {"E1" "J1"}) (place "Bishop1" {"F1" "I1"}) (place "Queen1" coord:"G1") (place "King1" coord:"H1" state:1) 
        (place "Rook2" {"A11" "A4"} state:1) (place "Knight2" {"A10" "A5"}) (place "Bishop2" {"A6" "A9"}) (place "Queen2" coord:"A8") (place "King2" coord:"A7" state:1) 
        (place "Rook3" {"A13" "A20"} state:1) (place "Knight3" {"A14" "A19"}) (place "Bishop3" {"A15" "A18"}) (place "Queen3" coord:"A17") (place "King3" coord:"A16" state:1) 
        (place "Rook4" {"D23" "K23"} state:1) (place "Knight4" {"E23" "J23"}) (place "Bishop4" {"F23" "I23"}) (place "Queen4" coord:"G23") (place "King4" coord:"H23" state:1) 
        (place "Rook5" {"M23" "T23"} state:1) (place "Knight5" {"N23" "S23"}) (place "Bishop5" {"O23" "R23"}) (place "Queen5" coord:"P23") (place "King5" coord:"Q23" state:1) 
        (place "Rook6" {"W20" "W13"} state:1) (place "Knight6" {"W19" "W14"}) (place "Bishop6" {"W18" "W15"}) (place "Queen6" coord:"W17") (place "King6" coord:"W16" state:1) 
        (place "Rook7" {"W4" "W11"} state:1) (place "Knight7" {"W10" "W5"}) (place "Bishop7" {"W6" "W9"}) (place "Queen7" coord:"W8") (place "King7" coord:"W7" state:1) 
        (place "Rook8" {"M1" "T1"} state:1) (place "Knight8" {"N1" "S1"}) (place "Bishop8" {"O1" "R1"}) (place "Queen8" coord:"P1") (place "King8" coord:"Q1" state:1) 
        >	
        <
        (and {
            ("RemoveKingIfCheckmate" P1 1)
            ("RemoveKingIfCheckmate" P2 2)
            ("RemoveKingIfCheckmate" P3 3)
            ("RemoveKingIfCheckmate" P4 4)
            ("RemoveKingIfCheckmate" P5 5)
            ("RemoveKingIfCheckmate" P6 6)
            ("RemoveKingIfCheckmate" P7 7)
            ("RemoveKingIfCheckmate" P8 8)
        })
        >
    "Eight Players.")
})

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "A variation of 4-player chess with levels.")
        (rules "All movement of chessman’s are the same, just if you want to go on higher level, you can just go on first reachable chess box of higher level. And on next move, go on that level or to lower levels without restrictions. Knight goes without any restrictions.
            
        Once a player is checkmated their king is removed, but all their other pieces remain on the board as neutral obstacles. Neutral pieces cannot help checkmate other players. If a player cannot make a move when there are more than two players remaining, they skip their turn rather than giving a stalemate.")
        (id "1318")
        (source "<a href=\"http://levelchess.eu/\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />levelchess.eu</a>")
        (version "1.3.3")
        (classification "board/war/replacement/checkmate/chess")
        (author "Ignas Sladkevičius")
        (credit "Matthew Stephenson and Eric Piette")
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        
        (board Checkered)
        (board StyleThickness OuterEdges 2.0)
        (board Colour Phase0 (colour White))
        (board Colour Phase1 (colour Grey))
        (board Colour OuterEdges (colour Black))
        (board Colour InnerEdges (colour Black))
        (region Colour "Level2Phase1" (colour 255 255 150))
        (region Colour "Level3Phase1" (colour 255 150 150))
        (region Colour "Level4Phase1" (colour 150 255 150))
        (region Colour "Level5Phase1" (colour 150 150 255))
        (region Colour "Level2" Edge regionSiteType:Cell (colour Black))
        (region Colour "Level3" Edge regionSiteType:Cell (colour Black))
        (region Colour "Level4" Edge regionSiteType:Cell (colour Black))
        (region Colour "Level5" Edge regionSiteType:Cell (colour Black))
    })
    
    (ai
        "Level Chess_ai"
    )
)
