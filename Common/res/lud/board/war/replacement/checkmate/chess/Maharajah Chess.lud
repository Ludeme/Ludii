(define "NextCanNotMoveToProtect"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" #1 Next)))) )
)

(define "KingInTheInitialPlace"
    (= (what at:(mapEntry "King" (mover))) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:(last To) 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            "PieceHasMoved"
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (remove
                (to)
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DoCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "SmallCastling"
    ("DoCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRight" W 2 True))))
)

(define "BigCastling"
    ("DoCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeft" E 3 True))))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Maharajah Chess"
    (players 2)
    (equipment {
        (board (square 8))

        (piece "Pawn" P2 S
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                }
                (then
                    (set Counter)
                )
            )
        )

        (piece "Rook" P2
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" P2
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" P2
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Knight" P2
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" P2
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (piece "Amazon" P1
            (or
                (move
                    Leap
                    "KnightWalk"
                    (to
                        if:(not (is Friend (who at:(to))))
                        "CaptureToPieceAndResetCounter"
                    )
                )
                (move
                    Slide
                    (to
                        if:(is Enemy (who at:(to)))
                        "CaptureToPieceAndResetCounter"
                    )
                )
            )
        )
        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        }
    )
    (rules
        (start
            {
            (place "Pawn2" (sites Row 6))
            (place "Amazon1" coord:"E1")
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
            }
        )

        (play
            (do
                (or
                    (forEach Piece)
                    (if (and {
                            (is Mover P2)
                            "KingInTheInitialPlace"
                            ("HasNeverMoved" "King")
                            (not ("IsInCheck" "King" Mover))
                        })
                        (or
                            (if (and
                                    ("HasNeverMoved" "RookLeft")
                                    (can Move ("DoCastle" "RookLeft" E 3 (is Empty (to))))
                                )
                                "BigCastling"
                            )
                            (if (and
                                    ("HasNeverMoved" "RookRight")
                                    (can Move ("DoCastle" "RookRight" W 2 (is Empty (to))))
                                )
                                "SmallCastling"
                            )
                        )
                    )
                )
                ifAfterwards:(if (is Mover P1)
                    (not ("IsInCheck" "Amazon" Mover))
                    (not ("IsInCheck" "King" Mover))
                )
            )
        )

        (end
            {
            (if
                (if (is Mover P1)
                    (and
                        ("IsInCheck" "King" Next)
                        ("NextCanNotMoveToProtect" "King")
                    )
                    (and
                        ("IsInCheck" "Amazon" Next)
                        ("NextCanNotMoveToProtect" "Amazon")
                    )
                )
                (result Mover Win)
            )
            (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))
            }
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Maharajah Chess is a Chess variant known since the nineteenth century.")
        (aliases {"Maharajah and the Sepoys" "Shatranj Diwana Shah" "Mad King's Game"})
        (rules "The black player has a normal set of chess pieces. The white player has a single piece which can move either as a queen or as a knight. Black's goal is to checkmate the white piece, White's goal is to checkmate the black king. There is no pawn promotion.")
        (source "<a href=\"https://en.wikipedia.org/wiki/Maharajah_and_the_Sepoys\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.3.0")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Eric Piette")
        }
    )

    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Maharajah Chess_ai"
    )

)
