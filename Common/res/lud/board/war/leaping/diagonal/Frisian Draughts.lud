(define "HopCounter"
    (or
        (do
            (move
                Hop
                (from #1)
                Orthogonal
                (between
                    before:1
                    after:1
                    if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))
                    (apply (remove (between) at:EndOfTurn))
                )
                (to if:(is Empty (to)))
                #2
            )
            ifAfterwards:(is In (last To) (sites Phase 0))
        )

        (move
            Hop
            (from #1)
            Diagonal
            (between
                if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))
                (apply (remove (between) at:EndOfTurn))
            )
            (to if:(is Empty (to)))
            #2
        )
    )
)

(define "IsUnpromoted" (= (what at:(last To)) (id "Counter" Mover)))

(define "JumpToPromotionZone" (is In (last To) (sites Next)) )

(define "HopFrisianSequenceCapture"
    (do
        (move Hop
            All
            (between
                #1
                #2
                if:(is Enemy (who at:(between)))
                (apply (remove (between) #3))
            )
            (to if:(is Empty (to)))
            (then
                (and
                    (if (can Move
                            (do
                                (hop
                                    (from (last To))
                                    All
                                    (between
                                        #1
                                        #2
                                        if:(and
                                            (not (is In (between) (sites ToClear)))
                                            (is Enemy (who at:(between)))
                                        )
                                    )
                                    (to if:(is Empty (to)))
                                )
                                ifAfterwards:(is In (last To) (sites Phase 0))
                            )
                        )
                        (moveAgain)
                    )
                    (forEach Site (sites Occupied by:Mover)
                        (if (!= 0 (state at:(site)))
                            (set State at:(site) 0)
                        )
                    )
                )
            )
        )
        ifAfterwards:(is In (last To) (sites Phase 0))
    )
)

(define "HopFrisianSequenceCaptureAgain"
    (do
        (move Hop
            (from (last To))
            All
            (between
                #1
                #2
                if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))
                (apply (remove (between) #3))
            )
            (to if:(is Empty (to)))
            (then
                (and
                    (if (can Move
                            (do
                                (hop
                                    (from (last To))
                                    All
                                    (between
                                        #1
                                        #2
                                        if:(and
                                            (not (is In (between) (sites ToClear)))
                                            (is Enemy (who at:(between)))
                                        )
                                    )
                                    (to if:(is Empty (to)))
                                )
                                ifAfterwards:(is In (last To) (sites Phase 0))
                            )
                        )
                        (moveAgain)
                    )
                    (forEach Site (sites Occupied by:Mover)
                        (if (!= 0 (state at:(site)))
                            (set State at:(site) 0)
                        )
                    )
                )
            )
        )
        ifAfterwards:(is In (last To) (sites Phase 0))
    )
)

(define "CounterSimpleMove"
    (move
        Step
        (directions {FR FL})
        (to if:(is Empty (to)))
    )
)

(define "TwoKingsMoverOneKingEnemy"
    (and {
        (= Off (where "Counter" P1))
        (= Off (where "Counter" P2))
        (= 1 (count Pieces Next))
        (= 2 (count Pieces Mover))
    })
)

//------------------------------------------------------------------------------

(game "Frisian Draughts"
    (players 2)
    (equipment {
        (board (square <Tag:boardSize>))
        (piece "Counter" P1 N)
        (piece "Counter" P2 S)
        (piece "DoubleCounter" Each maxState:128)
        (regions P1 (sites Bottom))
        (regions P2 (sites Top))
    })

    (rules
        (start {
            (place "Counter1" (difference (expand (sites Bottom) steps: (- <Tag:pieceNumber> 1)) (sites Phase 1)) value:10)
            (place "Counter2" (difference (expand (sites Top) steps: (- <Tag:pieceNumber> 1)) (sites Phase 1)) value:10)
        })

        (play
            (if "SameTurn"
                (if "IsUnpromoted"
                    (max Moves withValue:True
                        ("HopCounter" (last To)
                            (then
                                (and
                                    (if (can Move ("HopCounter" (last To)))
                                        (moveAgain)
                                        (if "JumpToPromotionZone"
                                            (move Promote (last To) (piece "DoubleCounter") Mover (then (set Value at:(last To) 19)))
                                        )
                                    )
                                    (forEach Site (sites Occupied by:Mover)
                                        (if (!= 0 (state at:(site)))
                                            (set State at:(site) 0)
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (max Moves withValue:True
                        ("HopFrisianSequenceCaptureAgain" before:(count Rows) after:(count Rows) at:EndOfTurn)
                    )
                )
                (priority {
                    (max Moves withValue:True
                        (or {
                            (forEach Piece "DoubleCounter" ("HopFrisianSequenceCapture" before:(count Rows) after:(count Rows) at:EndOfTurn))
                            (forEach Piece "Counter"
                                ("HopCounter" (from)
                                    (then
                                        (and
                                            (if (can Move ("HopCounter" (last To)))
                                                (moveAgain)
                                                (if "JumpToPromotionZone"
                                                    (move Promote (last To) (piece "DoubleCounter") Mover (then (set Value at:(last To) 19)))
                                                )
                                            )
                                            (forEach Site (sites Occupied by:Mover)
                                                (if (!= 0 (state at:(site)))
                                                    (set State at:(site) 0)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        })
                    )
                    (or
                        (forEach Piece "Counter"
                            ("CounterSimpleMove")
                            (then
                                (and
                                    (if "JumpToPromotionZone"
                                        (move Promote (last To) (piece "DoubleCounter") Mover (then (set Value at:(last To) 19)))
                                    )
                                    (forEach Site (sites Occupied by:Mover)
                                        (if (!= 0 (state at:(site)))
                                            (set State at:(site) 0)
                                        )
                                    )
                                )
                            )
                        )
                        (forEach Piece "DoubleCounter"
                            (if (if (> 2 (state at:(from)))
                                    True
                                    (not (can Move (forEach Piece "Counter" ("CounterSimpleMove"))))
                                )
                                (move Slide Diagonal)
                            )
                            (then
                                (if (!= Off (where "Counter" Mover))
                                    (and
                                        (set State at:(last To) (+ 1 (state at:(last To))))
                                        (forEach Site (sites Occupied by:Mover)
                                            (if (and (!= (site) (last To)) (!= 0 (state at:(site))))
                                                (set State at:(site) 0)
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                })
                (then
                    (and
                        (if (and ("TwoKingsMoverOneKingEnemy") (= Undefined (value Player Mover)))
                            (set Value Mover 0)
                        )
                        (if (and (not ("SameTurn")) (!= Undefined (value Player Mover)))
                            (set Value Mover (+ 1 (value Player Mover)))
                        )
                    )
                )
            )
        )

        (end {
            (if (no Moves Next) (result Mover Win))
            (if (= 7 (value Player Mover)) (result Mover Draw))
        })

    )
)

//------------------------------------------------------------------------------

(option "Variant" <Tag> args:{ <boardSize> <pieceNumber> }{
    (item "Frisian"		<10>	<4>     "Standard Frisian draughts")**
    (item "Frysk!"		<10>	<1>     "Frisian draughts starting with 5 pieces")
    (item "12x12"		<12>	<5>		"Frisian draughts played on a 12x12 board")
    (item "8x8"			<8>		<3>		"Frisian draughts played on a 8x8 board")
    (item "8x8 2rows"	<8>		<2>		"Frisian draughts played on a 8x8 board, starting with 2 rows of pieces")
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Frisian Draughts (Described)" {
        "Variant/Frisian"
    })*

})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Frisian Draughts is a game from the Draughts/Checkers family that was particularly popular in Friesland, in the Netherlands.")
        (aliases {"Molkwerums Dams"})
        (rules "10x10 board. Twenty pieces per player, arrayed on the dark-colored spaces. The square in the left-hand corner closest to the player is a dark square. Pieces move one space forward diagonally. When a piece arrives at the furthest rank opposite their starting position, it becomes a king. Kings may move diagonally, forward or backward, any number of spaces (like a bishop in Chess). Captures are made by hopping over an adjacent piece in a diagonal or orthogonal direction, including backwards. Multiple captures are allowed, in which the player may change direction. Kings capture by flying leap. Captures are mandatory, and the maximum capture should be made based on the value of pieces. Kings are worth less than twice the number of regular pieces, but more than twice the number of pieces minus one. (e.g., three kings are worth less than six pieces, but more than five pieces). If more than one maximum capture has the same value, the one that captures more kings takes precedence. It is permitted to use the same space more than once, but not to hop over the same piece twice. Captured pieces are removed after the turn is complete. The maximum capture can be enforced when the opponent catches it, though the opponent may opt not to point it out. A king cannot make three non-capturing moves in a row without moving another king or piece. This rule does not apply if the player only has one king remaining. If one player has only two kings remaining and the opponent has only one king remaining, the player with two kings must win in seven turns. If they do not, the game is a draw. If both players have only one king remaining and neither of them is able to capture or will be forced into a position where their king will be captured on the next turn, the game is a draw. The player who captures all of their opponent's pieces wins, or if they cannot make a legal move.")
        (source "<a href=\"https://www.frisiandraughts.com/onewebmedia/FRISIAN%20DRAUGHTS/Rules/OfficialRulesFrisianDraughts.pdf\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />www.frisiandraughts.com</a>")
        (version "1.3.0")
        (classification "board/war/leaping/diagonal")
        (credit "A. Sambruni and Eric Piette")
        (origin  "This game was played in Netherlands, around 1725.")
        }
    )

    (graphics {
        (board Style Chess)
        (piece Families {"Defined" "Isometric"})
    })

)

