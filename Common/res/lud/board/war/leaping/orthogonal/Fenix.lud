(define "Hop"
    (move
        Hop
        (from #1)
        #2
        (between
            if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))
            (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))
        )
        (to if:(is Empty (to)))
        stack:True
        #3
    )
)

(define "HopGeneral"
    (move Hop
        #1
        Orthogonal
        (between
            #2
            #3
            if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))
            (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))
        )
        (to if:(is Empty (to)))
        stack:True
        (then
            (if (can Move
                    (hop
                        (from (last To))
                        Orthogonal
                        (between
                            #2
                            #3
                            if:(and
                                (not (is In (between) (sites ToClear)))
                                (is Enemy (who at:(between)))
                            )
                        )
                        (to if:(is Empty (to)))
                    )
                )
                (moveAgain)
            )
        )
    )
)

(define "NoKing"
    (all Sites (sites Occupied by:Mover) if:(!= 3 (size Stack at:(site))))
)

(define "DoesNotHaveThreeGeneral"
    (!= 3 (count Sites in:(forEach (sites Occupied by:Mover) if:(= 2 (size Stack at:(site))))))
)

(define "IsSoldier" (= 1 (size Stack at:#1)))
(define "IsGeneral" (= 2 (size Stack at:#1)))
(define "IsKing" (= 3 (size Stack at:#1)))

//------------------------------------------------------------------------------

(game "Fenix"
    (players 2)
    (equipment {
        (board <Board:board>)
        (piece "Fenix" Each)
    })
    (rules
        (start {
            (place "Fenix1" (expand (intersection (sites Bottom) (sites Right)) steps:<Board:expandSize> Orthogonal) value:1)
            (place "Fenix2" (expand (intersection (sites Top) (sites Left)) steps:<Board:expandSize> Orthogonal) value:1)
        })

        phases:{
        (phase "Setup"
            (play
                (move
                    (from (sites Occupied by:Mover) if:(= 1 (size Stack at:(from))))
                    (to
                        (sites Occupied by:Mover)
                        if:(and {
                            (!= (from) (to))
                            (< (size Stack at:(to)) 3)
                            (if ("NoKing")
                                True
                                (< (size Stack at:(to)) 2)
                            )
                            (if ("DoesNotHaveThreeGeneral")
                                True
                                (!= (size Stack at:(to)) 1)
                            )
                        })
                    )
                    stack:True
                )
            )
            (nextPhase Mover (and (not ("NoKing")) (not ("DoesNotHaveThreeGeneral"))) "Play")
        )
        (phase "Play"
            (play
                (if ("SameTurn")
                    (max Moves withValue:True
                        (if ("IsSoldier" (last To))
                            ("Hop" (last To) Orthogonal
                                (then
                                    (if (can Move ("Hop" (last To) Orthogonal))
                                        (moveAgain)
                                    )
                                )
                            )
                            (if ("IsKing" (last To))
                                ("Hop" (last To) ~
                                    (then
                                        (if (can Move ("Hop" (last To)))
                                            (moveAgain)
                                        )
                                    )
                                )
                                (if ("IsGeneral" (last To))
                                    ("HopGeneral" (from (last To)) before:(count Columns) after:(count Columns) at:EndOfTurn)
                                )
                            )
                        )
                    )
                    (if ("NoKing")
                        (forEach Piece
                            (if ("IsSoldier" (from))
                                (move Step Orthogonal
                                    (to if:(and (is Friend (who at:(to))) (= 2 (size Stack at:(to)))))
                                    stack:True
                                )
                            )
                        )
                        (priority {
                            (max Moves withValue:True
                                (forEach Piece
                                    (if ("IsSoldier" (from))
                                        ("Hop" (from) Orthogonal
                                            (then
                                                (if (can Move ("Hop" (last To) Orthogonal))
                                                    (moveAgain)
                                                )
                                            )
                                        )
                                        (if ("IsKing" (from))
                                            ("Hop" (from) ~
                                                (then
                                                    (if (can Move ("Hop" (last To)))
                                                        (moveAgain)
                                                    )
                                                )
                                            )
                                            (if ("IsGeneral" (from))
                                                ("HopGeneral" (from) before:(count Columns) after:(count Columns) at:EndOfTurn)
                                            )
                                        )
                                    )
                                )
                            )
                            (forEach Piece
                                (if ("IsSoldier" (from))
                                    (or
                                        (move Step Orthogonal (to if:(is Empty (to))) stack:True)
                                        (if ("DoesNotHaveThreeGeneral")
                                            (move Step Orthogonal
                                                (to if:(and (is Friend (who at:(to))) (= 1 (size Stack at:(to)))))
                                                stack:True
                                            )
                                        )
                                    )
                                    (if ("IsGeneral" (from))
                                        (move Slide Orthogonal stack:True)
                                        (if ("IsKing" (from))
                                            (move Step (to if:(is Empty (to))) stack:True)
                                        )
                                    )
                                )
                            )
                        })
                    )
                )
            )
            (end (if ("NoKing") (result Mover Loss)))
        )
        }

    )
)

//------------------------------------------------------------------------------

(option "Board" <Board> args:{ <board> <expandSize> }
    {
    (item "9x9" <(square 9)> <6> "The game is played on a 9x9 square board.")
    (item "7x8" <(rectangle 7 8)> <5> "The game is played on a 7x8 square board.")
})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "In Fenix, two armies fight against each other. The battle of the two kings, their generals and soldiers is a matter of life and death — but Fenix is different from other strategy games: Here, the battle is not automatically lost when one of the kings has been defeated. Why? The phoenix-bird is immortal; if he loses his life, he rises again from the ashes. The cycle starts all over. The king is dead? Long live the king!

        —description from the publisher")
        (rules "Each player, on their first five turns, uses some of their own pieces to create one King and three Generals, in any preferred order. A General is made by placing any single piece on top of an orthogonally adjacent piece, and a King is made by placing any single piece on top of an orthogonally adjacent General.

            - Soldiers move orthogonally one step to an adjacent square.
            - Generals move any distance in a straight line orthogonally, like a Chess Rook.
            - The King moves one step to any adjacent square, like a Chess King

            Capture is compulsory if possible.

            - A Soldier or King captures by jumping over an enemy piece occupying a square to which it can legally move and landing on the square immediately beyond it in the same direction, provided that the landing square is vacant.
            - A General captures in the same way, but may move any number of vacant squares before the captured piece, and  may land on any successive vacant square in line of travel beyond the captured piece.

            If the capturing piece can then make another capture, it must, and it must continue doing so until all possible consecutive captures have been made. An enemy piece can only be jumped once in a single turn. If it is reached a second time it forms a block and ends the turn. At the end of a capturing turn all captured pieces must be removed from the board before the next player moves.

            If more than one capture is possible you must choose that which captures the greatest number of pieces, counting a King as three, a General as two, and a Soldier as one. If two possible capturing moves offer an equal number of pieces, you may freely choose between them.

            If one or more of your Generals is captured in one turn, you may create just one General (not more) from two orthogonally adjacent Soldiers anywhere on the board.

            If your King is captured you must, if possible, use your next turn to create another King by placing a Soldier on top of an adjacent General.

        If you are unable to create another King, when your King is captured, you lose the game.")
        (source "<a href=\"https://boardgamegeek.com/boardgame/244080/fenix\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>")
        (version "1.3.0")
        (classification "board/war/leaping/orthogonal")
        (author "Fred Horn")
        (credit "Eric Piette")
        (date "2019")
        }
    )

    (graphics {
        (player Colour P1 (colour VeryDarkGrey))
        (player Colour P2 (colour Red))
        (piece Rename piece:"Fenix" "Eagle")
        (piece Background "Fenix1" image:"disc" fillColour:(colour Red))
        (piece Background "Fenix2" image:"disc" fillColour:(colour VeryDarkGrey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (board Colour Phase0 (colour Orange))
    })
)
