(define "Columns" 8)
(define "OppositePit" (if (is Mover P1) (+ #1 "Columns") (- #1 "Columns") ) )
(define "OppositeOuterPit" (if (is Mover P1) (+ #1 (* "Columns" 2)) (- #1 (* "Columns" 2)) ) )
(define "PlayFromLastHole" (sites {(last To afterConsequence:True)}))

//------------------------------------------------------------------------------

(game "Otep"
    (players 2)

    (equipment {
        (mancalaBoard 4 "Columns" store:None
            {
            (track "Track1" "0,E,N1,W" loop:True P1)
            (track "Track2" "16,E,N1,W" loop:True P2)
            }
        )
        (regions "Home" P1 (sites Track "Track1"))                              // P1 Home
        (regions "Home" P2 (sites Track "Track2"))                              // P2 home
        (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) // P1 inner Home
        (regions "Inner" P2 (difference (sites Track "Track2") (sites Top) ))   // P2 inner Home
        (piece "Seed" Shared)
        (map "SecondRightOuter" {(pair P1 14) (pair P2 17)})
        (map "RightOuter" {(pair P1 15) (pair P2 16)})
        (hand Each)
    })
    (rules

        (start
            (set Count 2 to:(sites Board ))
        )

        phases:{
        (phase "Opening1"
            (play
                (move Select
                    (from (mapEntry "SecondRightOuter" Mover))
                    (then
                        (sow
                            "Track"
                            owner:(mover)
                            apply:(and
                                (fromTo
                                    (from ("OppositePit" (last From)))
                                    (to (mapEntry "RightOuter" Mover))
                                    count:2
                                )
                                (fromTo
                                    (from ("OppositeOuterPit" (last From)))
                                    (to (mapEntry "RightOuter" Mover))
                                    count:2
                                )
                            )
                        )
                    )
                )
            )
            (nextPhase Mover "Opening2")
        )
        (phase "Opening2"
            (play
                (move Select
                    (from (mapEntry "RightOuter" Mover))
                    (then
                        (sow
                            "Track"
                            owner:(mover)
                            apply:(and
                                (fromTo
                                    (from ("OppositePit" (last From)))
                                    (to (mapEntry "RightOuter" Mover))
                                    count:2
                                )
                                (fromTo
                                    (from ("OppositeOuterPit" (last From)))
                                    (to (mapEntry "RightOuter" Mover))
                                    count:2
                                )
                            )
                        )
                    )
                )
            )
            (nextPhase Mover "Opening3")
        )
        (phase "Opening3"
            (play
                (move Select
                    (from
                        (if
                            (is Mover Prev)
                            "PlayFromLastHole"
                            (sites {(mapEntry "RightOuter" Mover)})
                        )

                    )
                    (then
                        (sow
                            "Track"
                            owner:(mover)
                            apply:(if (< 1 (count at:(to)))
                                (moveAgain)
                            )
                        )
                    )
                )
            )
            (nextPhase Mover (not (is Next Prev)) "Sowing")
        )

        (phase "Sowing"
            (play
                (move Select
                    (from
                        (if
                            (is Mover Prev)
                            "PlayFromLastHole"
                            (sites Mover)
                        )
                        if:(> (count at:(from)) 1)
                    )
                    (then
                        (sow
                            "Track"
                            owner:(mover)
                            apply:(if
                                (and {
                                    (is In (to) (sites Mover "Inner"))
                                    (< 1 (count at:(to)))
                                    (is Occupied ("OppositeOuterPit" (to)))
                                    (is Occupied ("OppositePit" (to)))
                                })
                                (and {
                                    (fromTo
                                        (from ("OppositeOuterPit" (to)))
                                        (to (last From))
                                        count:(count at:("OppositeOuterPit" (to)))
                                    )
                                    (fromTo
                                        (from ("OppositePit" (to)))
                                        (to (last From))
                                        count:(count at:("OppositePit" (to)))
                                    )
                                    (sow
                                        (last From)
                                        count:(+ (count at:("OppositePit" (to))) (count at:("OppositeOuterPit" (to))))
                                        "Track"
                                        owner:(mover)
                                    )
                                })
                                (if (< 1 (count at:(to)))
                                    (moveAgain)
                                )
                            )
                        )
                    )
                )
            )
        )
        }

        (end {
            (if (no Moves P1) (result P2 Win))
            (if (no Moves P2) (result P1 Win))
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Otep is a four-row mancala-style board game played by the Bari people of South Sudan. The holes are scooped out of the ground, and the counters are pebbles or seeds which represent cows.")
        (aliases {"Soro"})
        (rules "4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
        ")
        (source "Beaton 1939: 141.")
        (version "1.3.0")
        (classification "board/sow/four rows")
        (credit "Eric Piette")
        (origin  "This game was played in South Sudan, around 1939.")
        }
    )

    (graphics {
        (board Style Mancala)
    })

)
