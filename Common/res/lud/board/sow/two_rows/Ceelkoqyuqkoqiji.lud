(define "Columns" <Row:size>)

(define "OwnedHoles"
    (if (is Mover P1)
        (sites (values Remembered "OwnedP1"))
        (sites (values Remembered "OwnedP2"))
    )
)

(define "RemmemberOwnedHoles"
    (if (is Mover P1)
        (remember Value "OwnedP1" #1)
        (remember Value "OwnedP2" #1)
    )
)

(define "RemmemberOpponentOwnedHoles"
    (if (is Mover P2)
        (remember Value "OwnedP1" #1)
        (remember Value "OwnedP2" #1)
    )
)

(define "NextHole" (trackSite Move from:#1 #2 steps:#3))
(define "NumBigPiecesCaptured" (count Cell in:(sites {(handSite P1 1) (handSite P2 1)})))

(define "LeftMostEmpty"
    (trackSite FirstSite
        "TrackCCW"
        from:(mapEntry Mover)
        if:(and (not (is In (to) (sites "EndHoles"))) (is Empty (to)))
    )
)

(define "NextLeftMostEmpty"
    (trackSite FirstSite
        "TrackCCW"
        from:("LeftMostEmpty")
        if:(and {(not (is In (to) (sites "EndHoles"))) (is Empty (to)) (!= (("LeftMostEmpty") (to)))})
    )
)

(define "NoPieceOnBoard" (no Pieces All in:(sites Board)))

(define "NoPieceOnOwnedHoles"
    (if (= 1 #1)
        (no Pieces All in:(sites (values Remembered "OwnedP1")))
        (no Pieces All in:(sites (values Remembered "OwnedP2")))
    )
)

(define "NumOwnedHoles"
    (if (= 1 #1)
        (count Sites in:(sites (values Remembered "OwnedP1")))
        (count Sites in:(sites (values Remembered "OwnedP2")))
    )
)

//------------------------------------------------------------------------------

(game "Ceelkoqyuqkoqiji"
    (players 2)

    (equipment {
        (mancalaBoard 2 "Columns" largeStack:True
            <Row:tracks>
        )
        (piece "Seed" Shared)
        (piece "Ball" P1)
        (piece "Ball" P2)
        (hand Each size:2)
        (regions P1 (sites Bottom))                     // P1 home
        (regions P2 (sites Top))                        // P2 home
        (map {(pair P1 LastSite) (pair P2 FirstSite)})  // kalahs (storage pits)
        (regions "EndHoles" (sites {0 (+ 1 (* 2 ("Columns")))}))
    })
    (rules

        (start {
            (place Stack "Seed" (union (sites Bottom) (sites Top)) count:<Row:size>)
            (place Stack "Ball1" (mapEntry P1))
            (place Stack "Ball2" (mapEntry P2))
            (set RememberValue "OwnedP1" (sites Bottom))
            (set RememberValue "OwnedP2" (sites Top))
        })

        phases:{
        (phase "Sowing"
            (play
                (or {
                    (if (!= (var "Direction") 2)
                        (move Select
                            (from
                                (if ("SameTurn")
                                    (sites {(var "Replay")})
                                    ("OwnedHoles")
                                )
                                if:(!= 0 (size Stack at:(from)))
                            )
                            (then
                                (and {
                                    (forEach Value min:1 max:(size Stack at:(last From))
                                        (fromTo
                                            (from (last From) level:(- (size Stack at:(last From)) (value)))
                                            (to ("NextHole" (last From) "TrackCCW" (value)))
                                            stack:True
                                        )
                                    )
                                    (if (or (is In ("NextHole" (last From) "TrackCCW" (+ 1 (size Stack at:(last From)))) (sites "EndHoles")) (>= (size Stack at:(last From)) (* 2 <Row:size>)))
                                        (set Var "Direction" 0)
                                        (if (!= 0 (size Stack at:("NextHole" (last From) "TrackCCW" (+ 1 (size Stack at:(last From))))))
                                            (and {
                                                (set Var "Direction" 1)
                                                (moveAgain)
                                                (set Var "Replay" ("NextHole" (last From) "TrackCCW" (+ 1 (size Stack at:(last From)))))
                                            })
                                            (and
                                                (set Var "Direction" 0)
                                                (if (is Occupied ("NextHole" (last From) "TrackCCW" (+ 2 (size Stack at:(last From)))))
                                                    (forEach Level ("NextHole" (last From) "TrackCCW" (+ 2 (size Stack at:(last From)))) FromTop
                                                        (if (= (id "Seed" Shared) (what at:("NextHole" (last From) "TrackCCW" (+ 2 (size Stack at:(last From)))) level:(level)))
                                                            (fromTo
                                                                (from ("NextHole" (last From) "TrackCCW" (+ 2 (size Stack at:(last From)))) level:(level))
                                                                (to (handSite Mover))
                                                            )
                                                            (fromTo
                                                                (from ("NextHole" (last From) "TrackCCW" (+ 2 (size Stack at:(last From)))) level:(level))
                                                                (to (handSite Mover 1))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                })
                            )
                        )
                    )
                    (if (!= (var "Direction") 1)
                        (move Select
                            (from
                                (if ("SameTurn")
                                    (sites {(var "Replay")})
                                    ("OwnedHoles")
                                )
                                if:(!= 0 (size Stack at:(from)))
                            )
                            (then
                                (and
                                    (forEach Value min:1 max:(size Stack at:(last From))
                                        (fromTo
                                            (from (last From) level:(- (size Stack at:(last From)) (value)))
                                            (to ("NextHole" (last From) "TrackCW" (value)))
                                            stack:True
                                        )
                                    )
                                    (if (or (is In ("NextHole" (last From) "TrackCW" (+ 1 (size Stack at:(last From)))) (sites "EndHoles")) (>= (size Stack at:(last From)) (* <Row:size> 2)))
                                        (set Var "Direction" 0)
                                        (if (!= 0 (size Stack at: ("NextHole" (last From) "TrackCW" (+ 1 (size Stack at:(last From))))))
                                            (and {
                                                (set Var "Direction" 2)
                                                (moveAgain)
                                                (set Var "Replay" ("NextHole" (last From) "TrackCW" (+ 1 (size Stack at:(last From)))))
                                            })
                                            (and
                                                (set Var "Direction" 0)
                                                (if (is Occupied ("NextHole" (last From) "TrackCW" (+ 2 (size Stack at:(last From)))))
                                                    (forEach Level ("NextHole" (last From) "TrackCW" (+ 2 (size Stack at:(last From)))) FromTop
                                                        (if (= (id "Seed" Shared) (what at:("NextHole" (last From) "TrackCW" (+ 2 (size Stack at:(last From)))) level:(level)))
                                                            (fromTo
                                                                (from ("NextHole" (last From) "TrackCW" (+ 2 (size Stack at:(last From)))) level:(level))
                                                                (to (handSite Mover))
                                                            )
                                                            (fromTo
                                                                (from ("NextHole" (last From) "TrackCW" (+ 2 (size Stack at:(last From)))) level:(level))
                                                                (to (handSite Mover 1))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                    }
                    (then
                        (if (= 2 ("NumBigPiecesCaptured"))
                            (and {
                                (forEach Site
                                    (intersection (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))
                                    (if (is Occupied (site))
                                        (and
                                            (forEach Level (site) FromTop
                                                (if (>= (level) (/ (size Stack at:(site)) 2))
                                                    (fromTo
                                                        (from (site) level:(level))
                                                        (to (handSite P1))
                                                        stack:True
                                                    )
                                                )
                                            )
                                            (forEach Level (site) FromTop
                                                (if (< (level) (/ (size Stack at:(site)) 2))
                                                    (fromTo
                                                        (from (site) level:(level))
                                                        (to (handSite P2))
                                                        stack:True
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                                (forEach Site
                                    (union (difference (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (sites {(mapEntry P1)}))
                                    (if (is Occupied (site))
                                        (forEach Level (site) FromTop
                                            (fromTo
                                                (from (site) level:(level))
                                                (to (handSite P1))
                                                stack:True
                                            )
                                        )
                                    )
                                )
                                (forEach Site
                                    (union (difference (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))) (sites {(mapEntry P2)}))
                                    (if (is Occupied (site))
                                        (forEach Level (site) FromTop
                                            (fromTo
                                                (from (site) level:(level))
                                                (to (handSite P2))
                                                stack:True
                                            )
                                        )
                                    )
                                )
                                (forget Value "OwnedP1" All)
                                (forget Value "OwnedP2" All)
                            })
                            (and
                                (if (and ("NoPieceOnOwnedHoles" P1) (>= (size Stack Cell at:(handSite P1)) ("NumOwnedHoles" P1)))
                                    (forEach Value min:1 max:("NumOwnedHoles" P1)
                                        (fromTo
                                            (from Cell (handSite P1) level:(- (size Stack Cell at:(handSite P1)) (value)))
                                            (to (regionSite (sites (values Remembered "OwnedP1")) index:(- (value) 1)))
                                            stack:True
                                        )
                                    )
                                )
                                (if (and ("NoPieceOnOwnedHoles" P2) (>= (size Stack Cell at:(handSite P2)) ("NumOwnedHoles" P2)))
                                    (forEach Value min:1 max:("NumOwnedHoles" P2)
                                        (fromTo
                                            (from Cell (handSite P2) level:(- (size Stack Cell at:(handSite P2)) (value)))
                                            (to (regionSite (sites (values Remembered "OwnedP2")) index:(- (value) 1)))
                                            stack:True
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )

            (end (if ("NoPieceOnBoard")
                    {
                    (if (>= 4 (size Stack Cell at:(handSite P1)))
                        (result P2 Win)
                    )
                    (if (>= 4 (size Stack Cell at:(handSite P2)))
                        (result P1 Win)
                    )
                    }
                )
            )
            (nextPhase ("NoPieceOnBoard") "BetweenRounds")
        )

        (phase "BetweenRounds"
            (play
                (if (<= <Row:size> (size Stack Cell at:(handSite Mover)))
                    (move Select
                        (from Cell (handSite Mover))
                        (to ("LeftMostEmpty"))
                        (then
                            (and {
                                (forEach Value min:1 max:<Row:size>
                                    (fromTo
                                        (from Cell (last From) level:(- (size Stack Cell at:(last From)) (value)))
                                        (to (last To))
                                        stack:True
                                    )
                                )
                                ("RemmemberOwnedHoles" (last To))
                                (if (<= (* 2 <Row:size>) (count Cell at:(handSite Mover)))
                                    (moveAgain)
                                    (if <Row:conditionBetweenRounds>
                                        (and {
                                            (forEach Value min:1 max:(- (count Cell at:(handSite Mover)) <Row:size>)
                                                (fromTo
                                                    (from Cell (handSite Mover) level:(- (- (size Stack Cell at:(handSite Mover)) <Row:size>) (value)))
                                                    (to ("NextLeftMostEmpty"))
                                                    stack:True
                                                )
                                            )
                                            (forEach Value min:1 max:(- <Row:size> (- (count Cell at:(handSite Mover)) <Row:size>))
                                                (fromTo
                                                    (from Cell (handSite Next) level:(- (size Stack Cell at:(handSite Next)) (value)))
                                                    (to ("NextLeftMostEmpty"))
                                                    stack:True
                                                )
                                            )
                                            ("RemmemberOwnedHoles" ("NextLeftMostEmpty"))
                                            ("RemmemberOpponentOwnedHoles" ("NextLeftMostEmpty"))
                                        })
                                    )
                                )
                            })
                        )
                    )
                    (then
                        (if (and (is Empty Cell (handSite P1)) (is Empty Cell (handSite P2)))
                            (and
                                (if (= (size Stack Cell at:(handSite P1 1)) 2)
                                    (and
                                        (fromTo
                                            (from Cell (handSite P1 1) level:1)
                                            (to (mapEntry P1))
                                            stack:True
                                        )
                                        (fromTo
                                            (from Cell (handSite P1 1) level:0)
                                            (to (mapEntry P2))
                                            stack:True
                                        )
                                    )
                                    (if (= (size Stack Cell at:(handSite P2 1)) 2)
                                        (and
                                            (fromTo
                                                (from Cell (handSite P2 1) level:1)
                                                (to (mapEntry P1))
                                                stack:True
                                            )
                                            (fromTo
                                                (from Cell (handSite P2 1) level:0)
                                                (to (mapEntry P2))
                                                stack:True
                                            )
                                        )
                                        (and
                                            (fromTo
                                                (from Cell (handSite P1 1) level:0)
                                                (to (mapEntry P1))
                                                stack:True
                                            )
                                            (fromTo
                                                (from Cell (handSite P2 1) level:0)
                                                (to (mapEntry P2))
                                                stack:True
                                            )
                                        )
                                    )
                                )
                                (if (< 50 (value Random (range 1 100)))
                                    (set NextPlayer (player 1))
                                    (set NextPlayer (player 2))
                                )
                            )
                        )
                    )
                )
            )
            (nextPhase (and (is Empty Cell (handSite P1)) (is Empty Cell (handSite P2))) "Sowing")
        )
        }
    )
)

//------------------------------------------------------------------------------

(option "Board Size" <Row> args:{ <size> <tracks> <conditionBetweenRounds>}
    {
    (item "5"   <5>
        <
        {
        (track "TrackCCW" "0,1,E,11,10,W" loop:True)
        (track "TrackCW" "0,6,E,11,5,W" loop:True)
        }
        >
        <
        (or (= 8 (count Cell at:(handSite Mover))) (= 9 (count Cell at:(handSite Mover))))
        >
    "Each row has 5 holes.")*
    (item "7"   <7>
        <
        {
        (track "TrackCCW" "0,1,E,15,14,W" loop:True)
        (track "TrackCW" "0,8,E,15,7,W" loop:True)
        }
        >
        <
        (or { (= 13 (count Cell at:(handSite Mover))) (= 12 (count Cell at:(handSite Mover))) (= 11 (count Cell at:(handSite Mover)))})
        >
    "Each row has 7 holes.")
})

(option "Play Rules" <Row> args:{ <size> }
    {
    (item "5"   <5>  "The price of the largest stone is .")
    (item "7"   <7>  "The price of the largest stone is 7.")*
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Eagle (Observed)" {
        "Board Size/5" "Play Rules/7"
    })*

    (ruleset "Ruleset/Equal Cost (Observed)" {
        "Board Size/5" "Play Rules/5"
    })

    (ruleset "Ruleset/Fourteen holes (Observed)" {
        "Board Size/7" "Play Rules/7"
    })
})

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Ceelkoqyuqkoqiji is a two-row mancala-style board game documented in Yunnan Province, China by Vernon Eagle. It was described to him by He Hao, Li Qiulan, and Wang Qiaoxin.")
        (useFor "Ruleset/Eagle (Observed)" (rules "2x5 board with one store on either end. The store to the right of the player belongs to the player. Play begins with five counters in each regular hole, with one larger stone in each store, but one is slightly smaller than the other. Game can be played with two or four players. With four players, two players control the larger stones, but cannot move the regular counters. Players throw out a finger (index, little, or thumb) to determine who plays first. index beats thumb, thumb beats little finger, little finger beats index. This happens at the start of each round. Counters are taken from any of the holes in the player's row, sowing them in either direction, including the stores. When the last counter of a sowing is dropped in a hole, sowing continues by picking up the counters in the next hole and continuing to sow in that direction. If the hole following the last seed of a sowing is empty, the counters in the hole following this empty hole are captured. If there is an empty hole following the captured hole, and then an occupied hole immediately after it, the counters in the occupied hole are also captured, and so forth until there are two occupied or two empty holes in a row. Moves may not begin from stores. Both stores are sown into normally by both players. Stores are considered to be empty, except when its large stone remains in it, then the large stone only can be sown or captured and not any other counters that may have accumulated there. Large stones can be sown in any order a player chooses during a sowing. If a player has no counters in their holes, they may opt to place one counter in each of their holes, taking counters from their store and continue play (called huelshe). If they opt not to, the opponent takes all the remaining stones on the board. If one of the large stones remains in its original store, the player cannot opt out. If the player doesn't have enough stones for all of the holes, they may choose which holes in their row to place the counters, but they must form a continuous sequence of holes with counters. When the round ends, players must buy back their large stones if they no longer have them, at a price determined in the beginning of the game (usually seven for the larger stone and six for the smaller). Players then attempt to refill their holes with the original number of counters. The player that has fewer than the original number of counters must borrow counters from the opponent. Debt accumulates over subsequent rounds. When the debt reaches five, the player must sell one of their holes to the opponent. The selling player can choose which holes to sell. The seller then receives five holes to either repay debt or fill holes as long as debt does not exceed four. "))
        (useFor "Ruleset/Eagle (Observed)" (source "Eagle 1995: 53."))
        (useFor "Ruleset/Fourteen holes (Observed)" (rules "2x7 board, seven counters per hole. Buying back one's holes between rounds costs seven counters."))
        (useFor "Ruleset/Fourteen holes (Observed)" (source "Eagle 1995: 54."))
        (useFor "Ruleset/Equal Cost (Observed)" (rules "Both the larger and smaller of the large stones cost five counters."))
        (useFor "Ruleset/Equal Cost (Observed)" (source "Eagle 1995: 54."))
        (version "1.3.0")
        (classification "board/sow/two rows")
        (credit "Eric Piette")
        }
    )

    (graphics {
        (board Style Mancala)
        (piece Scale "Ball1" 1.3)
        (piece Scale "Ball2" 1.4)
        (player Colour P1 (colour White))
        (player Colour P2 (colour White))
        (stackType Count)
    })
)
