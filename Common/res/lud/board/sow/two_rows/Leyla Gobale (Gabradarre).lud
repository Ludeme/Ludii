(define "Columns" 6)

(define "OppositePit" (if (is In (to) (sites Bottom)) (+ (to) "Columns") (- (to) "Columns") ) )
(define "PlayableSites" (sites (values Remembered "Playable")))

(define "APlayerCanNotMove"
    (and (not (is Next Mover))
        (or
            (all Sites (sites P1) if:(or (not (is In (site) ("PlayableSites"))) (or (!= 0 (state at:(site))) (is Empty (site)))))
            (all Sites (sites P2) if:(or (not (is In (site) ("PlayableSites"))) (or (!= 0 (state at:(site))) (is Empty (site)))))
        )
    )
)

(define "NoPieceOnBoard" (no Pieces All in:(sites Board)))

(define "CapturedPiece"
    (+ {
        (count Cell at:(handSite #1))
        (count in:(forEach (sites Board) if:(= (state at:(site)) #1)))
        (count in:(forEach (sites #1) if:(= (state at:(site)) 0)))
    })
)

//------------------------------------------------------------------------------

(game "Leyla Gobale (Gabradarre)"
    (players 2)

    (equipment {
        (mancalaBoard 2 6 store:None
            (track "TrackCCW" "0,E,N,W" loop:True)
        )
        (piece "Seed" Shared)
        (regions P1 (sites Bottom))                     // P1 home
        (regions P2 (sites Top))                        // P2 home
        (hand Each)
        (map "CorrespondingHoles" {
            (pair 0 11) (pair 1 10) (pair 2 9) (pair 3 8) (pair 4 7) (pair 5 6)
            (pair 6 5) (pair 7 4) (pair 8 3) (pair 9 2) (pair 10 1) (pair 11 0)
        })
    })
    (rules

        (start {
            (set RememberValue "Playable" (union (sites Top) (sites Bottom)))
            (set Count 5 to:(sites Track) )
        })

        phases:{
        (phase "Sowing"
            (play
                (or {
                    (move Select
                        (from
                            (if (is Mover Prev)
                                (sites {(var "Replay")})
                                (sites Mover)
                            )
                            if:(and {
                                (is Occupied (from))
                                (= 0 (state at:(from)))
                                (is In (from) ("PlayableSites"))
                            })
                        )
                        (then
                            (sow
                                apply:(if (< 1 (count at:(to)))
                                    (if (= 0 (state at:(to)))
                                        (and
                                            (moveAgain)
                                            (set Var "Replay" (to))
                                        )
                                    )
                                    (if (is In (to) (sites Mover))
                                        (if (!= 3 (count at:("OppositePit")))
                                            (if (!= 0 (count at:("OppositePit")))
                                                (fromTo
                                                    (from ("OppositePit"))
                                                    (to (handSite Mover))
                                                    count:(count at:("OppositePit"))
                                                )
                                            )
                                            (and {
                                                (fromTo
                                                    (from ("OppositePit"))
                                                    (to (to))
                                                    count:1
                                                )
                                                (set State at:(to) (mover))
                                                (set State at:("OppositePit") (mover))
                                            })
                                        )
                                    )
                                )
                            )
                        )
                    )
                    }
                    (then
                        (if ("APlayerCanNotMove")
                            (and {
                                (forEach Site
                                    (sites P1)
                                    (if (= 0 (state at:(site)))
                                        (fromTo
                                            (from (site))
                                            (to (handSite P1))
                                            count:(count at:(site))
                                        )
                                    )
                                )
                                (forEach Site
                                    (sites P2)
                                    (if (= 0 (state at:(site)))
                                        (fromTo
                                            (from (site))
                                            (to (handSite P2))
                                            count:(count at:(site))
                                        )
                                    )
                                )
                                (forEach Site
                                    (sites Board)
                                    (if (= (state at:(site)) P1)
                                        (fromTo
                                            (from (site))
                                            (to (handSite P1))
                                            count:(count at:(site))
                                        )
                                        (if (= (state at:(site)) P2)
                                            (fromTo
                                                (from (site))
                                                (to (handSite P2))
                                                count:(count at:(site))
                                            )
                                        )
                                    )
                                )
                                (if (< ("CapturedPiece" P1) ("CapturedPiece" P2))
                                    (set NextPlayer (player 1))
                                    (set NextPlayer (player 2))
                                )
                                (forget Value "Playable" All)
                            })
                        )
                    )
                )
            )

            (end (if ("NoPieceOnBoard")
                    {
                    (if (= 0 (count Cell at:(handSite P1))) (result P2 Win))
                    (if (= 0 (count Cell at:(handSite P2))) (result P1 Win))
                    }
                )
            )

            (nextPhase ("NoPieceOnBoard") "BetweenRounds")

        )

        (phase "BetweenRounds"
            (play
                (move
                    (from (handSite Mover))
                    (to
                        (forEach (sites Mover)
                            if:(= (count at:(site))
                                (min
                                    (results
                                        from:(sites Mover)
                                        to:(sites Mover)
                                        (count at:(to))
                                    )
                                )
                            )
                        )
                    )
                    count:1
                    (then
                        (and
                            (remember Value "Playable" (last To) unique:True)
                            (if
                                (< 0 (count Cell at:(handSite Mover)))
                                (moveAgain)
                                (forEach Site (sites Mover)
                                    (if (is Occupied (site))
                                        (fromTo
                                            (from (handSite Next))
                                            (to (mapEntry "CorrespondingHoles" (site)))
                                            count:(count at:(site))
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
            (nextPhase (or (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing")
        )

        }
    )
)

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Leyla Gobale is a name that refers to mancala-style board games in the Horn of Africa. This is a two-row game that was played in the Gabradarre area of Ethiopia.")
        (rules "2x6 board. Five counters in each hole. Play begins from any hole in a player's row and sown anti-clockwise. When the final counter falls into an occupied hole, the counters in that hole are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends; if this hole is in the player's own row, the contents of the opponent's hole are captured if they contain one, two, four, or more counters. If it contains three counters, one of the opponent's counters is taken and placed into the hole where sowing ended, so that each now has two counters. These holes cannot be sown from for the rest of the game and are owned by the player whose turn created them. Players cannot change their move mid-turn and counting of counters is forbidden. Play ends when one player can no longer play. The opponent then takes all of the counters in their own row, and each player takes the counters that have accumulated in their captured holes. A new game begins. The player with the fewest counters arranges them in their holes, distributing them as equally as possible. The opponent then mirrors this arrangement in their holes, placing aside any extras for use in subsequent games. If the player is reduced to four counters or less, these are arranged one to a hole and any empty holes are not used for the game (by either player). The player who captures all the counters wins.")
        (source "Pankhurst 1971: 181.")
        (version "1.3.0")
        (classification "board/sow/two rows")
        (credit "Eric Piette")
        }
    )

    (graphics {
        (board Style Mancala)
        (show LocalStateHoles)
    })
)

