(define "RememberSiteWithPossibleCapture"
    (set Pending
        (sites To
            (forEach Piece "Fox"
                #1
            )
        )
    )
)

(define "RememberSiteWithPossibleMultiCapture"
    (set Pending
        (sites To
            (if ("SameTurn")
                #1
                (forEach Piece "Fox"
                    #2
                )
            )
        )
    )
)

(define "SitesWithPossibleCaptureInPreviousTurn" (sites Pending))

(define "ShouldCapturedButMoved"
    (and
        (is Pending)
        (not (is In (last To) ("SitesWithPossibleCaptureInPreviousTurn")))
    )
)

(define "HopCustomCapture"
    (move Hop
        #1
        (between
            if:(is Enemy (who at:(between)))
            (apply (remove (between)))
        )
        (to if:(is Empty (to)))
    )
)

(define "StepCustomToEmpty"
    (move Step #1 (to if:(is Empty (to))))
)

(define "HopCustomSequenceCapture"
    (move Hop
        #1
        #2
        (between
            if:(is Enemy (who at:(between)))
            (apply (remove (between) #3))
        )
        (to if:(is Empty (to)))
        (then
            (if (can Move
                    (hop
                        (from (last To))
                        #2
                        (between
                            if:(and
                                (not (is In (between) (sites ToClear)))
                                (is Enemy (who at:(between)))
                            )
                            (apply (remove (between) #3))
                        )
                        (to if:(is Empty (to)))
                    )
                )
                (moveAgain)
            )
        )
    )
)

(define "HasNotCaptured"
    (if (< (value Player Mover) 0)
        (set Value Mover 1)
        (set Value Mover (+ 1 (value Player Mover)))
    )
)

(define "DidNotCaptured"  (> (value Player Prev) 0) )

(define "HenAdded" (set Value Prev (- (value Player Prev) 1)))

(define "BottomEmptySites" (intersection (sites Empty) (sites Bottom)))

//------------------------------------------------------------------------------

(game "Renard et les Poules"
    (players 2)
    (equipment {
        (board
            (merge
                (shift 0 2 (rectangle 3 7 diagonals:Alternating) )
                (shift 2 0 (rectangle 7 3 diagonals:Alternating) )
            )
            use:Vertex
        )
        (hand P1)
        (piece "Fox" P1 S
            (or
                <Fox:hopCapture>
                <Fox:stepMove>
            )
        )
        (piece "Hen" P2 N (move Step (directions {Forwards Rightward Leftward})(to if:(is Empty (to)))))
        }
    )
    (rules
        (start {
            (place "Fox1" (centrePoint))
            (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}) )
        } )

        phases:{
        (phase "FoxPhase" P1
            (play
                <Fox:rememberHopCapture>
            )
        )
        (phase "HenPhase" P2
            (play
                (if (and ("DidNotCaptured") (!= 0 (count Sites in:("BottomEmptySites"))))
                    (move Add
                        (to ("BottomEmptySites"))
                        (then (and ("HenAdded") (moveAgain)))
                    )
                    (forEach Piece)
                )
            )
        )
        }

        (end {
            (if (no Moves P1) (result P1 Loss))
            (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))
        })
    )
)

//------------------------------------------------------------------------------

(option "Fox Moves" <Fox> args:{ <hopCapture> <stepMove> <rememberHopCapture> } {
    (item "One Single Capture"
        <("HopCapture")>
        <("StepToEmpty")>
        <
        (do
            ("RememberSiteWithPossibleCapture" ("HopCapture"))
            next:(forEach Piece
                (then
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >
        "The fox can capture one single piece."
    )*

    (item "Multi Captures"
        <("HopSequenceCapture")>
        <("StepToEmpty")>
        <
        (do
            ("RememberSiteWithPossibleMultiCapture" ("HopSequenceCaptureAgain") ("HopSequenceCapture"))
            next:
            (if ("SameTurn")
                (or
                    ("HopSequenceCaptureAgain")
                    (move Pass)
                )
                (forEach Piece)
                (then
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >
        "The fox can capture many pieces in a sequence."
    )

    (item "One Single Orthogonal Capture"
        <("HopCustomCapture" (directions {N S E W}))>
        <("StepCustomToEmpty" (directions {N S E W}))>
        <
        (do
            ("RememberSiteWithPossibleCapture" ("HopCustomCapture" (directions {N S E W})))
            next:(forEach Piece
                (then
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >
        "The fox can capture orthogonally one single piece."
    )

    (item "Multi Orthogonal Captures"
        <("HopCustomSequenceCapture" (directions {N S E W}))>
        <("StepCustomToEmpty" (directions {N S E W}))>
        <
        (do
            ("RememberSiteWithPossibleMultiCapture"
                ("HopCustomSequenceCapture" (from (last To)) (directions {N S E W}))
                ("HopCustomSequenceCapture" (from) (directions {N S E W}))
            )
            next:
            (if ("SameTurn")
                (or
                    ("HopCustomSequenceCapture" (from (last To)) (directions {N S E W}))
                    (move Pass)
                )
                (forEach Piece)
                (then
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >
        "The fox can capture orthogonally many pieces in a sequence."
    )

    (item "One Single Diagonal Capture And Orthogonal Move"
        <("HopCustomCapture" (directions {NE SE NW SW}))>
        <("StepCustomToEmpty" (directions {N S E W}))>
        <
        (do
            ("RememberSiteWithPossibleCapture" ("HopCustomCapture" (directions {NE SE NW SW})))
            next:(forEach Piece
                (then
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >
        "The fox can capture diagonally one single piece and moves only orthogonally."
    )

    (item "Multi Diagonal Captures And Orthogonal Move"
        <("HopCustomSequenceCapture" (directions {NE SE NW SW}))>
        <("StepCustomToEmpty" (directions {N S E W}))>
        <
        (do
            ("RememberSiteWithPossibleMultiCapture"
                ("HopCustomSequenceCapture" (from (last To)) (directions {NE SE NW SW}))
                ("HopCustomSequenceCapture" (from) (directions {NE SE NW SW}))
            )
            next:
            (if ("SameTurn")
                (or
                    ("HopCustomSequenceCapture" (from (last To)) (directions {NE SE NW SW}))
                    (move Pass)
                )
                (forEach Piece)
                (then
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >
        "The fox can capture diagonally many pieces in a sequence and moves only orthogonally."
    )
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Renard et les Poules (Described)" {
        "Fox Moves/One Single Capture"
    })*

    (ruleset "Ruleset/Orthogonal Fox (Described)" {
        "Fox Moves/One Single Orthogonal Capture"
    })

    (ruleset "Ruleset/Orthogonal Fox Diagonal Capture (Described)" {
        "Fox Moves/One Single Diagonal Capture And Orthogonal Move"
    })

})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Renard et les Poules is a hunt game documented in nineteenth century France. ")
        (aliases {"Marelle Quintuple"})
        (useFor "Ruleset/Renard et les Poules (Described)" (rules "Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as seventeen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm, and on the two outermost points on the left and right arms. The other player plays as one fox, which starts on the central point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward or horizontal direction. The fox hops over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. At the beginning of the game, the players choose whether to allow the fox the ability to make multiple captures in one turn. If the fox is able to capture but does not, the opponent adds another hen on an empty point in the bottom row. If there is no empty spot on the bottom row, the player waits until there is one to place the new hen. The fox wins by capturing all of the hens or by moving to the furthest line on the hens' side of the board. The hens win by blocking the fox from being able to move.
        "))
        (useFor "Ruleset/Renard et les Poules (Described)" (source "Moulidars 1840: 100-102."))
        (useFor "Ruleset/Orthogonal Fox (Described)" (rules "The fox moves orthogonally forward, backward, or sideways."))
        (useFor "Ruleset/Orthogonal Fox (Described)" (source "Moulidars 1840: 102."))
        (useFor "Ruleset/Orthogonal Fox Diagonal Capture (Described)" (rules "The fox may only move orthogonally forward, backward, or horizontally, except when capturing, in which case the fox may move diagonally."))
        (useFor "Ruleset/Orthogonal Fox Diagonal Capture (Described)" (source "Moulidars 1840: 102."))
        (source "Murray 1951: 104.")
        (version "1.3.0")
        (classification "board/hunt")
        (credit "Eric Piette")
        (origin  "This game was played in France, around 1840.")
        }
    )

    (graphics {
        (board Style Graph)
        (player Colour P1 (colour Black))
        (player Colour P2 (colour White))
        (piece Families {"Abstract" "Themed"})

        }
    )

    (ai
        "Renard et les Poules_ai"
    )
)
