(define "ThrowValue"
    (if (= 4 (count Pips))
        20
        (if (= 2 (count Pips))
            2
            0
        )
    )
)

(define "SiteToMoveOnTrack" (trackSite Move #1 steps:#2))

(define "SiteToMove"
    (if (= (from) (handSite Mover))
        ("SiteToMoveOnTrack" from:0 (- ("ThrowValue") 1))
        ("SiteToMoveOnTrack" from:(from) ("ThrowValue"))
    )
)

(define "SiteHyenaToMove"
    ("SiteToMoveOnTrack" from:(where "Hyena" Shared) (* 2 ("ThrowValue")))
)

(define "HyenaPlayer"
    (var)
)

(define "SetHyenaPlayer"
    (and
        (add (piece "Hyena") (to 0) stack:True)
        (set Var (id Mover))
    )
)

//------------------------------------------------------------------------------

(game "Nama"
    (players <Player:num>)
    (equipment {
        (board
            (rectangle <Board:size> 1)
            (track "Track" <Board:track> directed:True)
        )
        (hand Each)
        (hand Shared)
        (piece "Marker" Each
            (if (= Off ("SiteToMove"))
                (move Remove (from) level:(level)
                    (then
                        (if (= Off (where "Hyena" Shared))
                            ("SetHyenaPlayer")
                        )
                    )
                )
                (move
                    (from (from) level:(level))
                    (to ("SiteToMove"))
                    stack:True
                )
            )
        )
        (piece "Hyena" Shared)
        (dice d:2 from:0 num:4)
    })
    (rules
        (start
            (place "Marker" "Hand")
        )
        (play
            (do (roll)
                next:(if (< 0 ("ThrowValue"))
                    (if (= ("HyenaPlayer") (id Mover))
                        (if (= Off ("SiteHyenaToMove"))
                            (move Remove (where "Hyena" Shared)
                                (then
                                    (forEach Site (sites Board)
                                        (if (is Occupied (site))
                                            (remove (site) count:(size Stack at:(site)))
                                        )
                                    )
                                )
                            )
                            (move
                                (from (where "Hyena" Shared))
                                (to ("SiteHyenaToMove"))
                                (then
                                    (forEach Value min:1 max:(- (* 2 ("ThrowValue")) 1)
                                        (if
                                            (is Occupied ("SiteToMoveOnTrack" from:(last From) (value)))
                                            (remove
                                                ("SiteToMoveOnTrack" from:(last From) (value))
                                                count:(size Stack at:("SiteToMoveOnTrack" from:(last From) (value)))
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (or (forEach Piece) (forEach Piece container:(mover)))
                    )
                )
            )
        )
        (end {
            (forEach Player
                if:(and {
                    (> ("HyenaPlayer") 0)
                    (!= (player) ("HyenaPlayer"))
                    (= Off (where "Hyena" Shared))
                })
                (result Player Loss)
            )

            (if
                (and (= (id Mover) ("HyenaPlayer")) (= Off (where "Hyena" Shared)))
                (result Mover Win)
            )
            (forEach Player
                if:(and (!= (player) ("HyenaPlayer")) (no Pieces of:(player)))
                (result Player Loss)
            )
        })
    )
)

//------------------------------------------------------------------------------

(option "Players" <Player> args:{ <num> }
    {
    (item "2" <2> "The game involves 2 players.")
    (item "3" <3> "The game involves 3 players.")
    (item "4" <4> "The game involves 4 players.")
    (item "5" <5> "The game involves 5 players.")
    (item "6" <6> "The game involves 6 players.")
    (item "7" <7> "The game involves 7 players.")
    (item "8" <8> "The game involves 8 players.")*
    (item "9" <9> "The game involves 9 players.")
    (item "10" <10> "The game involves 10 players.")
    (item "11" <11> "The game involves 11 players.")
    (item "12" <12> "The game involves 12 players.")
    (item "13" <13> "The game involves 13 players.")
    (item "14" <14> "The game involves 14 players.")
    (item "15" <15> "The game involves 15 players.")
    (item "16" <16> "The game involves 16 players.")
})

(option "Board Size" <Board> args:{ <size> <track>}
    {
    (item "20"  <20>  <{0..19}> "The track is composed of 20 spaces")
    (item "25"  <25>  <{0..24}> "The track is composed of 25 spaces")
    (item "30"  <30>  <{0..29}> "The track is composed of 30 spaces")
    (item "35"  <35>  <{0..34}> "The track is composed of 35 spaces")
    (item "40"  <40>  <{0..39}> "The track is composed of 40 spaces")
    (item "45"  <45>  <{0..44}> "The track is composed of 45 spaces")
    (item "50"  <50>  <{0..49}> "The track is composed of 50 spaces")
    (item "55"  <55>  <{0..54}> "The track is composed of 55 spaces")
    (item "60"  <60>  <{0..59}> "The track is composed of 60 spaces")
    (item "65"  <65>  <{0..64}> "The track is composed of 65 spaces")
    (item "70"  <70>  <{0..69}> "The track is composed of 70 spaces")
    (item "75"  <75>  <{0..74}> "The track is composed of 75 spaces")
    (item "80"  <80>  <{0..79}> "The track is composed of 80 spaces")
    (item "85"  <85>  <{0..84}> "The track is composed of 85 spaces")
    (item "90"  <90>  <{0..89}> "The track is composed of 90 spaces")
    (item "95"  <95>  <{0..94}> "The track is composed of 95 spaces")
    (item "100" <100> <{0..99}> "The track is composed of 100 spaces")*
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Nama (Observed)" {
        "Players/8" "Board Size/100"
        }
        variations:{
        "Players/2" "Players/3" "Players/4" "Players/5" "Players/6" "Players/7" "Players/9"
        "Players/10" "Players/11" "Players/12" "Players/13" "Players/14" "Players/15" "Players/16"
        "Board Size/20" "Board Size/25" "Board Size/30" "Board Size/35" "Board Size/40" "Board Size/45"
        "Board Size/50" "Board Size/55" "Board Size/60" "Board Size/65" "Board Size/70" "Board Size/75"
        "Board Size/80" "Board Size/85" "Board Size/90" "Board Size/95"
        }
    )*

})

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Nama is a race game played in Ségou, Mali. The board is made in the sand, and nut shells are used as dice. The first player who reaches the end plays as the hyena, which eats up the remianing players' pieces.")
        (rules "The board is a track of any number of spaces, made in the sand. Any number of players, playing with one piece. One piece is the hyena. Four nut shells are used as dice, with the following throws: four of all the same side = 20; two of the same side = 2; any other throw = 0. The first player to reach the end of the track then plays as the hyena. The hyena moves twice the value of the throw. When the hyena overtakes a player's piece, it is removed from the board and the player loses. ")
        (source "Béart 1955: 432.")
        (version "1.3.0")
        (classification "board/race/escape")
        (credit "Eric Piette")
        (origin  "This game was played in Mali, around 1955.")
        }
    )

    (graphics {
        (show Edges Hidden)
        (piece Scale 0.5)
        (stackType 0 Ground)
        (board Colour Phase0 (colour 223 178 110))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
    })
)
