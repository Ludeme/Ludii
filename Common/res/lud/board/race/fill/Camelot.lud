(define "InTheGoal" (is In #1 (sites Next)))

(define "EmptyButNotEnemyGoal" (difference (sites Empty) (sites Mover)))

(define "OnAFriend" (between if:(is Friend (who at:(between)))) )

(define "MoveAgainAfterJumpingFriend" (and (moveAgain) (set Pending)) )

(define "MoveAgainAfterJumpingEnemy" (moveAgain) )

(define "WasJumpingAFriend" (is Pending) )

(define "WasAKnight" (= (what at:(last To)) (id "Knight" Mover)) )

(define "OnAnEnemy" (between if:(is Enemy (who at:(between))) (apply (remove (between)))))

(define "Step"
    (move
        Step
        (to if:(if ("InTheGoal" (from))
                (and
                    (is Empty (to))
                    ("InTheGoal" (to))
                )
                (is In (to) "EmptyButNotEnemyGoal")
            )
        )
    )
)

(define "Hop"
    (move
        Hop
        (from #1)
        #2
        (to if:(and (is In (to) "EmptyButNotEnemyGoal") (not (is Visited (to)))))
        #3
    )
)

(define "HopSequence"
    ("Hop"
        #1
        #2
        (then
            (if
                (and
                    (not ("InTheGoal" (last To)))
                    (can Move ("Hop" (last To) #2))
                )
                #3
            )
        )
    )
)

(define "NotEnoughPieceForBothPlayer" (and (< (count Pieces Mover) 2) (< (count Pieces Next) 2)))

(define "NotEnoughPieceForTheMover" (and (>= (count Pieces Mover) 2) (= (count Pieces Next) 0)))

(define "GoalFilledby" (= (sites #2) (sites Occupied by:#1)))

//------------------------------------------------------------------------------

(game "Camelot"
    (players 2)
    (equipment {
        (board
            (keep
                (rectangle 12 16)
                (poly { {0 7} {1 10} {4 13} {12 13} {15 10} {16 7}
                {16 5} {15 2} {13 0} {3 0} {1 2} {0 5} })
            )
        )
        (piece "Pawn" Each
            (or
                (if (not ("InTheGoal" (from))) ("HopSequence" (from) "OnAFriend" "MoveAgainAfterJumpingFriend"))
                "Step"
            )
        )

        (piece "Knight" Each
            (or
                (if (not ("InTheGoal" (from))) ("HopSequence" (from) "OnAFriend" "MoveAgainAfterJumpingFriend"))
                "Step"
            )
        )

        (regions P1 (sites {"A6" "A7"}))
        (regions P2 (sites {"P6" "P7"}))
        }
    )
    (rules
        (start {
            (place "Pawn1" {"F4" "F5" "F6" "F7" "F8" "F9" "G5" "G6" "G7" "G8"})
            (place "Knight1" {"F3" "G4" "G9" "F10"})
            (place "Pawn2" {"K4" "K5" "K6" "K7" "K8" "K9" "J5" "J6" "J7" "J8"})
            (place "Knight2" {"K3" "J4" "J9" "K10"})
        })

        (play
            (if "SameTurn"
                (if "WasJumpingAFriend"
                    (if "WasAKnight"
                        // Charge of the knight (all the possibilities)
                        (priority {
                            ("HopSequence" (last To) "OnAnEnemy" "MoveAgainAfterJumpingEnemy")
                            (or
                                ("HopSequence" (last To) "OnAFriend" "MoveAgainAfterJumpingFriend")
                                (move Pass)
                            )
                        })
                        (or
                            ("HopSequence" (last To) "OnAFriend" "MoveAgainAfterJumpingFriend")
                            (move Pass)
                        )
                    )
                    ("HopSequence" (last To) "OnAnEnemy" "MoveAgainAfterJumpingEnemy")
                )

                (priority {
                    // If one of our piece is on the goal of the enemy we have to move it.
                    (forEach Site
                        (sites Mover)
                        (if (= (who at:(site)) (mover))
                            (priority {
                                ("HopSequence" (site) "OnAnEnemy" "MoveAgainAfterJumpingEnemy")
                                (or
                                    ("HopSequence" (site) "OnAFriend" "MoveAgainAfterJumpingFriend")
                                    "Step"
                                )
                            })
                        )
                    )
                    // If a piece can jump an enemy it has to.
                    (forEach Piece
                        (move
                            Hop
                            "OnAnEnemy"
                            (to
                                if:(if
                                    ("InTheGoal" (from))
                                    (and
                                        (is Empty (to))
                                        ("InTheGoal" (to))
                                    )
                                    (is In (to) "EmptyButNotEnemyGoal")
                                )
                            )
                            (then
                                (if
                                    (and
                                        (not ("InTheGoal" (last To)))
                                        (can Move
                                            (hop
                                                (from (last To))
                                                "OnAnEnemy"
                                                (to if:(is Empty (to)))
                                            )
                                        )
                                    )
                                    "MoveAgainAfterJumpingEnemy"
                                )
                            )
                        )
                    )
                    (forEach Piece)
                })
            )
        )

        (end {
            (if ("GoalFilledby" P1 P2) (result P1 Win))
            (if ("GoalFilledby" P2 P1) (result P2 Win))
            (if "NotEnoughPieceForTheMover" (result Mover Win))
            (if "NotEnoughPieceForBothPlayer" (result Mover Draw))
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Camelot is a Chess variant invented by George Parker in the late nineteenth century and published by Parker Brothers.")
        (aliases {"Chivalry" "Inside Moves"})
        (rules "The object of the game is to be the first player to occupy the opponent's castle with two of your own pieces, or, to capture all of your opponent's pieces while retaining two or more of your own pieces. Both knights and pawns can move either horizontally, vertically, or diagonally in three ways, as follows: One space in any direction (like a king in chess). This is called a plain move. A leaping move (called cantering) over an adjacent friendly piece to a vacant space immediately beyond. Multiple leaps over a player's own pieces are permitted. Cantering is always optional (never obligatory). A jumping move over an adjacent enemy piece to a vacant space immediately beyond. The enemy piece is captured and removed from the board. As in checkers, multiple jumps are allowed, and capturing is obligatory whenever it is possible. Pawns may make any of the three moves, but only one type of move per turn. Knights have a fourth option: a combination move consisting of a canter immediately followed by a jump (capture). This is called the knight's charge. The knight may, in this single move, perform multiple canters (or just one), followed by multiple jumps (or just one); but the canter(s) must precede the jump(s). A knight may not combine a plain move with a canter or a jump.")
        (source "<a href=\"https://en.wikipedia.org/wiki/Camelot_(board_game)\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.3.0")
        (classification "board/race/fill")
        (author "George S. Parker")
        (publisher "The Game Crafter, LLC, John Waddington Ltd.,")
        (credit "Eric Piette")
        (date "1930")
        }
    )

    (graphics {
        (player Colour P1 (colour Yellow))
        (player Colour P2 (colour Red))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour 80 0 0))
        (board Colour Phase0 (colour 250 221 144))
        (board Colour Phase1 (colour 3 125 80))
        (board Colour Symbols (colour 240 240 240))
        (show Symbol "star" Cell {64 80 79 95} scale:0.4)
        (board Checkered)
    })

    (ai
        "Camelot_ai"
    )

)
