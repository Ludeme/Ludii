(define "ThrowValue" (mapEntry "Throw" (count Pips)))
(define "SiteToMoveOnTrack" (trackSite Move #1 steps:#2))
(define "IsSpecialThrow" (is In ("ThrowValue") (sites {12 25 11 6})))
(define "Bange" (= ("ThrowValue") 25))
(define "Dust" (= ("ThrowValue") 11))

(define "Move"
    (or {
        (if (and {
                (>= 0 (var "EnteredPiece"))
                (is Occupied (handSite Mover))
                ("Bange")
            })
            (move
                (from (handSite Mover))
                (to (mapEntry "DefaultEntry" Mover))
                (then (set Var "EnteredPiece" 1))
            )
        )
        (if (and {
                (>= 0 (var "EnteredPiece"))
                (is Occupied (handSite Mover))
                ("Dust")
            })
            (move
                (from (handSite Mover))
                (to (mapEntry "DefaultEntry" Mover))
                (then (set Var "EnteredPiece" 1))
            )
        )
        (if (and {
                (>= 0 (var "EnteredPiece"))
                (is Occupied (handSite Mover))
                ("Dust")
            })
            (move
                (from (handSite Mover))
                (to (mapEntry "XEntry" Mover))
            )
        )
        (forEach Piece)
    })
)

//------------------------------------------------------------------------------

(game "Bargese"
    (players 2)
    (equipment {
        (board
            (add
                (hole
                    (merge
                        (shift 0 8 (rectangle 3 19))
                        (shift 8 0 (rectangle 19 3))
                    )
                    (poly {{8 8} {8 11} {11 11} {11 8}})
                )
                cells:{ { 8 28 48 68 69 70 71 51 31 11 10 9 } }
            )
            {
            (track "Track1" "26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P1 directed:True)
            (track "Track2" "27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P2 directed:True)
            }
        )
        (hand Each)
        (dice d:2 from:0 num:6)
        (piece "Pawn" Each
            (if (and {
                    (>= 0 (var "EnteredPiece"))
                    (= End ("SiteToMoveOnTrack" from:(from) 1))
                    (or ("Bange") ("Dust"))
                })
                (move Remove (from) level:(level)
                    (then (set Var "EnteredPiece" 1))
                )
                (if (and
                        (>= 0 (var "EnteredPiece"))
                        (= End ("SiteToMoveOnTrack" from:(from) 2))
                    )
                    (move
                        (from (from))
                        (to ("SiteToMoveOnTrack" from:(from) 1))
                    )
                    (move
                        (from (from) level:(level))
                        (to
                            ("SiteToMoveOnTrack" from:(from) (if (< 0 (var "EnteredPiece")) (- ("ThrowValue") 1) ("ThrowValue")))
                            if:(not (and (is In (to) (sites "SafeSites")) (is Enemy (who at:(to)))))
                            (apply
                                (if (is Enemy (who at:(to)))
                                    (forEach Level (to) FromTop
                                        (fromTo
                                            (from (to) level:(level))
                                            (to (handSite (who at:(to) level:(level))))
                                        )
                                    )
                                )
                            )
                        )
                        (then (set Var "EnteredPiece" 0))
                    )
                )
            )
        )
        (map "Throw" {(pair 0 6) (pair 1 11) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)})
        (map "DefaultEntry" {(pair P1 26) (pair P2 27)})
        (map "XEntry" {(pair P1 2) (pair P2 48)})
        (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))
        }
    )
    (rules
        (start {
            (place Stack "Pawn1" (handSite P1) count:4)
            (place Stack "Pawn2" (handSite P2) count:4)
        })

        (play
            (do (if (>= 0 (var "EnteredPiece")) (roll))
                next:(if (can Move ("Move")) ("Move") (move Pass (then (set Var "EnteredPiece" 0))))
                (then
                    (if ("IsSpecialThrow")
                        (moveAgain)
                    )
                )
            )
        )

        (end  (if (no Pieces Mover) (result Mover Win)))
    )
)

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Bargese is a race game played by Syrian women. Typically played on velveteen cloth with the game board embroidered, and metal pieces which take the shape of soldiers and horses. The throws of the cowrie shells have Persian names, suggesting that the game came to Syria through Iran.")
        (aliases {"B'rsis" "Barcese"})
        (rules "Four 3x8 rectangles, arranged in a cross. In the outer rows of each arm, the third square from the outer corners is marked with an X. In two opposite arms, the bottom left corner is marked with \"\\", called bange. Two players. Four pieces per player. Six cowrie shells, used as dice. The throws are as follows: six mouths up (bara) = 12, and the player is granted another throw; five mouths up (bange) = 25 plus another throw, or 24 in addition to entering a piece on the first space of the track, or a piece can enter on the bange plus another throw; four mouths up (arba) = 4; three mouths up (t'laite) = 3; two mouths up (doi) = 2; one mouth up (dust) = 11 plus another throw, or 10 in addition to entering a piece on the first square of the track, or a piece can enter on the X in the right hand row of the player's arm and the player gets another throw; all mouths down (shaka) = 6 plus another throw. Players begin in opposite arms of the cross that do not contain the bange. Pieces enter the board on the top square of the central row of their arm, proceed down that row, then continue in an anti-clockwise direction around the board, until returning to the central track in the player's arm and proceeding toward the central square of the board. The player moves the pieces according to the throws. A piece must move the full value of a single throw, unless one of the throws allows the entering of a piece. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must re-enter from the beginning. Pieces resting on squares marked with X cannot be sent back to start in this way. Two opposing pieces cannot occupy the same safe space, but two pieces belonging to the same player may. Pieces entering the central row of the player's arm are placed on their side to indicate they are moving toward the goal, rather than just starting. Pieces enter the central space (the kitchen) by throwing a dust or bange from the final space in the central row. When this is thrown, and the player has other pieces on the board, the piece waiting to enter the kitchen uses the point normally used to enter pieces to exit, and the remaining value of the throw can be used by other pieces. The first player to remove all four pieces from the board wins.")
        (source "Finkel 2002: 67-69.")
        (version "1.3.0")
        (classification "board/race/reach")
        (credit "Eric Piette")
        (origin  "This game was played in Syria, around 2002.")
        }
    )

    (graphics {
        (player Colour P1 (colour Red))
        (player Colour P2 (colour Green))
        (stackType 0 Ground)
        (stackType 1 Count)
        (stackType 2 Count)
        (stackType 3 Count)
        (stackType 4 Count)
        (show Symbol "thinCross" {60 62 16 48 87 89 37 2} scale:0.9)
        (board Colour Phase0 (colour 223 178 110))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (show Line {{84 81} {138 143}})
        (piece Scale "Pawn" 0.5)
    })

)
