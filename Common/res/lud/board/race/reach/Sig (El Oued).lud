(define "Cairo" 27)
(define "Medina" 29)
(define "Mecca" 30)
(define "Minaret" 12)
(define "EnterMinaret" 11)
(define "ExitMinaret" 13)
(define "Step1" 25)
(define "Step2" 26)
(define "Step3" 28)
(define "Ground" 24)
(define "Start" 0)
(define "AfterStart" 1)
(define "GroundAway" 23)

(define "ThrowValue" (mapEntry "Throw" (count Pips)))
(define "SiteToMoveOnTrack" (trackSite Move #1 steps:#2))
(define "ExtraThrowValue" (mapEntry "ExtraThrow" (count Pips)))

(define "AllPiecesInMecca"
    (and {
        (= ("Mecca") (where "Djinn" Mover))
        (= ("Mecca") (where "Father" Mover))
        (= ("Mecca") (where "Mother" Mover))
    })
)

(define "Sig" (= "ThrowValue" 1))

(define "CaptureMove"
    (then
        (forEach Site (sites Track Mover #1 from:(last From) to:(last To))
            (if (!= (site) (last To))
                (forEach Level (site) FromTop
                    (if (is Enemy (who at:(site) level:(level)))
                        (fromTo
                            (from (site) level:(level))
                            (to
                                ("Start")
                            )
                        )
                    )
                )
            )
        )
    )
)

(define "NextSite" (trackSite Move from:#1 #2 steps:1))

(define "SigMove"
    (if
        (and {
            ("Sig")
            (= (from) #1)
            (if ("NewTurn")
                True
                (= 1 (var "SpecialSig"))
            )
        })
        (move
            (from (from) level:(level))
            (to
                #2
            )
        )
    )
)

(define "EnterToMinaret" ("SigMove" ("EnterMinaret") ("Minaret")))
(define "ExitFromMinaret" ("SigMove" ("Minaret") ("ExitMinaret")))
(define "ExitStart" ("SigMove" ("Start") ("AfterStart")))
(define "GoToStep1" ("SigMove" ("Ground") ("Step1")))
(define "GoToStep2" ("SigMove" ("Step1") ("Step2")))
(define "GoToStep3" ("SigMove" ("Step2") ("Step3")))
(define "GoToCairo" ("SigMove" ("Step3") ("Cairo")))
(define "GoToMedina" ("SigMove" ("Cairo") ("Medina")))
(define "GoToMecca" ("SigMove" ("Medina") ("Mecca")))
(define "GoToStep2" ("SigMove" ("Step1") ("Step2")))
(define "GoToStep3" ("SigMove" ("Step2") ("Step3")))
(define "GoToStep1Djinn" ("SigMove" ("GroundAway") ("Step1")))

(define "Move"
    (or {
        (if (and (!= (from) ("Start")) (is In (from) (sites Track "FirstTrack")))
            (move
                (from (from) level:(level))
                (to
                    ("SiteToMoveOnTrack" "FirstTrack" #1)
                )
            )
            ("CaptureMove" "FirstTrack")
        )
        (if (is In (from) (sites Track "SecondTrack"))
            (move
                (from (from) level:(level))
                (to
                    ("SiteToMoveOnTrack" "SecondTrack" #1)
                )

                ("CaptureMove" "SecondTrack")
            )
        )
        ("ExitStart")
        ("EnterToMinaret")
        ("ExitFromMinaret")
        ("GoToStep1")
        ("GoToStep2")
        ("GoToStep3")
        ("GoToCairo")
        ("GoToMedina")
        ("GoToMecca")
        #2
    })
)

//------------------------------------------------------------------------------

(game "Sig (El Oued)"
    (players <Player:num>)
    (equipment {
        (board
            (scale 2 1
                (merge {
                    (square 5)
                    (shift 4 5 (rectangle 3 1))
                    (scale 2 1 (shift 1.5 8 (rectangle 3 1)))
                })
            )
            {
            (track "FirstTrack"  "0,E,N1,W,N1,E1" directed:True)
            (track "SecondTrack" "13,E,N1,W,N1,E" directed:True)
            }
        )
        (dice d:2 from:0 num:6)
        (piece "Father" Each  ("Move" (if (= 1 (var "SpecialSig")) (+ 1 ("ThrowValue")) ("ThrowValue"))))
        (piece "Djinn" Each
            (if (= ("Mecca") (where "Father" Mover))
                ("Move" (* 2 (if (= 1 (var "SpecialSig")) (+ 1 ("ThrowValue")) ("ThrowValue"))) ("GoToStep1Djinn"))
            )
        )
        (piece "Mother" Each
            (if (= ("Mecca") (where "Djinn" Mover))
                ("Move" (if (= 1 (var "SpecialSig")) (+ 1 ("ThrowValue")) ("ThrowValue")))
            )
        )
        (map "Throw" {(pair 0 12) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 1) (pair 6 6)})
        (map "ExtraThrow" {(pair 0 3) (pair 1 1) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 1) (pair 6 1)})
    })
    (rules
        <Player:start>
        (play
            (do (roll)
                next:(if (can Move (forEach Piece)) (forEach Piece) (move Pass))
                (then
                    (if (!= 0 ("ExtraThrowValue"))
                        (and
                            (if (= 3 ("ExtraThrowValue"))
                                (if (<= (var) 0)
                                    (set Var 2)
                                )
                            )
                            (if (!= (mover) (prev))
                                (and
                                    (moveAgain)
                                    (if (!= 1 ("ThrowValue")) (set Var "SpecialSig" 1))
                                )
                            )
                        )
                        (if (> (var) 0)
                            (and {
                                (set Var (- (var) 1))
                                (moveAgain)
                            })
                            (set Var "SpecialSig" 0)
                        )
                    )
                )
            )
        )
        (end (if ("AllPiecesInMecca") (result Mover Win)))
    )
)

//------------------------------------------------------------------------------

(option "Players" <Player> args:{ <num> <start>}
    {
    (item "2" <2>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
        })
        >
    "The game has 2 players.")
    (item "3" <3>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
            (place Stack "Father3" 0)
            (place Stack "Djinn3" 0)
            (place Stack "Mother3" 0)
        })
        >
    "The game has 3 players.")
    (item "4" <4>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
            (place Stack "Father3" 0)
            (place Stack "Djinn3" 0)
            (place Stack "Mother3" 0)
            (place Stack "Father4" 0)
            (place Stack "Djinn4" 0)
            (place Stack "Mother4" 0)
        })
        >
    "The game has 4 players.")*
    (item "5" <5>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
            (place Stack "Father3" 0)
            (place Stack "Djinn3" 0)
            (place Stack "Mother3" 0)
            (place Stack "Father4" 0)
            (place Stack "Djinn4" 0)
            (place Stack "Mother4" 0)
            (place Stack "Father5" 0)
            (place Stack "Djinn5" 0)
            (place Stack "Mother5" 0)
        })
        >
    "The game has 5 players.")
    (item "6" <6>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
            (place Stack "Father3" 0)
            (place Stack "Djinn3" 0)
            (place Stack "Mother3" 0)
            (place Stack "Father4" 0)
            (place Stack "Djinn4" 0)
            (place Stack "Mother4" 0)
            (place Stack "Father5" 0)
            (place Stack "Djinn5" 0)
            (place Stack "Mother5" 0)
            (place Stack "Father6" 0)
            (place Stack "Djinn6" 0)
            (place Stack "Mother6" 0)
        })
        >
    "The game has 6 players.")
    (item "7" <7>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
            (place Stack "Father3" 0)
            (place Stack "Djinn3" 0)
            (place Stack "Mother3" 0)
            (place Stack "Father4" 0)
            (place Stack "Djinn4" 0)
            (place Stack "Mother4" 0)
            (place Stack "Father5" 0)
            (place Stack "Djinn5" 0)
            (place Stack "Mother5" 0)
            (place Stack "Father6" 0)
            (place Stack "Djinn6" 0)
            (place Stack "Mother6" 0)
            (place Stack "Father7" 0)
            (place Stack "Djinn7" 0)
            (place Stack "Mother7" 0)
        })
        >
    "The game has 7 players.")
    (item "8" <8>
        <
        (start {
            (place Stack "Father1" 0)
            (place Stack "Djinn1" 0)
            (place Stack "Mother1" 0)
            (place Stack "Father2" 0)
            (place Stack "Djinn2" 0)
            (place Stack "Mother2" 0)
            (place Stack "Father3" 0)
            (place Stack "Djinn3" 0)
            (place Stack "Mother3" 0)
            (place Stack "Father4" 0)
            (place Stack "Djinn4" 0)
            (place Stack "Mother4" 0)
            (place Stack "Father5" 0)
            (place Stack "Djinn5" 0)
            (place Stack "Mother5" 0)
            (place Stack "Father6" 0)
            (place Stack "Djinn6" 0)
            (place Stack "Mother6" 0)
            (place Stack "Father7" 0)
            (place Stack "Djinn7" 0)
            (place Stack "Mother7" 0)
            (place Stack "Father8" 0)
            (place Stack "Djinn8" 0)
            (place Stack "Mother8" 0)
        })
        >
    "The game has 8 players.")
})

//------------------------------------------------------------------------------

(rulesets {

    (ruleset "Ruleset/Sig (El Oued) (Observed)" {
        "Players/4"
        }
        variations:{"Players/2" "Players/3" "Players/5" "Players/6" "Players/7" "Players/8"}
    )*

})

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Sig is a name use for many different games in Saharan Africa. This version is played in El Oued, Algeria, and is a representation of the Hajj taken by a father, a mother, and a djinn.")
        (rules "5x5 grid, with six spaces extending up from the rightmost column. The central space of the grid is the minaret, the final three spaces in the extending track are Cairo, Medina, and Mecca. Three pieces per player, each having one father, one mother, and one djinn, which all begin on the first space. The track is boustrophedon, starting in the bottom left corner and moving to the right, until it reaches the top right corner where it proceeds down the extended track. Six sticks, used as dice, with one polished side and one rough side. Throws equal the number of polished sides which land face-up, with the following exceptions: five polished or five rough sides = sig, this grants a move of one plus another throw, in which the player moves the number of polished sides up, six polished = sig of 6, grants the player another throw, and the player moves the number of polished sides up; if the second throw is regular sig, the value is 7, six rough = sig of twelve, grants the player three throws and the player moves the number of polished sides up; if any of those three extra throws are a regular sig, the total value of the extra throws is 13. Pieces move one at a time from the starting space. The first piece to move is the father, the second the djinn, and the third is the mother. The djinn moves twice the value of the throw in any space that does not require a sig to move through it. A player must throw a regular sig to leave the starting space; when they do, they move one space and throw again. When a player passes the piece of an opponent, the opponent's piece returns to the starting space and must enter the board according to the same rules. Certain spaces require a throw of sig to move into and out of them. This means that the move of 1 given by the regular sig can be used to do this, but the extra throw granted by it does not; however, the total value awarded by a sig of six or twelve does count. These are the Minaret, and all of the spaces in the extended track. If a player cannot enter a space because their is not a sig attached to their throw, they stop their move at the point before it. The space for Cairo counts for three of the value of the throw. When a piece reaches Mecca and there is still value left in the throw, the next piece may be entered and moved using the remaining moves left in the throw. The djinn is entered when the father reaches Mecca, and the mother is entered once the djinn reaches Mecca. The first player to place all of their pieces on Mecca wins.")
        (source "Bellin 1964: 56-59.")
        (version "1.3.0")
        (classification "board/race/reach")
        (credit "Eric Piette")
        (origin  "This game was played in Algeria, around 1964.")
        }
    )

    (graphics {
        (show Symbol "disc" ("Minaret") scale:0.5)
        (board Colour Phase0 (colour 223 178 110))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (piece Scale "Djinn" 0.25)
        (piece Scale "Mother" 0.5)
        (piece Scale "Father" 0.75)
        (piece Rename piece:"Mother" "Stick")
        (piece Rename piece:"Father" "Stick")
        (piece Rename piece:"Djinn" "Stick")
        (stackType 0 Ground)
    })

)
