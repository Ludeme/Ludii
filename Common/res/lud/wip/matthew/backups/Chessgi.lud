(define "CapturePiece"
    (apply
        (if (is Enemy (who at:(to)))
            (add
                (piece (mapEntry "Captured" (what at:(to))))
                (to (mapEntry "Where" (what at:(to))))
            )
        )
    )
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:#1 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            ("PieceHasMoved" (last To))
        )
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply
        (if (is Enemy (who at:(to)))
            (add
                (piece (mapEntry "Captured" (what at:(to))))
                (to (mapEntry "Where" (what at:(to))))
                (then (set Counter))
            )
        )
    )
)

(define "KingNotCheckedAndToEmpty"
    (and
        (is Empty (to))
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "DecideToCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        (to
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        (to
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (if (is Enemy (who at:(ahead (last To) Backward)))
                (add
                    (piece (mapEntry "Captured" (what at:(to))))
                    (to (mapEntry "Where" (what at:(to))))
                    (then (set Counter))
                )
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply
                (add
                    (piece (mapEntry "Captured" (what at:(to))))
                    (to (mapEntry "Where" (what at:(to))))
                    (then (set Counter))
                )
            )
        )
    )
)

(define "PlacePawn"
    (move
        (from (sites Occupied by:#1 container:"Hand" component:"Pawn"))
        (to (difference (sites Empty) (sites #1 "LastRank")))
    )
)

(define "PlaceKnight"
    (move
        (from (sites Occupied by:#1 container:"Hand" component:"Pawn"))
        (to (sites Empty))
    )
)

(define "PlaceQueen"
    (move
        (from (sites Occupied by:#1 container:"Hand" component:"Pawn"))
        (to (sites Empty))
    )
)

(define "PlaceRook"
    (move
        (from (sites Occupied by:#1 container:"Hand" component:"Pawn"))
        (to (sites Empty))
    )
)

(define "PlaceBishop"
    (move
        (from (sites Occupied by:#1 container:"Hand" component:"Pawn"))
        (to (sites Empty))
    )
)

(define "InLastRank"
    (is In #1 (sites Mover "LastRank"))
)

//------------------------------------------------------------------------------

(game "Chessgi"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    "CaptureToPieceAndResetCounter"
                )
            )
        )

        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        (regions "LastRankP1" P1 (sites Top))
        (regions "LastRankP2" P2 (sites Bottom))

        (map "Where" {
            (pair (id "Rook" P1) (handSite P2)) (pair (id "Rook" P2) (handSite P1))
            (pair (id "Bishop" P1) (handSite P2 1)) (pair (id "Bishop" P2) (handSite P1 1))
            (pair (id "Queen" P1) (handSite P2 2)) (pair (id "Queen" P2) (handSite P1 2))
            (pair (id "Pawn" P1) (handSite P2 3)) (pair (id "Pawn" P2) (handSite P1 3))
            (pair (id "Knight" P1) (handSite P2 4)) (pair (id "Knight" P2) (handSite P1 4))
        })
        (map "Captured" {
            (pair (id "Rook" P1) (id "Rook" P2)) (pair (id "Rook" P2) (id "Rook" P1))
            (pair (id "Bishop" P1) (id "Bishop" P2)) (pair (id "Bishop" P2) (id "Bishop" P1))
            (pair (id "Queen" P1) (id "Queen" P2)) (pair (id "Queen" P2) (id "Queen" P1))
            (pair (id "Pawn" P1) (id "Pawn" P2)) (pair (id "Pawn" P2) (id "Pawn" P1))
            (pair (id "Knight" P1) (id "Knight" P2)) (pair (id "Knight" P2) (id "Knight" P1))
        })

        (hand Each size:5)
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
        })

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do
                    (or {
                        (forEach Piece)
                        (if (and
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover))
                            )
                            (or
                                (if (and
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                        ("PlacePawn" Mover)
                        ("PlaceKnight" Mover)
                        ("PlaceQueen" Mover)
                        ("PlaceRook" Mover)
                        ("PlaceBishop" Mover)
                        }
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )

        (end {
            (if (and
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                )
                (result Mover Win)
            )
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw))
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "A chess variant similar to bughouse chess, but with only two players. It effectively incorporates a rule from the game shogi, in which a player can introduce a captured piece back to the chessboard as their own.")
        (aliases {"drop chess" "mad chess" "reinforcement chess" "turnabout chess" "schizo-chess" "Mad Mate" "Neo Chess" "loop chess" "Crazyhouse"})
        (rules "All rules of normal chess apply, except for the following rule, which seems to be borrowed from Shogi: when a piece is taken, it changes sides, and is available for the other player to be `parachuted', or `dropped' on the board. A player may drop a piece instead of a normal move. The only restriction on dropping is that a pawn may not be dropped on the 8th rank.")
        (source "<a href=\"http://www.chessvariants.org/other.dir/chessgi.html\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Chess Variants</a>")
        (version "1.2.11")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Matthew Stephenson")
        (author "Ralph Betza")
        }
    )

    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

)
