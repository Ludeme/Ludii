(define "KingInTheInitialPlace"
    (= (what at:(mapEntry "King" (mover))) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "PieceHasMoved"
    (set State at:(last To) 0)
)

(define "RememberPieceHasMoved"
    (then
        (if
            (= (state at:(last To)) 1)
            "PieceHasMoved"
        )
    )
)

(define "DoCastle"
    (move
        Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "SmallCastling"
    ("DoCastle" "King" E 2 (is Empty (to)) (then (and ("PieceHasMoved") ("DoCastle" "RookRight" W 2 True))))
)

(define "BigCastling"
    ("DoCastle" "King" W 2 (is Empty (to)) (then (and ("PieceHasMoved") ("DoCastle" "RookLeft" E 3 True))))
)

(define "SetEnPassantLocation"
    (then
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide
        Forward
        (between (exact 2) if:(is Empty (between)))
        (to if:(is Empty (to)))
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "EnPassant"
    (move
        Step
        (directions {FR FL})
        (to if:"InLocationEnPassant")
        (then
            (remove
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Skirmish (GDL) Competition"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))

        (piece "Pawn" Each
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (if (is In (last To) (sites Mover "Promotion"))
                        (moveAgain)
                    )
                )
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    (apply (remove (to) ))
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    (apply (remove (to) ))
                )
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    (apply (remove (to) ))
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    (apply (remove (to) ))
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    (apply (remove (to) ))
                )
            )
        )

        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
        }
    )
    (rules
        (start
            {
            (place "Knight1" (sites Row 1))
            (place "Knight2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
            }
        )

        (play
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (or
                    (forEach Piece)
                    (if (and {
                            "KingInTheInitialPlace"
                            ("HasNeverMoved" "King")
                        })
                        (or
                            (if (and
                                    ("HasNeverMoved" "RookLeft")
                                    (can Move ("DoCastle" "RookLeft" E 3 (is Empty (to))))
                                )
                                "BigCastling"
                            )
                            (if (and
                                    ("HasNeverMoved" "RookRight")
                                    (can Move ("DoCastle" "RookRight" W 2 (is Empty (to))))
                                )
                                "SmallCastling"
                            )
                        )
                    )
                )

            )
        )
        (end
            (if (or (no Moves Next) (= (count Moves) 100))
                (byScore {
                    (score P1 (count Pieces P1))
                    (score P2 (count Pieces P2))
                })
            )
        )
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Skirmish, a Chess variant by Alex Landau, has the same rules as Chess, but without checkmate and with a 100 turn limit.")
        (rules "The rules are the same as in Chess, without checkmate. The game is won either after 100 turns or when one player can no longer move, by the player with the most pieces.")
        (source "<a href=\"http://games.ggp.org/base/games/skirmishZeroSum/v0/skirmishZeroSum.kif\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />GDL version</a>")
        (version "1.2.5")
        (classification "board/war/replacement/eliminate/all")
        (author "Alex Landau")
        (credit "Eric Piette")
        (date "2005")
        }
    )

    (graphics {
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Skirmish (GDL)_ai"
    )

)
