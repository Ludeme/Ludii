(define "Capture"
    (forEach
        Site
        (sites Board)
        (apply
            if:(and
                (is Next (who at:(site)))
                (=
                    0
                    (count Sites
                        in:(intersection
                            (sites Empty)
                            (sites Around (site) includeSelf:True)
            ))))
            (remove (site))
)))

(define "PlaceOutOfSight"
    (move
        Add
        (to (sites Empty)
            if:(not "TooClose")
        )
        (then
            (do ("Capture") next:("UpdateScore"))
)))

(define "TooClose"
    (is
        Within (id "Disc" Mover)
        in:(intersection
            (sites LineOfSight Piece at:(to))
            (sites Direction from:(to) distance:<Placement:distance>)
)))

(define "Move2Friends"
    (move Step
        (to
            if:(and
                (is Empty (to))
                (lt (count Pieces Mover in:(sites Around (from)))
                    (- (count Pieces Mover in:(sites Around (to))) 1)
        )))
        (then
            (do ("Capture") next:("UpdateScore"))
)))

(define "MoveFromEnemies"
    (move Step
        (to
            if:(and
                (is Empty (to))
                (gt (count Pieces Next in:(sites Around (from)))
                    (count Pieces Next in:(sites Around (to)))
        )))
        (then
            (do ("Capture") next:("UpdateScore"))
)))

(define "UpdateScore"
    (and
        (set Score Mover
            (/
                (+ (results
                        from:(sites Occupied by:Mover)
                        to:(sites Around (from) if:(is Mover (who at:(to))))
                        1
                    )
                )
                2
            )
        )
        (set Score Next
            (/
                (+ (results
                        from:(sites Occupied by:Next)
                        to:(sites Around (from) if:(is Next (who at:(to))))
                        1
                    )
                )
                2
            )
        )
    )
)

(define "Goats"
    (piece Foreground P1 "Disc" image:"mountainGoat-alt3" fillColour:(colour 255 255 255) )
    (piece Colour P1 "Disc" fillColour:(colour 255 255 255 120) strokeColour:(colour 62 72 55))
    (piece Foreground P2 "Disc" image:"mountainGoat-alt3" fillColour:(colour 60 60 60 ))
    (piece Colour P2 "Disc" fillColour:(colour 0 0 0 110) strokeColour:(colour 40 48 36))
    (piece Rotate P2 degrees:180)
)

(define "GoatsNeg"
    (piece Foreground P1 "Disc" image:"mountainGoat-alt3" fillColour:(colour 255 255 255) )
    (piece Colour P1 "Disc" fillColour:(colour 255 255 255 120) strokeColour:(colour 62 72 55))
    (piece Foreground P2 "Disc" image:"mountainGoat-alt3" fillColour:(colour 30 30 30 ) edgeColour:(colour 240 240 240))
    (piece Colour P2 "Disc" fillColour:(colour 0 0 0 110) strokeColour:(colour 40 48 36))
    (piece Rotate P2 degrees:180)
)

//------------------------------------------------------------------------------

(game "Goats Wintering"
    (players 2)
    (equipment
        {
        (board <BoardSize:gridType> use:Cell )
        (piece "Disc" P1)
        (piece "Disc" P2)
        }
    )
    (rules
        (start (set Score Each 0))
        (play
            (or
                {
                (move Pass)
                ("PlaceOutOfSight")
                (forEach Piece
                    (or
                        ("Move2Friends")
                        (if
                            (and
                                (not (was Pass))
                                (not (can Move ("Move2Friends")))
                            )
                            ("MoveFromEnemies")
                )))
                }
        ))
        (end
            {
            (if
                (and
                    (all Passed)
                    (gt (score Mover) (score Next))
                )
                (result Mover Win)
            )
            (if
                (and
                    (all Passed)
                    (le (score Mover) (score Next))
                )
                (result  Next Win)
            )
            }
)))

//------------------------------------------------------------------------------

(option "Board Size" <BoardSize> args:{<gridType>}
    {
    (item "2 Limp"  <(hex Limping 2)>   "Edge 2,3 Hex board")
    (item "3 Limp"  <(hex Limping 3)>   "Edge 3,4 Hex board")**
    (item "4 Limp"  <(hex Limping 4)>   "Edge 4,5 Hex board")
    (item "5 Limp"  <(hex Limping 5)>   "Edge 5,6 Hex board")
    (item "6 Limp"  <(hex Limping 6)>   "Edge 6,7 Hex board")
    (item "10 limp" <(hex Limping 10)>   "Edge 10,11 Hex board")
    (item "4x4"    <(rotate 45 (square 4))>   "Order 4 Diamond board")*
    (item "5x5"    <(rotate 45 (square 5))>   "Order 5 Diamond board")
    (item "6x6"    <(rotate 45 (square 6))>   "Order 6 Diamond board")
    (item "7x7"    <(rotate 45 (square 7))>   "Order 7 Diamond board")
    (item "8x8"    <(rotate 45 (square 8))>   "Order 8 Diamond board")
    (item "9x9"    <(rotate 45 (square 9))>   "Order 9 Diamond board")
    (item "6 Tri"  <(hex Triangle 6)> "Order 4 Near Triangle board")
    (item "7 Tri"  <(hex Triangle 7)> "Order 5 Near Triangle board")
    (item "8 Tri"  <(hex Triangle 8)> "Order 6 Near Triangle board")
    (item "9 Tri"  <(hex Triangle 9)> "Order 7 Near Triangle board")
    (item "10 Tri" <(hex Triangle 10)> "Order 8 Near Triangle board")
    (item "11 Tri" <(hex Triangle 11)> "Order 9 Near Triangle board")
    }
)

(option "Placements" <Placement> args:{<distance>}
    {
    (item "Gap 2" <2> "Placements must leave a gap of 2 spaces if in sight of a friendly piece")
    (item "Gap 3" <3> "Placements must leave a gap of 3 spaces if in sight of a friendly piece")***
    }
)

(option "Graphics" <Goat> args:{<defs>}
    {
    (item "Discs" < > "No graphic on pieces")
    (item "Goats" <"Goats"> "Goat graphics - Custom if mountainGoat-alt3.svg is in Ludii directory")**
    (item "Goats Negative" <"GoatsNeg"> "Goat (color reversal) - Custom  if mountainGoat-alt3.svg is in Ludii directory")
    }
)

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "'Goats Wintering' gives the impression of goats gathering into herds in a sheltered area as winter approaches.
            The goal is to maximize the connections between the goats. However, goats may not be placed too close to others of their kind along sight-lines. So there is tension in who can place and move their goats together most efficiently.

            The novel movement mechanism is that a goat's movement is restricted to steps that increase its friendly contact, -- or, when increasing friendly contact is not avaiable to it, steps that decrease its contact with competing goats.

            When goats get close enough to others of their kind, they can then thus move to join a flock and increase the connections. But frequently they will need the presence of the opponent's goats to be able to get this close to their own flocks. This is because goats allow movement choices for any goats near them: isolated goats can't move. So, the tension is in finding places to enter one's goats that are at a suitable range to gather them together.

            There is capture: Moves that fully surround any of the opponents goats cause those goats to leave the play area.
            To prevent cycling, the subordinate kind of goat move is not allowed after a pass. This allows a player with a strong lead to pass until the other player runs out of moves and the game ends.

            The game is inspired from Infuse by the same Author, but the clumping here is more open and pronounced and clumps are distance-limited, not line-of-sight limited.

        It may be played on either hex grids with adjacent movement, or square grids with ortho-diagonal diagonal movement.")
        (rules "--- Goal: Have the warmest goats at end.  The warmth of you goats is the total number of contacts they have with other goats. To find the winner, it is only necessary to count goat-to-goat contacts between their own kind.

            The game start on an empty board. Play alternates.

            On a turn either:
            1. Pass (sometimes this is forced); or

            2. Place a goat on an empty cell that is not too close to another goat of its color:
            -- If they are in line, they need gap of 2 or 3 spaces (as selected in Options.)

            3. Move one of your goats one step with the following condition:
            -- the goat must gain more contacts with adjacent goats of its own kind than before; or

            4. Use the following alternate condition to step-move a goat that cannot move using the previous rule:
            -- the step must reduce your goat's net contact with enemy goats.

            Exception: Moves using rule 4. are not allowed immediately after the previous player has passed.

            Capture
            -- After moving, simultaneously remove all individual enemy goats that have no adjacent space empty.
            -- Capturing does not happen on a passing turn: to capture one must play a piece.

            Ending the game
            -- The game ends with 2 passes. Then the number of connections are compared.
            -- In the case of a tie, the last to pass loses.

        Variants not implemented: No capture. / Score simple goat count.")
        (version "1.3.0")
        (classification "experimental")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "19-11-2020")
        }
    )
    (graphics
        {
        (board Colour Phase0 (colour 124 145 111))
        (board Colour InnerEdges (colour 62 72 55))
        (board Colour OuterEdges (colour 62 72 55))
        (board StyleThickness OuterEdges 2.0)
        <Goat:defs>
        }
    )
    (ai
        "Goats Wintering_ai"
    )
)
