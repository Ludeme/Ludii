(define "PlayableGroupSites"
    (sites Around (sites) Orthogonal
        if:(and
            (is Empty #2)
            (not
                (is In
                    #2
                    (sites Around
                        (difference
                            (sites Occupied by:#1)
                            (sites)
                        )
                        Orthogonal
        ))))
))

//---------------------------------------
(game "Sprout-R-Out"
    (players 2)
    (equipment
        {
        (board (trim <Board:type>) use:Cell)
        (piece "Ball" Each )
        (piece "Ball" Neutral)
        }
    )
    (rules
        (play
            (if
                (> 0 (counter))
                (move Add
                    (to
                        (sites Empty)
                        (apply (set State at:(to) 1))
                ))
                (forEach Group
                    Orthogonal
                    if:(and
                        (= (next) (who at:(to)))
                        (= 1 (state at:(to)))
                    )
                    (move Add
                        (to
                            ("PlayableGroupSites" Next (to))
                            (apply
                                (forEach Site
                                    (sites)
                                    (set State at:(site) 0)
                        )))
                        (then
                            (if
                                (!= 0
                                    (count Sites
                                        in:(intersection
                                            (sites Occupied by:Next)
                                            (sites State 1)
                                )))
                                (moveAgain)
                                (do
                                    (forEach Site
                                        (sites State 2)
                                        (remove (site))
                                    )
                                    next:(do
                                        (forEach Group
                                            Orthogonal
                                            if:(= (mover) (who at:(to)))
                                            (if
                                                (= 0
                                                    (count Sites
                                                        in:("PlayableGroupSites" Mover (to))
                                                ))
                                                (forEach Site (sites)
                                                    (set State at:(site) 2)
                                                )
                                                (forEach Site (sites)
                                                    (set State at:(site) 1)
                                        )))
                                        next:(set Value Mover (score Mover)
                                            (then
                                                (set Score Mover
                                                    (+
                                                        (count Sites
                                                            in:(sites State 1)
                                                        )
                                                        (count Sites
                                                            in:(forEach
                                                                (sites Empty)
                                                                if:(= Infinity
                                                                    (count Steps Orthogonal
                                                                        (step (to if:(not (is Mover (who at:(to))))))
                                                                        (site)
                                                                        (sites Occupied by:Next)
                                                    )))))
                                                    (then
                                                        (if
                                                            (and
                                                                (= (score Mover) (value Player Mover))
                                                                (= (score Next) (value Player Next))
                                                            )
                                                            (trigger "End" Mover)
        )))))))))))))
        (end
            (if
                (and
                    (is Triggered "End" Mover)
                    (is Triggered "End" Next)
                )
                (byScore)
))))

//------------------------------------

(option "Board Size" <Board>
    args:
    {
    <type>
    }
    {
    (item "Limping 3" <(hex 3 4)> "Order 3 limping board")*
    (item "Limping 5" <(hex 5 6)> "Order 5 limping board")
    (item "Limping 7" <(hex 7 8)> "Order 7 limping board")
    (item "Cairo 1"
        <(remove (dual (tiling T33434 5)) cells: {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 20 21 24 27 28 29 35 36 39 40 44 45 46 47 53 54 55 59 60 64 65 71 72 76 79 85 90 93 94 95 96 97 98 99})>
        "Using an order 1 Cairo board with 48 cells"
    )

    (item "Cairo 2"
        <(remove (dual (tiling T33434 9)) cells: {})>
        "Using an order 2 Cairo board with 160 cells"
    )
    }
)

//----------------------------------------------------------
(metadata
    (info
        {
        (description "Sprout-R-Out is a newly invented territorial game for Cairo and limping Hex boards based on an original placement protocol:
            Players place one stone next to each opponent's group, but without touching any other group. Any group that cannot be played beside is removed.

            This creates an capture dynamic superficially like Go where groups get overgrown and die.  Unlike Go, a single, isolated eye, once formed, is enough to give life.

            On the other hand, even multiple larger eyes can be insufficient for life, because the timing of capture and the requirement to play against every opponent's group if possible, can leave multiple eyes filled with uncaptured stones.

            The feeling of the game definitely not like Go. The game is more tactical because placements are constrained to be adjacent to existing pieces, and multiple pieces are played per turn.

        Spreading pieces out to quickly surround the opponent during your turn can easily backfire, as it leads to more opponent placements and fewer locations needed by the opponent to surround your pieces.")
        (rules "Goal:
            Highest score when the scores stop changing. Scores are based on territory described later.

            Play:
            First move by Black is a free placement to any cell.

            Thereafter each player places a series of stones, one for each of the opponent's groups, on empty cells adjacent to only the respective group.

            When there is no cell available beside a particular group, that group is removed at the end of the turn.

            The application starts a player's turn by making every opponent's stone transparent. Groups that will be removed at the end of the turn are given a reddish hue. As stones are placed, the associated group turns back to a solid color to show that no more stones may be played next to it.

            When the last stone has been placed the red tinted stones immediately disappear and the process begins again for the next player.

            Scoring:
            Scores are calculated by imagining that at the begining of a turn the red tinted stones have been removed. Then the remaining stones are counted by player, together with the spaces that they enclose. Spaces that are adjacent to both players, or connected to both players by a series of adjacent empty cells, are not counted.

            The application keeps this count for you.  When the count no longer changes after both players have taken their turns the game officially ends.  The result is normally clear well in advance, but may require careful checking for groups that don't contain a single-cell eye.

        (Future option not implemented: First move is a pie offering with associated victory points (Komi))")
        (source "Dale W. Walton  (<a href=\"https://boardgamegeek.com/thread/2709549\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>)
        ")
        (version "1.3.0")
        (classification "experimental")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "21-08-2021")
        }
    )

    (define "ColourP1" (colour Black))
    (define "ColourP2" (colour 252 255 234 #1))

    (graphics
        {
        (player Colour P1 ("ColourP1" ~))
        (player Colour P2 ("ColourP2" ~))
        (piece Scale Neutral "Ball" 1.2)
        (piece Scale P1 "Ball" 0.99)
        (piece Scale P2 "Ball" 0.97)
        (piece Colour P1 "Ball" state:0 fillColour:(colour Black))
        (piece Colour P2 "Ball" state:0 fillColour:(colour White))
        (piece Colour P1 "Ball" state:1 fillColour:(colour 0 0 0 80))
        (piece Colour P2 "Ball" state:1 fillColour:(colour 255 255 255 100))
        (piece Colour P1 "Ball" state:2 fillColour:(colour 60 0 0 100))
        (piece Colour P2 "Ball" state:2 fillColour:(colour 255 180 180 100))
        (board Colour Phase0 (colour 202 189 171))// (colour 246 236 213)
        (board Colour OuterEdges (colour 0 0 0))
        (board Colour InnerEdges (colour 0 0 0))
        (board StyleThickness OuterEdges 1.0)
        (board StyleThickness InnerEdges 0.5)
        }
))

