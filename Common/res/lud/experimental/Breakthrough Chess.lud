(define "CaptureForwardDiagonal"
    (move
        Step
        (directions {FR FL})
        (to
            if:(is Enemy (who at:(to)))
            (apply (remove (to)))
        )
    )
)

(define "ReachedTarget" (is In (last To) (sites Mover)) )

(define "LastMoveWasKnight"
    (= (what at:(last To)) (id "Knight" Mover))
)

(define "LastMoveWasPawn"
    (= (what at:(last To)) (id "Pawn" Mover))
)

//------------------------------------------------------------------------------

(game "Breakthrough Chess"
    (players {(player N) (player S)})
    (equipment {
        (board (square 8))

        (piece "Pawn" Each
            (or
                "StepForwardToEmpty"
                "CaptureForwardDiagonal"
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Orthogonal
                (to
                    if:(is Enemy (who at:(to)))
                    (apply (remove (to) ))
                )
            )
        )
        (piece "King" Each
            (move
                Step
                (to
                    if:(not (is Friend (who at:(to))))
                    (apply (remove (to) ))
                )
            )
        )
        (piece "Bishop" Each
            (move
                Slide
                Diagonal
                (to
                    if:(is Enemy (who at:(to)))
                    (apply (remove (to) ))
                )
            )
        )
        (piece "Knight" Each
            (move
                Leap
                "KnightWalk"
                (to
                    if:(not (is Friend (who at:(to))))
                    (apply (remove (to) ))
                )
            )
        )
        (piece "Queen" Each
            (move
                Slide
                (to
                    if:(is Enemy (who at:(to)))
                    (apply (remove (to) ))
                )
            )
        )
        (regions P1 (sites Top))
        (regions P2 (sites Bottom))
        }
    )
    (rules
        (start
            {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1)
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)
            }
        )

        (play
            (forEach Piece)
        )
        (end (if (and "ReachedTarget" (or "LastMoveWasKnight" "LastMoveWasPawn")) (result Mover Win)))
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "A variant of Breakthrough played with Chess pieces and rules (mostly).")
        (rules "Chess-Breakthrough is played using a regular chess board and pieces and from the standard chess start position. The first player to place a pawn or a knight on the opponentâ€™s backrank wins (thus no promotions). The normal chess rules for piece movements have also been slightly modified to fit our simplified boardgame framework: castling, en-passant, and two-step pawn moves are not allowed; a king can be moved into and left in check (and thus captured); and the draw-by-threefold-repetition and 50-move rules do not apply.")
        (version "1.3.0")
        (classification "experimental")
        (credit "Matthew Stephenson")
        }
    )

    (graphics {
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })

    (ai
        "Breakthrough Chess_ai"
    )
)
