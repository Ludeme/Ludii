//----------------------------
//Utility defines

(define "DestinationGroupSize"
    (count Sites
        in:(sites Distance Orthogonal
            (step (to if:(and (!= (var "From") (to)) (is Mover (who at:(to))))))
            from:(to)
            (min 0)
)))

(define "PlayableSite" (difference <Board:area> (sites Occupied by:Mover)))
(define "IsPlayableSiteType" (is In (to) ("PlayableSite")))
(define "AlongLine" (sites Distance (step #1 (to if:True)) from:(from) (min 1)))
(define "FurtherAlongLine" (sites Distance (step #1 (to if:True)) from:(to) (min 1)))

(define "MoveTowardFriendInSameLine"
    (< 0 (count Pieces Mover in:("FurtherAlongLine" #1)))
)

(define "MoveToSiteWithFriendVisible"
    (< 1 (count Pieces Mover in:(sites LineOfSight Piece at:(to) Orthogonal)))
    //1 because it counts the moving piece as visible, since it was in the from location
)

(define "ValueAtTo"
    (max
        1
        (max
            (results
                from:(last To)
                to:("FirstFriend" Orthogonal)
                (size Group at:(to) Orthogonal if:(= (mover) (who at:(to))))
))))

(define "ValueAtFrom"
    (set Var "MaxSizeFrom"
        (max
            1
            (max
                (results
                    from:(from)
                    to:("FirstFriend" Orthogonal)
                    (size Group at:(to) Orthogonal if:(= (mover) (who at:(to))))
)))))

(define "FirstFriend"
    (sites To
        (move Hop
            #1
            (between (min 0)
                if:(or
                    {
                    (= (from) (between))
                    (is Next (who at:(between)))
                    (is Empty (between))
                    }
            ))
            (to <Board:area> if:(is Mover (who at:(to))))
)))
//--------------------------------------------------------
// Variants

(define "MoveOrLOSCapture"
    (forEach Piece
        (or
            (move
                (from)
                (to (sites LineOfSight Piece at:(from))
                    if:(is Next (who at:(to)))
                    (apply (remove (to)))
            ))
            (<Game:option>)
)))

(define "PriorityMoveOverCaptureByPiece"
    (forEach Piece
        (priority
            (<Game:option>)
            (move
                (from)
                (to (sites LineOfSight Piece at:(from))
                    if:(is Next (who at:(to)))
                    (apply (remove (to)))
            ))
)))

(define "PriorityCaptureOverMoveByPiece"
    (forEach Piece
        (priority
            (move
                (from)
                (to (sites LineOfSight Piece at:(from))
                    if:(is Next (who at:(to)))
                    (apply (remove (to)))
            ))
            (<Game:option>)
)))

(define "Shakattrition"
    (do
        (set Var "OriginGroupSize" (size Group at:(from))
            (then (set Var "From" (from)))
        )
        next:(move
            (from (from))
            (to
                (intersection <Board:area> (sites Around (from) if:(is Empty (to))))
                if:(<=
                    (var "OriginGroupSize")
                    ("DestinationGroupSize")
)))))

//-----------------------------------------------
// Main routine

(game "Conflagration and Keep-a-riding"
    (players 2)
    (equipment
        {
        (board (hex Hexagon <Board:side>) use:Cell)
        (piece "Disc" Each)
        }
    )
    (rules
        (start {<Board:white> <Board:black>})
        (play
            <Game:structure>
        )
        (end
            <Game:winCondition>
)))

//--------------------------------------
// End conditions

(define "IsSingleGroupOf"
    (= 1
        (count Groups Cell Orthogonal
            if:(is #1 (who at:(to)))
)))

(define "StandardEnd"
    (if
        (or
            {
            (no Moves Next)
            ("IsSingleGroupOf" Mover)
            ("IsSingleGroupOf" Next)
            }
        )
        {
        (if
            ("IsSingleGroupOf" Mover)
            (result Mover Win)
        )
        (if
            ("IsSingleGroupOf" Next)
            (result Next Win)
        )
        ("Last2MoveEnd")
        }
))

(define "AMSEnd" (if (no Moves Next) (result Mover Loss)))
(define "Last2MoveEnd" (if (no Moves Next) (result Mover Win)))

//-------------------------------------------------
// Options

(option "Game" <Game> args:{<structure> <option> <winCondition> <token>}
    {
    (item "Keep-a-riding, last team to move wins, Step to group (else slide capture)"
        <"PriorityMoveOverCaptureByPiece">
        <"Shakattrition"> <"Last2MoveEnd">
        <"Motorbike">
        "Shakattrition - Pieces can slide to Capture when they can't step to join larger group - Last to move"
    )

    (item "Conflagration, Win when extinguished or contained, Step to group or Slide-capture"
        <"MoveOrLOSCapture">
        <"Shakattrition"> <"AMSEnd">
        <"Fire">
        "Conflagration, A piece can either take a single step to join a larger group, or slide to capture an opponent's piece - A misere game, meaning you win when your fires are all contained or extinguished (that is, when you can't move on your turn.)"
    )***

    (item "Conflagration, Firestorm Variant (longer), Step to group (else Slide-capture)"
        <"PriorityMoveOverCaptureByPiece">
        <"Shakattrition"> <"AMSEnd">
        <"Fire">
        "Conflagration, Firestorm Variant (longer), A piece can only slide to capture when it cannot step to join a larger group. - Misere = Win when your fire(s) are all contained or extinguished (i.e. you can't move)"
    )

    (item "Conflagration, Backfire Variant (shorter), Slide-caputure (else step to group)"
        <"PriorityCaptureOverMoveByPiece">
        <"Shakattrition"> <"AMSEnd">
        <"Fire">
        "Conflagration, Backfire Variant (shorter), A piece can only step to join a larger group when it cannot slide to capture. - Misere = Win when your fire(s) are all contained or extinguished (i.e. you can't move)"
    )
    }
)

(option "Board Size" <Board> args:{<side> <area> <white> <black>}
    {

    (item "Order 4"
        <5>
        <(sites Inner)>
        <(place "Disc1" {7 12 15 21 24 28 31 38 41 44 47 52})>
        <(place "Disc2" {8 13 16 19 22 29 32 36 39 45 48 53})>
    "Order 4 board")*

    (item "Order 5"
        <5>
        <(sites Board)>
        <(place "Disc1" {0 3 7 10 12 15 18 21 24 28 31 34 35 38 41 44 47 52 55 56 59})>
        <(place "Disc2" {1 4 5 8 13 16 19 22 25 26 29 32 36 39 42 45 48 50 53 57 60})>
    "Order 5 board")

    (item "Order 6"
        <6>
        <(sites Board)>
        <(place "Disc1" {0 3 8 11 14 17 20 21 24 27 32 35 38 41 44 47 50 53 56 59 61 64 67 71 74 77 80 83 85 88})>
        <(place "Disc2" {2 5 7 10 13 16 19 23 26 29 31 34 37 40 43 46 49 52 55 58 63 66 69 70 73 76 79 82 87 90})>
    "Order 6 board")
    }
)

//---------------------------------------------

(define "ColourBackground" (colour 245 245 245))

(metadata
    (info
        {
        (description "Games inspired by Kanare Kato's 'Squish'

            'Mosey' and 'Don't Mosey' are based on Kanare Kato's work developing 'Advanced Squish'.

            Originally 'Squish' was a unification game with step movement toward a friendly piece in-line, possibly involving a capture.  'Advanced Squish' added a requirement on non-capturing steps for the piece to become part of a larger group. (Singletons were exempted.)

            -- 'Keep-a-Riding' and 'Conflagration' differ by being explicitly stalemate games: Last to move wins or loses depending on the game.  They also differ by using slide captures, and by not including the core principle of moving toward a friendly piece in line, but instead requiring the step move to bring the moving piece into new contact with another friendly piece.

            They typically end with only a few pieces on the board, and one player may be entirely eliminated.
            'Keep-a-Riding' is themed as a 'last man standing' team demolition derby.

            In Conflagration, the theme is 'fighting fire with fire': Getting eliminated is a win. Containment, where non of your flamepieces can move, is also a win.
        Conflagration has 2 subvariants 'Firestorm' and 'BackFire' in which the choice of moves that each flame piece can take are prioritized. BackFire is the shorter, more aggressive, because a flame piece must capture (become a 'backfire') if it can. In Firestorm, a flame piece must join its kind if they can, leading to slower elimination of the flames in the end game.")
        (rules "Setup: Pieces of each color are distributed symmetrically on every 3rd cell of the board.
            (For a game on an order 4 board, the outer cells are not used.)

            Goal: Last to move wins or loses, depending on the game chosen.

            -- 'Mosey' and 'Shakattrition': Last to move wins.
            -- 'Don't Mosey' and 'Shakattrition (Misere)': Last to move loses.

            Play
            - Decide which player will play with which color (Dark or Light).
            - Light is the first player to play.
            - Follow the movement rules for the chosen game.

            Passing is not allowed.
            The game ends when a player cannot move.

            Movement rules for 'Mosey' and 'Don't Mosey':

            On each turn, the mover choses a piece and slides it over empty cells towards a friendly piece in the same line (but not necesarily visible from the moving piece's point of view.)

            Restrictions:
            The sliding piece must either:
            - stop on an empty cell next to a friendly piece to form a group of friendly pieces that is larger than the group it started in, or
            - stop on the cell of an enemy piece and remove it.
            - A piece cannot capture another piece of the same color.

            Play for Shakattrition

            On each turn, the mover choses a piece and slides it along a line of empty cells in one of the 6 directions.
            It must either:
            --  become part of a group of friendly pieces that is larger than the group it started in, if this is possible;

            or, if this is not possible for the chosen piece, it must
            -- capture an enemy piece by replacement.

        A piece cannot capture another piece of the same color.")
        (version "1.3.0")
        (classification "experimental")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "14-10-2021")
        }
    )

    (graphics
        {
        (player Colour P1 (colour White))
        (player Colour P2 (colour Black))
        (piece Scale "Disc" 0.91)
        (piece Colour P1 strokeColour:(colour VeryDarkGrey))
        (piece Colour P2 strokeColour:(colour DarkGrey))
        (piece Background "Disc" image:"Disc" fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:0.95 offsetX:-1 offsetY:2)
        (piece Foreground "Disc1" image:<Game:token> fillColour:(colour VeryLightGrey) edgeColour:(colour DarkGrey) scale:0.70)
        (piece Foreground "Disc2" image:<Game:token> fillColour:(colour 255 255 255 60) edgeColour:(colour 255 255 255 120) scale:0.70 )
        (board Colour Phase0 (colour 245 242 222))
        (board StyleThickness InnerEdges 1.6)
        (board StyleThickness OuterEdges 1.6)
        (board StyleThickness InnerVertices 0.45)
        (board StyleThickness OuterVertices 0.45)
        (board Colour InnerVertices (colour Grey))
        (board Colour OuterVertices (colour Grey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (region Colour (sites Outer) (colour 212 206 190))

        }
    )
)
