//----------------------------
//Utility defines

(define "PlayableSite" (difference <Board:area> (sites Occupied by:Mover)))
(define "IsPlayableSiteType" (is In (to) ("PlayableSite")))
(define "AlongLine" (sites Distance (step #1 (to if:True)) from:(from) (min 1)))
(define "FurtherAlongLine" (sites Distance (step #1 (to if:True)) from:(to) (min 1)))
(define "MoveTowardFriendInSameLine" (< 0 (count Pieces Mover in:("FurtherAlongLine" #1))))

(define "FirstFriend"
    (sites To
        (move Hop
            #1
            (between (min 0)
                if:(or
                    {
                    (= (from) (between))
                    (is Next (who at:(between)))
                    (is Empty (between))
                    }
            ))
            (to <Board:area> if:(is Mover (who at:(to))))
)))

(define "DestinationGroupSize"
    (count Sites
        in:(sites Distance Orthogonal
            (step (to if:(and (!= (var "From") (to)) (is Mover (who at:(to))))))
            from:(to)
            (min 0)
)))

//--------------------------------------------------------
// Variants

(define  "AdvancedSquishSlide"
    (do
        (set Var "OriginGroupSize" (size Group at:(from))
            (then (set Var "From" (from)))
        )
        next:(move
            (from (from))
            (to
                ("AlongLine" #1)
                if:(and
                    {
                    (all Sites (sites Between from:(from) to:(to)) if:(is Empty (site)))
                    ("IsPlayableSiteType")
                    ("MoveTowardFriendInSameLine" #1)
                    (or
                        (is Next (who at:(to)))
                        (<=
                            (var "OriginGroupSize")
                            ("DestinationGroupSize")
                    ))
                    }
                )
                (apply
                    (remove (to))
)))))

(define "MoveByDirection"
    (forEach Piece
        (or
            {
            (<Game:option> NNE)
            (<Game:option> E)
            (<Game:option> SSE)
            (<Game:option> SSW)
            (<Game:option> W)
            (<Game:option> NNW)
            }
)))

//-----------------------------------------------
// Main routine

(game "Don't Mosey and The Last Scavenger"
    (players 2)
    (equipment
        {
        (board (hex Hexagon <Board:side>) use:Cell)
        (piece "Disc" Each)
        }
    )
    (rules
        (start {<Board:white> <Board:black>})
        (play
            <Game:structure>
        )
        (end
            <Game:winCondition>
)))

//--------------------------------------
// End conditions

(define "AMSEnd" (if (no Moves Next) (result Mover Loss)))
(define "Last2MoveEnd" (if (no Moves Next) (result Mover Win)))

//-------------------------------------------------
// Options

(option "Game" <Game> args:{<structure> <option> <winCondition> <token>}
    {
    (item "Don't Mosey (a misere game)"
        <"MoveByDirection">
        <"AdvancedSquishSlide"> <"AMSEnd">
        <"Oldman">
        "Don't Mosey - Misere. A piece must slide toward a friendly piece, either to reach a location where it forms a group larger than where it started, or to reach an opponent's piece, which is then removed. Last to move Loses"
    )

    (item "The Last Scavenger (last to move wins)"
        <"MoveByDirection">
        <"AdvancedSquishSlide"> <"Last2MoveEnd">
        <"Crab">
        "The Last Scavenger. A piece must slide toward a friendly piece, either to reach a location where it forms a group larger than where it started, or to reach an opponent's piece, which is then removed. Last to move wins."
    )***

    }
)

(option "Board Size" <Board> args:{<side> <area> <white> <black>}
    {
    (item "Order 4"
        <5>
        <(sites Inner)>
        <(place "Disc1" {7 12 15 21 24 28 31 38 41 44 47 52})>
        <(place "Disc2" {8 13 16 19 22 29 32 36 39 45 48 53})>
    "Order 4 board")*

    (item "Order 5"
        <5>
        <(sites Board)>
        <(place "Disc1" {0 3 7 10 12 15 18 21 24 28 31 34 35 38 41 44 47 52 55 56 59})>
        <(place "Disc2" {1 4 5 8 13 16 19 22 25 26 29 32 36 39 42 45 48 50 53 57 60})>
    "Order 5 board")

    (item "Order 6"
        <6>
        <(sites Board)>
        <(place "Disc1" {0 3 8 11 14 17 20 21 24 27 32 35 38 41 44 47 50 53 56 59 61 64 67 71 74 77 80 83 85 88})>
        <(place "Disc2" {2 5 7 10 13 16 19 23 26 29 31 34 37 40 43 46 49 52 55 58 63 66 69 70 73 76 79 82 87 90})>
    "Order 6 board")
    }
)

//---------------------------------------------

(define "ColourBackground" (colour 245 245 245))

(metadata
    (info
        {
        (description "Games inspired by Kanare Kato's 'Squish'

            'Don't Mosey' and 'The Last Scavenger' are based on Kanare Kato's work developing 'Squish' and 'Advanced Squish'.

            Originally 'Squish' was a unification game with step movement toward a friendly piece in-line, possibly involving a capture.  'Advanced Squish' added a requirement on non-capturing steps for the piece to become part of a larger group. (Singletons were exempted.)

            -- 'Don't Mosey'and 'The Last Scavenger' differ by being explicitly stalemate games: Last to move wins or loses depending on the game.

        They also differ by using slide moves instead of steps, and having a different 'larger group' rule that restricts empty destination choices, but applies to any group formed along the path, and does not restrict captures (which must be the first opponent along the path).")
        (rules "Setup: Pieces of each color start distributed symmetrically on every 3rd cell of the board. (For a game on an order 4 board, the outer cells are not used.)

            Play
            - Decide which player will play with which color (Dark or Light).
            - Light is the first player to play.
            - Passing is not allowed.
            - The game ends when a player cannot move.

            On each turn, the mover chooses a piece and slides it over empty cells towards a friendly piece in the same line (but not necessarily visible from the moving piece's point of view.)

            The sliding piece must either:
            - stop on an empty cell next to a friendly piece to form a group of friendly pieces that is larger than the group it started in, or
        - stop at the first opponent's piece and remove it.")
        (version "1.3.0")
        (classification "experimental")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "12-10-2021")
        }
    )

    (graphics
        {
        (player Colour P1 (colour White))
        (player Colour P2 (colour Black))
        (piece Scale "Disc" 0.91)
        (piece Colour P1 strokeColour:(colour VeryDarkGrey))
        (piece Colour P2 strokeColour:(colour DarkGrey))
        (piece Background "Disc" image:"Disc" fillColour:(colour 0 0 0 75) edgeColour:(colour 0 0 0 0) scale:0.95 offsetX:-1 offsetY:2)
        (piece Foreground "Disc1" image:<Game:token> fillColour:(colour VeryLightGrey) edgeColour:(colour DarkGrey) scale:0.70)
        (piece Foreground "Disc2" image:<Game:token> fillColour:(colour 255 255 255 60) edgeColour:(colour 255 255 255 120) scale:0.70 )
        (board Colour Phase0 (colour 245 242 222))
        (board StyleThickness InnerEdges 1.6)
        (board StyleThickness OuterEdges 1.6)
        (board StyleThickness InnerVertices 0.45)
        (board StyleThickness OuterVertices 0.45)
        (board Colour InnerVertices (colour Grey))
        (board Colour OuterVertices (colour Grey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (region Colour (sites Outer) (colour 212 206 190))

        }
    )
)
