(define "ReachedTarget" (is In (last To) (sites Mover)) )

//------------------------------------------------------------------------------

(game "Breakback"
    (players {(player N) (player S)})
    (equipment {
        (board (<Tiling:type> <Board:size>))
        (piece "Pawn" Each
            (or {
                "StepForwardToEmpty"
                (move
                    Step
                    (directions {FR FL})
                    (to if:(or
                            (is Empty (to))
                            (is Enemy (who at:(to)))
                        )
                        (apply (remove (to)))
                    )
                )
            })
        )
        (regions P1 (sites Top))
        (regions P2 (sites Bottom))
    })
    (rules
        (start {
            (place "Pawn1" (expand (sites Bottom)))
            (place "Pawn2" (expand (sites Top)))
        })

        (play
            (priority
                (forEach Piece ("StepBackwardToEmpty"))
                (forEach Piece)
            )
        )

        (end (if "ReachedTarget" (result Mover Win)))
    )
)

//------------------------------------------------------------------------------

(option "Board" <Tiling> args:{ <type> }
    {
    (item "Square"  <square>  "The board is tiling by square.")*
    (item "Hexagon" <hex> "The board is tiling by hexagon.")
})

(option "Board Size" <Board> args:{ <size> }
    {
    (item "4x4"   <4>  "The game is played on a 4x4 board.")
    (item "5x5"   <5>  "The game is played on a 5x5 board.")
    (item "6x6"   <6>  "The game is played on a 6x6 board.")
    (item "7x7"   <7>  "The game is played on a 7x7 board.")
    (item "8x8"   <8>  "The game is played on a 8x8 board.")*
    (item "9x9"   <9>  "The game is played on a 9x9 board.")
    (item "10x10" <10> "The game is played on a 10x10 board.")
    (item "11x11" <11> "The game is played on a 11x11 board.")
    (item "12x12" <12> "The game is played on a 12x12 board.")
})

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "Breakback is a variation of Breakthrough involving forced backward moves.")
        (rules "The rules are identical to Breakthrough except that if a player can move any of their pieces one step directly backwards to an empty cell then they must.
        If there is more than one such backward move available then the player chooses which one to make.")
        (version "1.3.0")
        (classification "experimental")
        (author "Cameron Browne")
        (credit "Eric Piette")
        (date "13-03-2021")
        }
    )

    (graphics {
        (board Style Chess)
    })

    (ai
        "Breakback_ai"
    )
)
