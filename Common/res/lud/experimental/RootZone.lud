(game "RootZone"
    (players 2)
    (equipment
        {
        (board (tri <Board:size>)  use:Vertex)
        (piece "Disc" Each )
        (piece "Disc" Neutral)
        }
    )
    (rules
        (play
            (if    // want to add that if p1 mover one p2 piece in play option to swap players
                (= -1 (counter))
                (or
                    (move Pass)
                    (move Add (piece "Disc0") (to (sites Board)))
                )
                (or
                    {
                    (if (= 1 (counter))
                        (move
                            Select
                            (from (sites Occupied by:Enemy))
                            (then
                                (remove (last To)
                                    (then (add (to (last To))))
                                )
                            )
                        )
                    )
                    (move Pass)
                    (move Add
                        (to
                            (difference
                                (union
                                    (sites Outer)                             // place on an edge
                                    (sites Around (sites Occupied by:Mover))  // or next to a friendly piece
                                )
                                (union
                                    {
                                    (sites Around (sites Occupied by:Enemy))  // but not next to an enemy piece
                                    (sites Around "SitesTooDense")            // nor next to pieces with too many neighbors
                                    (sites Around (sites Occupied by:Neutral))  // but not next to an enemy piece
                                    }
                                )
                            )
                            if:(and
                                (is Empty (to))  // place on empty location
                                (ge              // with a limit on friendly neighbors
                                    <PlaceBy:qtyMax>
                                    (count Pieces Mover in:(sites Around (to)))
                                )
                            )
                        )
                        (then "ScoreUpdate")
                    )
                    }
                )
            )
        )
        (end
            (if
                (all Passed)
                (byScore)
            )
        )
    )
)
//-------------------------------------------------
(define "SitesTooDense"
    (forEach
        (sites Occupied by:Mover)
        if:(le
            <NeighborsOf:nbrMax>
            (count Pieces Mover in:(sites Around (site)))
        )
    )
)

(define "ScoreUpdate"
    (if
        (gt (* 2 (size Group at:(last To))) (score Mover) )
        (if
            (gt (* 2 (size Group at:(last To))) (score Next))
            (set Score Mover (+ 1 (* 2 (size Group at:(last To)))))
            (set Score Mover (* 2 (size Group at:(last To))))
        )
    )
)

//---------------------------------------

(option "Board Size" <Board> args:{ <size> <bgrd> <ctr> }
    {
    (item "Hex  2-4" <{2 4 2 4 2}> <5.5> <12>  "Board & size: Hexhex with edges alternating 2 and 4")
    (item "Hex  4-6" <{4 6 4 7 4}> <10.3> <50> "Board & size: Hexhex with edges alternating 4 and 6")***
    (item "Hex  6-8" <{6 8 6 10 5}> <14> <112> "Board & size: Hexhex with edges alternating 6 and 8") // bug workaround
    (item "Hex  8-10" <{8 10 9 13 6}> <19> <198> "Board & size: Hexhex with edges alternating 8 and 10") // bug workaround
    (item "Hex  10-12" <{10 12 11 17 6}> <23> <288> "Board & size: Hexhex with edges alternating 10 and 12") // bug workaround
    }
)

(option "Must place beside" <PlaceBy> args:{ <qtyMax> }
    {
    (item " one friendly" <1> "Must place next to exactly one friendly piece,")
    (item " 1-2 friendlies" <2> "Must place next to 1-2 friendly pieces,")*
    (item " 1-3 friendlies" <3> "Must place next to 1-3 friendly pieces,")
    (item " 1-4 friendlies" <4> "Must place next to 1-4 friendly pieces,")
    (item " 1-5 friendlies" <5> "Must place next to 1-5 friendly pieces,")
    (item " any friendly piece(s)" <6> "Place next to any friendly piece(s),")**
    }
)

(option "but not beside those w" <NeighborsOf> args:{ <nbrMax> }
    {
    (item " >1 neighbors" <2> "but not next to pieces that already have more than 1 neighbor.")
    (item " >2 neighbors" <3> "but not next to pieces that already have more than 2 neighbors.")**
    (item " >3 neighbors" <4> "but not next to pieces that already have more than 3 neighbors.")
    (item " >4 neighbors" <5> "but not next to pieces that already have more than 4 neighbors.")
    (item " (no limit)" <6> "but not next to enemy pieces.")*

    }
)

//----------------------------------------------------------
(metadata
    (info
        {
        (description "RootZone is an experimental territorial placement meta-game of the Mycilleum family (i.e. group growth), but based on growth from edges inward, with a goal of largest group, and prohibition on touching enemy positions. The game is played on a triangular grid in the shape of a hexagon that has alternating edges of 2N and 2N+2. This shape is chosen to avoid play points at the center of the board or of its edges.

        The implementation provides a selection of restrictions on the neighborhood of the piece being placed. Non-looping option has not been implemented. The standard is placement next to any number of friendly pieces, but not next to pieces with more than 3 neighbors. Please comment to author about which variants you prefer and why.")
        (rules "Goal: Scoring is based on your largest group (x2), with an extra point given to the first player to create a given size.
            The player with the largest group at the end of the game thus wins, and ties go to the first player to achieve this goal.

            Setup:
            Yellow starts by creating a set-up, then Orange begins actual play - Pass to skip this phase

            To create a set-up, Yellow first places a black blocking stone on any intersection and then a Yellow stone on an empty edge position. Orange then either begins play, or else exchanges the yellow piece with his own.

            Play:
            Players take turns placing their piece on an empty intersection that is either along the edge or next to another fiendly piece, but never adjacent to an enemy position.

            These placements are subject to 2 possible additional restrictions selected by the players before starting:

        A) The number range of friendly neighbors the piece being placed may have: (Standard is to play with no restriction.)

        and/or

    B) The maximum number of neighbors that are allowed for the pieces against which the piece may be placed, with 2 being standard play.

    Ending the game.
Play continues until both players pass consecutively, and then the final scores are compared.")
(source "Dale W. Walton (<a href=\"https://boardgamegeek.com/thread/2499500/rootzone-variant-ant-trails-and-similar\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>)")
(version "1.3.0")
(classification "experimental")
(author "Dale W. Walton")
(credit "Dale W. Walton")
(date "16-09-2020")
}
)

(graphics
    {
    (player Colour P1 (colour 229 92 0))
    (player Colour P2 (colour Cream))
    (piece Scale Neutral "Disc" 1.2)
    (piece Scale P1 "Disc" 1.0)
    (piece Scale P2 "Disc" 0.97)
    (piece Colour Neutral fillColour:(colour 40 23 11) strokeColour:(colour 173 173 173))
    (piece Colour P1 fillColour:(colour 229 92 0) strokeColour:(colour 173 173 173))
    (piece Colour P2 fillColour:(colour 255 238 170) strokeColour:(colour 216 216 216))
    (board Colour Phase0 (colour 136 161 252))
    (board Colour OuterEdges (colour 0 0 0))
    (board Colour InnerEdges (colour 0 0 0))
    (board StyleThickness OuterEdges 1.0)
    (board StyleThickness InnerEdges 0.5)
    (show Symbol "disc.svg" Cell
        <Board:ctr>
        fillColour:(colour 40 23 11 185)
        edgeColour:(colour 40 23 11 30)
        scale:<Board:bgrd>
        rotation:120
    )
    }
)
(ai
    "RootZone_ai"
)
)

